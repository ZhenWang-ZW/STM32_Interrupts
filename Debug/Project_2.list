
Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009080  08009080  00019080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009420  08009420  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009428  08009428  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009428  08009428  00019428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800942c  0800942c  0001942c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001e8  08009618  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08009618  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b88  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000254a  00000000  00000000  00033da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  000362f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d0  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002864c  00000000  00000000  000387b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de2a  00000000  00000000  00060e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001064e7  00000000  00000000  0006ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b44  00000000  00000000  00175190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009068 	.word	0x08009068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009068 	.word	0x08009068

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <Interrupts_start>:
static void MX_NVIC_Init(void);
void USART2_write(int c);
void USART_PRINT(char *msg);


void Interrupts_start(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <Interrupts_start+0x34>)
 8000f8c:	f004 fc12 	bl	80057b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <Interrupts_start+0x38>)
 8000f92:	f004 fbb9 	bl	8005708 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <Interrupts_start+0x3c>)
 8000f98:	f001 fd30 	bl	80029fc <HAL_ADC_Start_IT>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i

	__disable_irq();
	USART2->CR1 |= 0x00000020;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <Interrupts_start+0x40>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <Interrupts_start+0x40>)
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 8000faa:	2026      	movs	r0, #38	; 0x26
 8000fac:	f7ff ffcc 	bl	8000f48 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb0:	b662      	cpsie	i
	__enable_irq();
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000310 	.word	0x20000310
 8000fbc:	200002d0 	.word	0x200002d0
 8000fc0:	20000268 	.word	0x20000268
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <HAL_TIM_IC_CaptureCallback>:

/* TIM1 CH2 Interrupts */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f1b      	ldrb	r3, [r3, #28]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d145      	bne.n	8001064 <HAL_TIM_IC_CaptureCallback+0x9c>
		if(Is_First_Captured == 0){
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10a      	bne.n	8000ff6 <HAL_TIM_IC_CaptureCallback+0x2e>
			IC_Value1 =  HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f004 fe10 	bl	8005c08 <HAL_TIM_ReadCapturedValue>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000fec:	601a      	str	r2, [r3, #0]
			Is_First_Captured=1;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
			Frequency = HAL_RCC_GetPCLK1Freq()/Difference;
			Is_First_Captured = 0;
		}

	}
}
 8000ff4:	e036      	b.n	8001064 <HAL_TIM_IC_CaptureCallback+0x9c>
		}else if(Is_First_Captured==1){
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d132      	bne.n	8001064 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f004 fe01 	bl	8005c08 <HAL_TIM_ReadCapturedValue>
 8001006:	4602      	mov	r2, r0
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xac>)
 800100a:	601a      	str	r2, [r3, #0]
			if(IC_Value2 > IC_Value1){
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xac>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d907      	bls.n	8001028 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Value2 - IC_Value1;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xac>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e011      	b.n	800104c <HAL_TIM_IC_CaptureCallback+0x84>
			}else if(IC_Value2<IC_Value1){
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xac>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d209      	bcs.n	8001048 <HAL_TIM_IC_CaptureCallback+0x80>
				Difference = ((0xffff-IC_Value1)+IC_Value2)+1;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e001      	b.n	800104c <HAL_TIM_IC_CaptureCallback+0x84>
				Error_Handler();
 8001048:	f000 fd8e 	bl	8001b68 <Error_Handler>
			Frequency = HAL_RCC_GetPCLK1Freq()/Difference;
 800104c:	f003 fdf4 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8001050:	4602      	mov	r2, r0
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800105c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000250 	.word	0x20000250
 8001070:	20000240 	.word	0x20000240
 8001074:	20000244 	.word	0x20000244
 8001078:	20000248 	.word	0x20000248
 800107c:	2000024c 	.word	0x2000024c

08001080 <HAL_TIM_PeriodElapsedCallback>:

/* TIM6 Interrupts Cylon led display*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if(reverse == 0){
 8001088:	4b3c      	ldr	r3, [pc, #240]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d142      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x96>
		if(gpio_pin_index==0){
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_TogglePin(GPIO_ARRAY[gpio_pin_index].GPIO_x, GPIO_ARRAY[gpio_pin_index].GPIO_Pin);
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a39      	ldr	r2, [pc, #228]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800109e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a37      	ldr	r2, [pc, #220]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	4619      	mov	r1, r3
 80010b0:	f002 ffe6 	bl	8004080 <HAL_GPIO_TogglePin>
 80010b4:	e01d      	b.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x72>
		}else{
			HAL_GPIO_TogglePin(GPIO_ARRAY[gpio_pin_index-1].GPIO_x, GPIO_ARRAY[gpio_pin_index-1].GPIO_Pin);
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a31      	ldr	r2, [pc, #196]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010be:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	889b      	ldrh	r3, [r3, #4]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f002 ffd5 	bl	8004080 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIO_ARRAY[gpio_pin_index].GPIO_x, GPIO_ARRAY[gpio_pin_index].GPIO_Pin);
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f002 ffc7 	bl	8004080 <HAL_GPIO_TogglePin>
		}
		gpio_pin_index++;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010fa:	6013      	str	r3, [r2, #0]
		if(gpio_pin_index>7){
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b07      	cmp	r3, #7
 8001102:	dd37      	ble.n	8001174 <HAL_TIM_PeriodElapsedCallback+0xf4>
			reverse=1;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
			gpio_pin_index--;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001112:	6013      	str	r3, [r2, #0]
		if(gpio_pin_index==0){
			reverse=0;
			gpio_pin_index++;
		}
	}
}
 8001114:	e02e      	b.n	8001174 <HAL_TIM_PeriodElapsedCallback+0xf4>
		HAL_GPIO_TogglePin(GPIO_ARRAY[gpio_pin_index].GPIO_x, GPIO_ARRAY[gpio_pin_index].GPIO_Pin);
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800111c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	f002 ffa7 	bl	8004080 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIO_ARRAY[gpio_pin_index-1].GPIO_x, GPIO_ARRAY[gpio_pin_index-1].GPIO_Pin);
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3b01      	subs	r3, #1
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800113a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	4619      	mov	r1, r3
 800114e:	f002 ff97 	bl	8004080 <HAL_GPIO_TogglePin>
		gpio_pin_index--;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800115a:	6013      	str	r3, [r2, #0]
		if(gpio_pin_index==0){
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <HAL_TIM_PeriodElapsedCallback+0xf4>
			reverse=0;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
			gpio_pin_index++;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000238 	.word	0x20000238
 8001180:	2000023c 	.word	0x2000023c
 8001184:	0800913c 	.word	0x0800913c

08001188 <USART2_IRQHandler>:

/* USART2 input Interrupts */
void USART2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <USART2_IRQHandler+0x28>)
 800118e:	f005 f875 	bl	800627c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	if (USART2->ISR & 0x0020) {
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <USART2_IRQHandler+0x2c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <USART2_IRQHandler+0x22>
		Rx_Char = USART2->RDR;
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <USART2_IRQHandler+0x2c>)
 80011a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <USART2_IRQHandler+0x30>)
 80011a8:	701a      	strb	r2, [r3, #0]
	}
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000350 	.word	0x20000350
 80011b4:	40004400 	.word	0x40004400
 80011b8:	20000264 	.word	0x20000264
 80011bc:	00000000 	.word	0x00000000

080011c0 <HAL_ADC_ConvCpltCallback>:

/* ADC interrupts. */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80011c8:	4833      	ldr	r0, [pc, #204]	; (8001298 <HAL_ADC_ConvCpltCallback+0xd8>)
 80011ca:	f001 fa8d 	bl	80026e8 <HAL_ADC_Start>
	ADC_Status = HAL_ADC_PollForConversion(&hadc1, 100);
 80011ce:	2164      	movs	r1, #100	; 0x64
 80011d0:	4831      	ldr	r0, [pc, #196]	; (8001298 <HAL_ADC_ConvCpltCallback+0xd8>)
 80011d2:	f001 fb43 	bl	800285c <HAL_ADC_PollForConversion>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_ADC_ConvCpltCallback+0xdc>)
 80011dc:	601a      	str	r2, [r3, #0]
	if (ADC_Status == HAL_OK)
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_ADC_ConvCpltCallback+0xdc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_ADC_ConvCpltCallback+0x32>
	{
	  ADC_Result = HAL_ADC_GetValue(&hadc1);
 80011e6:	482c      	ldr	r0, [pc, #176]	; (8001298 <HAL_ADC_ConvCpltCallback+0xd8>)
 80011e8:	f001 fd3a 	bl	8002c60 <HAL_ADC_GetValue>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011f0:	601a      	str	r2, [r3, #0]
	}
	ADC_Voltage = (float)ADC_Result  * 3.3 / 4095.0;
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fe:	ee17 0a90 	vmov	r0, s15
 8001202:	f7ff f9a1 	bl	8000548 <__aeabi_f2d>
 8001206:	a320      	add	r3, pc, #128	; (adr r3, 8001288 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff f9f4 	bl	80005f8 <__aeabi_dmul>
 8001210:	4603      	mov	r3, r0
 8001212:	460c      	mov	r4, r1
 8001214:	4618      	mov	r0, r3
 8001216:	4621      	mov	r1, r4
 8001218:	a31d      	add	r3, pc, #116	; (adr r3, 8001290 <HAL_ADC_ConvCpltCallback+0xd0>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fb15 	bl	800084c <__aeabi_ddiv>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	4618      	mov	r0, r3
 8001228:	4621      	mov	r1, r4
 800122a:	f7ff fcbd 	bl	8000ba8 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001232:	601a      	str	r2, [r3, #0]
	if(ADC_Voltage<1){
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d507      	bpl.n	8001258 <HAL_ADC_ConvCpltCallback+0x98>
		tim6_period = 2500;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800124a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800124e:	601a      	str	r2, [r3, #0]
		current = 0;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_ADC_ConvCpltCallback+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e006      	b.n	8001266 <HAL_ADC_ConvCpltCallback+0xa6>
	}else{
		tim6_period = 10000;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800125a:	f242 7210 	movw	r2, #10000	; 0x2710
 800125e:	601a      	str	r2, [r3, #0]
		current = 1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_ADC_ConvCpltCallback+0xec>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
	}
	if(previous !=  current){
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_ADC_ConvCpltCallback+0xec>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d005      	beq.n	800127e <HAL_ADC_ConvCpltCallback+0xbe>
		MX_TIM6_Init();
 8001272:	f000 fb79 	bl	8001968 <MX_TIM6_Init>
		previous = current;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_ADC_ConvCpltCallback+0xec>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 800127c:	6013      	str	r3, [r2, #0]
	}
//	HAL_Delay(50);
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	66666666 	.word	0x66666666
 800128c:	400a6666 	.word	0x400a6666
 8001290:	00000000 	.word	0x00000000
 8001294:	40affe00 	.word	0x40affe00
 8001298:	20000268 	.word	0x20000268
 800129c:	20000260 	.word	0x20000260
 80012a0:	200003d0 	.word	0x200003d0
 80012a4:	200002cc 	.word	0x200002cc
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000004 	.word	0x20000004

080012b4 <main>:

int main(void)
{
 80012b4:	b5b0      	push	{r4, r5, r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f000 fe3e 	bl	8001f38 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f9d2 	bl	8001664 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f000 fbbe 	bl	8001a40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012c4:	f000 fb8c 	bl	80019e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012c8:	f000 faf4 	bl	80018b4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80012cc:	f000 fa76 	bl	80017bc <MX_ADC1_Init>
  MX_TIM6_Init();
 80012d0:	f000 fb4a 	bl	8001968 <MX_TIM6_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 80012d4:	f000 fa4e 	bl	8001774 <MX_NVIC_Init>


  /* Interrupts start. */
  Interrupts_start();
 80012d8:	f7ff fe54 	bl	8000f84 <Interrupts_start>

  /* Infinite loop */
  while (1)
  {
	  // check if Continuous mode is on or not
	  if(Is_Continuous_Mode_ON==1){
 80012dc:	4bb4      	ldr	r3, [pc, #720]	; (80015b0 <main+0x2fc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d158      	bne.n	8001396 <main+0xe2>
		  // check if Continuous mode cmd
		  if(continuous_cmd=='C' || continuous_cmd=='c'){
 80012e4:	4bb3      	ldr	r3, [pc, #716]	; (80015b4 <main+0x300>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b43      	cmp	r3, #67	; 0x43
 80012ea:	d003      	beq.n	80012f4 <main+0x40>
 80012ec:	4bb1      	ldr	r3, [pc, #708]	; (80015b4 <main+0x300>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b63      	cmp	r3, #99	; 0x63
 80012f2:	d123      	bne.n	800133c <main+0x88>
			  // check if usart captured cmd
			  if(!(Rx_Char=='E' || Rx_Char=='e') && !(Rx_Char=='C' || Rx_Char=='c')){
 80012f4:	4bb0      	ldr	r3, [pc, #704]	; (80015b8 <main+0x304>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b45      	cmp	r3, #69	; 0x45
 80012fa:	d04b      	beq.n	8001394 <main+0xe0>
 80012fc:	4bae      	ldr	r3, [pc, #696]	; (80015b8 <main+0x304>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b65      	cmp	r3, #101	; 0x65
 8001302:	d047      	beq.n	8001394 <main+0xe0>
 8001304:	4bac      	ldr	r3, [pc, #688]	; (80015b8 <main+0x304>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b43      	cmp	r3, #67	; 0x43
 800130a:	d043      	beq.n	8001394 <main+0xe0>
 800130c:	4baa      	ldr	r3, [pc, #680]	; (80015b8 <main+0x304>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b63      	cmp	r3, #99	; 0x63
 8001312:	d03f      	beq.n	8001394 <main+0xe0>
				  Rx_Char = continuous_cmd;
 8001314:	4ba7      	ldr	r3, [pc, #668]	; (80015b4 <main+0x300>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4ba7      	ldr	r3, [pc, #668]	; (80015b8 <main+0x304>)
 800131a:	701a      	strb	r2, [r3, #0]
				  strcpy(msg, "Continuous Mode is ON, enter E/e to stop!");
 800131c:	4aa7      	ldr	r2, [pc, #668]	; (80015bc <main+0x308>)
 800131e:	4ba8      	ldr	r3, [pc, #672]	; (80015c0 <main+0x30c>)
 8001320:	4614      	mov	r4, r2
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001330:	c403      	stmia	r4!, {r0, r1}
 8001332:	8022      	strh	r2, [r4, #0]
				  USART_PRINT(msg);
 8001334:	48a1      	ldr	r0, [pc, #644]	; (80015bc <main+0x308>)
 8001336:	f000 f973 	bl	8001620 <USART_PRINT>
			  if(!(Rx_Char=='E' || Rx_Char=='e') && !(Rx_Char=='C' || Rx_Char=='c')){
 800133a:	e02b      	b.n	8001394 <main+0xe0>
			  }
		  }else if(continuous_cmd=='W' || continuous_cmd=='w'){
 800133c:	4b9d      	ldr	r3, [pc, #628]	; (80015b4 <main+0x300>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b57      	cmp	r3, #87	; 0x57
 8001342:	d003      	beq.n	800134c <main+0x98>
 8001344:	4b9b      	ldr	r3, [pc, #620]	; (80015b4 <main+0x300>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b77      	cmp	r3, #119	; 0x77
 800134a:	d124      	bne.n	8001396 <main+0xe2>
			  if(!(Rx_Char=='Q' || Rx_Char=='q') && !(Rx_Char=='W' || Rx_Char=='w')){
 800134c:	4b9a      	ldr	r3, [pc, #616]	; (80015b8 <main+0x304>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b51      	cmp	r3, #81	; 0x51
 8001352:	d020      	beq.n	8001396 <main+0xe2>
 8001354:	4b98      	ldr	r3, [pc, #608]	; (80015b8 <main+0x304>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b71      	cmp	r3, #113	; 0x71
 800135a:	d01c      	beq.n	8001396 <main+0xe2>
 800135c:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <main+0x304>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b57      	cmp	r3, #87	; 0x57
 8001362:	d018      	beq.n	8001396 <main+0xe2>
 8001364:	4b94      	ldr	r3, [pc, #592]	; (80015b8 <main+0x304>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b77      	cmp	r3, #119	; 0x77
 800136a:	d014      	beq.n	8001396 <main+0xe2>
				  Rx_Char = continuous_cmd;
 800136c:	4b91      	ldr	r3, [pc, #580]	; (80015b4 <main+0x300>)
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b91      	ldr	r3, [pc, #580]	; (80015b8 <main+0x304>)
 8001372:	701a      	strb	r2, [r3, #0]
				  strcpy(msg, "Continuous Mode is ON, enter Q/q to stop!");
 8001374:	4a91      	ldr	r2, [pc, #580]	; (80015bc <main+0x308>)
 8001376:	4b93      	ldr	r3, [pc, #588]	; (80015c4 <main+0x310>)
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001388:	c403      	stmia	r4!, {r0, r1}
 800138a:	8022      	strh	r2, [r4, #0]
				  USART_PRINT(msg);
 800138c:	488b      	ldr	r0, [pc, #556]	; (80015bc <main+0x308>)
 800138e:	f000 f947 	bl	8001620 <USART_PRINT>
 8001392:	e000      	b.n	8001396 <main+0xe2>
			  if(!(Rx_Char=='E' || Rx_Char=='e') && !(Rx_Char=='C' || Rx_Char=='c')){
 8001394:	bf00      	nop
			  }
		  }
	  }
	  switch(Rx_Char){
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <main+0x304>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3b41      	subs	r3, #65	; 0x41
 800139c:	2b36      	cmp	r3, #54	; 0x36
 800139e:	f200 8104 	bhi.w	80015aa <main+0x2f6>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <main+0xf4>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	08001485 	.word	0x08001485
 80013ac:	080015ab 	.word	0x080015ab
 80013b0:	0800151f 	.word	0x0800151f
 80013b4:	080015ab 	.word	0x080015ab
 80013b8:	0800159d 	.word	0x0800159d
 80013bc:	080014e5 	.word	0x080014e5
 80013c0:	080015ab 	.word	0x080015ab
 80013c4:	080015ab 	.word	0x080015ab
 80013c8:	080015ab 	.word	0x080015ab
 80013cc:	080015ab 	.word	0x080015ab
 80013d0:	080015ab 	.word	0x080015ab
 80013d4:	080015ab 	.word	0x080015ab
 80013d8:	080015ab 	.word	0x080015ab
 80013dc:	080015ab 	.word	0x080015ab
 80013e0:	080015ab 	.word	0x080015ab
 80013e4:	080015ab 	.word	0x080015ab
 80013e8:	0800159d 	.word	0x0800159d
 80013ec:	080015ab 	.word	0x080015ab
 80013f0:	080015ab 	.word	0x080015ab
 80013f4:	080014c9 	.word	0x080014c9
 80013f8:	080015ab 	.word	0x080015ab
 80013fc:	080014a1 	.word	0x080014a1
 8001400:	08001555 	.word	0x08001555
 8001404:	080015ab 	.word	0x080015ab
 8001408:	080015ab 	.word	0x080015ab
 800140c:	080015ab 	.word	0x080015ab
 8001410:	080015ab 	.word	0x080015ab
 8001414:	080015ab 	.word	0x080015ab
 8001418:	080015ab 	.word	0x080015ab
 800141c:	080015ab 	.word	0x080015ab
 8001420:	080015ab 	.word	0x080015ab
 8001424:	080015ab 	.word	0x080015ab
 8001428:	08001485 	.word	0x08001485
 800142c:	080015ab 	.word	0x080015ab
 8001430:	0800151f 	.word	0x0800151f
 8001434:	080015ab 	.word	0x080015ab
 8001438:	0800159d 	.word	0x0800159d
 800143c:	080014e5 	.word	0x080014e5
 8001440:	080015ab 	.word	0x080015ab
 8001444:	080015ab 	.word	0x080015ab
 8001448:	080015ab 	.word	0x080015ab
 800144c:	080015ab 	.word	0x080015ab
 8001450:	080015ab 	.word	0x080015ab
 8001454:	080015ab 	.word	0x080015ab
 8001458:	080015ab 	.word	0x080015ab
 800145c:	080015ab 	.word	0x080015ab
 8001460:	080015ab 	.word	0x080015ab
 8001464:	080015ab 	.word	0x080015ab
 8001468:	0800159d 	.word	0x0800159d
 800146c:	080015ab 	.word	0x080015ab
 8001470:	080015ab 	.word	0x080015ab
 8001474:	080014c9 	.word	0x080014c9
 8001478:	080015ab 	.word	0x080015ab
 800147c:	080014a1 	.word	0x080014a1
 8001480:	08001555 	.word	0x08001555
		case 'A':
		case 'a':
			sprintf(msg, "ADC Result = %d", ADC_Result);
 8001484:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <main+0x314>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4950      	ldr	r1, [pc, #320]	; (80015cc <main+0x318>)
 800148c:	484b      	ldr	r0, [pc, #300]	; (80015bc <main+0x308>)
 800148e:	f006 fa0b 	bl	80078a8 <siprintf>
			USART_PRINT(msg);
 8001492:	484a      	ldr	r0, [pc, #296]	; (80015bc <main+0x308>)
 8001494:	f000 f8c4 	bl	8001620 <USART_PRINT>
			Rx_Char='\0';
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <main+0x304>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
			break;
 800149e:	e085      	b.n	80015ac <main+0x2f8>
		case 'V':
		case 'v':
			sprintf(msg, "ADC Voltage = %.2f", ADC_Voltage);
 80014a0:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <main+0x31c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	4948      	ldr	r1, [pc, #288]	; (80015d4 <main+0x320>)
 80014b4:	4841      	ldr	r0, [pc, #260]	; (80015bc <main+0x308>)
 80014b6:	f006 f9f7 	bl	80078a8 <siprintf>
			USART_PRINT(msg);
 80014ba:	4840      	ldr	r0, [pc, #256]	; (80015bc <main+0x308>)
 80014bc:	f000 f8b0 	bl	8001620 <USART_PRINT>
			Rx_Char='\0';
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <main+0x304>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
			break;
 80014c6:	e071      	b.n	80015ac <main+0x2f8>
		case 'T':
		case 't':
			sprintf(msg, "Timer output Period = %d us", Difference);
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <main+0x324>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4943      	ldr	r1, [pc, #268]	; (80015dc <main+0x328>)
 80014d0:	483a      	ldr	r0, [pc, #232]	; (80015bc <main+0x308>)
 80014d2:	f006 f9e9 	bl	80078a8 <siprintf>
			USART_PRINT(msg);
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <main+0x308>)
 80014d8:	f000 f8a2 	bl	8001620 <USART_PRINT>
			Rx_Char='\0';
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <main+0x304>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
			break;
 80014e2:	e063      	b.n	80015ac <main+0x2f8>
		case 'F':
		case 'f':
			sprintf(msg, "Timer output Frequency = %.2f kHz", (float)Frequency/1000);
 80014e4:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <main+0x32c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80015e4 <main+0x330>
 80014f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014f8:	ee16 0a90 	vmov	r0, s13
 80014fc:	f7ff f824 	bl	8000548 <__aeabi_f2d>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <main+0x334>)
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <main+0x308>)
 800150c:	f006 f9cc 	bl	80078a8 <siprintf>
			USART_PRINT(msg);
 8001510:	482a      	ldr	r0, [pc, #168]	; (80015bc <main+0x308>)
 8001512:	f000 f885 	bl	8001620 <USART_PRINT>
			Rx_Char='\0';
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <main+0x304>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
			break;
 800151c:	e046      	b.n	80015ac <main+0x2f8>
		case 'C':
		case 'c':
			sprintf(msg, "ADC Voltage = %.2f", ADC_Voltage);
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <main+0x31c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f810 	bl	8000548 <__aeabi_f2d>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	4928      	ldr	r1, [pc, #160]	; (80015d4 <main+0x320>)
 8001532:	4822      	ldr	r0, [pc, #136]	; (80015bc <main+0x308>)
 8001534:	f006 f9b8 	bl	80078a8 <siprintf>
			USART_PRINT(msg);
 8001538:	4820      	ldr	r0, [pc, #128]	; (80015bc <main+0x308>)
 800153a:	f000 f871 	bl	8001620 <USART_PRINT>
			continuous_cmd='c';
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <main+0x300>)
 8001540:	2263      	movs	r2, #99	; 0x63
 8001542:	701a      	strb	r2, [r3, #0]
			Is_Continuous_Mode_ON=1;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <main+0x2fc>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800154a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154e:	f000 fd6b 	bl	8002028 <HAL_Delay>
			break;
 8001552:	e02b      	b.n	80015ac <main+0x2f8>
		case 'W':
		case 'w':
			sprintf(msg, "Timer output Frequency = %.2f kHz", (float)Frequency/1000);
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <main+0x32c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001560:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015e4 <main+0x330>
 8001564:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001568:	ee16 0a90 	vmov	r0, s13
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	491b      	ldr	r1, [pc, #108]	; (80015e8 <main+0x334>)
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <main+0x308>)
 800157c:	f006 f994 	bl	80078a8 <siprintf>
			USART_PRINT(msg);
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <main+0x308>)
 8001582:	f000 f84d 	bl	8001620 <USART_PRINT>
			continuous_cmd='w';
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <main+0x300>)
 8001588:	2277      	movs	r2, #119	; 0x77
 800158a:	701a      	strb	r2, [r3, #0]
			Is_Continuous_Mode_ON=1;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <main+0x2fc>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001596:	f000 fd47 	bl	8002028 <HAL_Delay>
			break;
 800159a:	e007      	b.n	80015ac <main+0x2f8>
		case 'E':
		case 'e':
		case 'Q':
		case 'q':
			Is_Continuous_Mode_ON=0;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <main+0x2fc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
			Rx_Char='\0';
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <main+0x304>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
			break;
 80015a8:	e000      	b.n	80015ac <main+0x2f8>
		default:
			break;
 80015aa:	bf00      	nop
	  if(Is_Continuous_Mode_ON==1){
 80015ac:	e696      	b.n	80012dc <main+0x28>
 80015ae:	bf00      	nop
 80015b0:	20000251 	.word	0x20000251
 80015b4:	200003d4 	.word	0x200003d4
 80015b8:	20000264 	.word	0x20000264
 80015bc:	20000204 	.word	0x20000204
 80015c0:	08009080 	.word	0x08009080
 80015c4:	080090ac 	.word	0x080090ac
 80015c8:	200003d0 	.word	0x200003d0
 80015cc:	080090d8 	.word	0x080090d8
 80015d0:	200002cc 	.word	0x200002cc
 80015d4:	080090e8 	.word	0x080090e8
 80015d8:	20000248 	.word	0x20000248
 80015dc:	080090fc 	.word	0x080090fc
 80015e0:	2000024c 	.word	0x2000024c
 80015e4:	447a0000 	.word	0x447a0000
 80015e8:	08009118 	.word	0x08009118

080015ec <USART2_write>:
  }

}

/* Write a character to USART2 */
void USART2_write (int ch) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    while (!(USART2->ISR & 0x0080)) {}   // wait until Tx buffer empty
 80015f4:	bf00      	nop
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <USART2_write+0x30>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f9      	beq.n	80015f6 <USART2_write+0xa>
    USART2->TDR = (ch & 0xFF);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <USART2_write+0x30>)
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	b292      	uxth	r2, r2
 800160c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400

08001620 <USART_PRINT>:

void USART_PRINT(char *buffer){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	for(int i=0; i<strlen(buffer);i++){
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e009      	b.n	8001642 <USART_PRINT+0x22>
		USART2_write(buffer[i]);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffd8 	bl	80015ec <USART2_write>
	for(int i=0; i<strlen(buffer);i++){
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7fe fdc4 	bl	80001d0 <strlen>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8ee      	bhi.n	800162e <USART_PRINT+0xe>
	}
	USART2_write('\r');
 8001650:	200d      	movs	r0, #13
 8001652:	f7ff ffcb 	bl	80015ec <USART2_write>
	USART2_write('\n');
 8001656:	200a      	movs	r0, #10
 8001658:	f7ff ffc8 	bl	80015ec <USART2_write>
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b8      	sub	sp, #224	; 0xe0
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800166e:	2244      	movs	r2, #68	; 0x44
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fcb4 	bl	8006fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2288      	movs	r2, #136	; 0x88
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fca6 	bl	8006fe0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a2:	2310      	movs	r3, #16
 80016a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016ba:	230a      	movs	r3, #10
 80016bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fd50 	bl	800417c <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016e2:	f000 fa41 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001708:	2104      	movs	r1, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f91c 	bl	8004948 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001716:	f000 fa27 	bl	8001b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800171a:	f244 0302 	movw	r3, #16386	; 0x4002
 800171e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001728:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800172a:	2302      	movs	r3, #2
 800172c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001732:	2308      	movs	r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001736:	2307      	movs	r3, #7
 8001738:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001746:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fb00 	bl	8004d50 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001756:	f000 fa07 	bl	8001b68 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800175a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800175e:	f002 fcb7 	bl	80040d0 <HAL_PWREx_ControlVoltageScaling>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001768:	f000 f9fe 	bl	8001b68 <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	37e0      	adds	r7, #224	; 0xe0
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2012      	movs	r0, #18
 800177e:	f002 fa48 	bl	8003c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001782:	2012      	movs	r0, #18
 8001784:	f002 fa61 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	201b      	movs	r0, #27
 800178e:	f002 fa40 	bl	8003c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001792:	201b      	movs	r0, #27
 8001794:	f002 fa59 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2026      	movs	r0, #38	; 0x26
 800179e:	f002 fa38 	bl	8003c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a2:	2026      	movs	r0, #38	; 0x26
 80017a4:	f002 fa51 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2036      	movs	r0, #54	; 0x36
 80017ae:	f002 fa30 	bl	8003c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b2:	2036      	movs	r0, #54	; 0x36
 80017b4:	f002 fa49 	bl	8003c4a <HAL_NVIC_EnableIRQ>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <MX_ADC1_Init+0xec>)
 80017e0:	4a32      	ldr	r2, [pc, #200]	; (80018ac <MX_ADC1_Init+0xf0>)
 80017e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <MX_ADC1_Init+0xec>)
 80017e6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80017ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <MX_ADC1_Init+0xec>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <MX_ADC1_Init+0xec>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <MX_ADC1_Init+0xec>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001800:	2204      	movs	r2, #4
 8001802:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001806:	2200      	movs	r2, #0
 8001808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <MX_ADC1_Init+0xec>)
 800180c:	2201      	movs	r2, #1
 800180e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001812:	2201      	movs	r2, #1
 8001814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001820:	2201      	movs	r2, #1
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_ADC1_Init+0xec>)
 800182c:	2200      	movs	r2, #0
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_ADC1_Init+0xec>)
 800183a:	2200      	movs	r2, #0
 800183c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001848:	f000 fdfa 	bl	8002440 <HAL_ADC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001852:	f000 f989 	bl	8001b68 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4810      	ldr	r0, [pc, #64]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001866:	f002 f84d 	bl	8003904 <HAL_ADCEx_MultiModeConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001870:	f000 f97a 	bl	8001b68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_ADC1_Init+0xf4>)
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001878:	2306      	movs	r3, #6
 800187a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001880:	237f      	movs	r3, #127	; 0x7f
 8001882:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001884:	2304      	movs	r3, #4
 8001886:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_ADC1_Init+0xec>)
 8001892:	f001 fc21 	bl	80030d8 <HAL_ADC_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800189c:	f000 f964 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//  HAL_ADC_Start_IT(&hadc1);
  /* USER CODE END ADC1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000268 	.word	0x20000268
 80018ac:	50040000 	.word	0x50040000
 80018b0:	25b00200 	.word	0x25b00200

080018b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <MX_TIM1_Init+0xac>)
 80018d4:	4a23      	ldr	r2, [pc, #140]	; (8001964 <MX_TIM1_Init+0xb0>)
 80018d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <MX_TIM1_Init+0xac>)
 80018da:	224f      	movs	r2, #79	; 0x4f
 80018dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_TIM1_Init+0xac>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <MX_TIM1_Init+0xac>)
 80018e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_TIM1_Init+0xac>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_TIM1_Init+0xac>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_TIM1_Init+0xac>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80018fe:	4818      	ldr	r0, [pc, #96]	; (8001960 <MX_TIM1_Init+0xac>)
 8001900:	f003 ff2c 	bl	800575c <HAL_TIM_IC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800190a:	f000 f92d 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480f      	ldr	r0, [pc, #60]	; (8001960 <MX_TIM1_Init+0xac>)
 8001922:	f004 fbb7 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800192c:	f000 f91c 	bl	8001b68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001934:	2301      	movs	r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2204      	movs	r2, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <MX_TIM1_Init+0xac>)
 8001948:	f004 f8c1 	bl	8005ace <HAL_TIM_IC_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001952:	f000 f909 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000310 	.word	0x20000310
 8001964:	40012c00 	.word	0x40012c00

08001968 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_TIM6_Init+0x6c>)
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <MX_TIM6_Init+0x70>)
 800197c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_TIM6_Init+0x6c>)
 8001980:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001984:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_TIM6_Init+0x6c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = tim6_period-1;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_TIM6_Init+0x74>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3b01      	subs	r3, #1
 8001992:	461a      	mov	r2, r3
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_TIM6_Init+0x6c>)
 8001996:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_TIM6_Init+0x6c>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_TIM6_Init+0x6c>)
 80019a0:	f003 fe86 	bl	80056b0 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM6_Init+0x46>
  {
    Error_Handler();
 80019aa:	f000 f8dd 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM6_Init+0x6c>)
 80019bc:	f004 fb6a 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80019c6:	f000 f8cf 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
//  HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002d0 	.word	0x200002d0
 80019d8:	40001000 	.word	0x40001000
 80019dc:	20000000 	.word	0x20000000

080019e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <MX_USART2_UART_Init+0x5c>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_USART2_UART_Init+0x58>)
 8001a24:	f004 fbdc 	bl	80061e0 <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a2e:	f000 f89b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000350 	.word	0x20000350
 8001a3c:	40004400 	.word	0x40004400

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <MX_GPIO_Init+0x118>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2103      	movs	r1, #3
 8001aba:	4828      	ldr	r0, [pc, #160]	; (8001b5c <MX_GPIO_Init+0x11c>)
 8001abc:	f002 fac8 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f002 fac1 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001ad4:	4822      	ldr	r0, [pc, #136]	; (8001b60 <MX_GPIO_Init+0x120>)
 8001ad6:	f002 fabb 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <MX_GPIO_Init+0x124>)
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	481b      	ldr	r0, [pc, #108]	; (8001b5c <MX_GPIO_Init+0x11c>)
 8001af0:	f002 f906 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001af4:	2303      	movs	r3, #3
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_GPIO_Init+0x11c>)
 8001b0c:	f002 f8f8 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8001b10:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f002 f8e8 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b30:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_GPIO_Init+0x120>)
 8001b4a:	f002 f8d9 	bl	8003d00 <HAL_GPIO_Init>

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000400 	.word	0x48000400
 8001b64:	10210000 	.word	0x10210000

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_MspInit+0x44>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_MspInit+0x44>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_MspInit+0x44>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x44>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x44>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x44>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_ADC_MspInit+0x74>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d124      	bne.n	8001c2c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_ADC_MspInit+0x78>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_ADC_MspInit+0x78>)
 8001be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_ADC_MspInit+0x78>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_ADC_MspInit+0x78>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_ADC_MspInit+0x78>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_ADC_MspInit+0x78>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c12:	2310      	movs	r3, #16
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c16:	230b      	movs	r3, #11
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c28:	f002 f86a 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	50040000 	.word	0x50040000
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_IC_MspInit+0x80>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d129      	bne.n	8001cb2 <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_TIM_IC_MspInit+0x84>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_TIM_IC_MspInit+0x84>)
 8001c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c68:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_TIM_IC_MspInit+0x84>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_TIM_IC_MspInit+0x84>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_TIM_IC_MspInit+0x84>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_TIM_IC_MspInit+0x84>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f002 f827 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_TIM_Base_MspInit+0x38>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10b      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_TIM_Base_MspInit+0x3c>)
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40001000 	.word	0x40001000
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_UART_MspInit+0x7c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d128      	bne.n	8001d78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0x80>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_UART_MspInit+0x80>)
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_UART_MspInit+0x80>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_UART_MspInit+0x80>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_UART_MspInit+0x80>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_UART_MspInit+0x80>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d56:	230c      	movs	r3, #12
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d66:	2307      	movs	r3, #7
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f001 ffc4 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40004400 	.word	0x40004400
 8001d84:	40021000 	.word	0x40021000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 f906 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
////
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <ADC1_2_IRQHandler+0x10>)
 8001dea:	f000 ff47 	bl	8002c7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
////
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000268 	.word	0x20000268

08001df8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <TIM1_CC_IRQHandler+0x10>)
 8001dfe:	f003 fd47 	bl	8005890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000310 	.word	0x20000310

08001e0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM6_DAC_IRQHandler+0x10>)
 8001e12:	f003 fd3d 	bl	8005890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200002d0 	.word	0x200002d0

08001e20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <_sbrk+0x50>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_sbrk+0x16>
		heap_end = &end;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <_sbrk+0x50>)
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <_sbrk+0x54>)
 8001e34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <_sbrk+0x50>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <_sbrk+0x50>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	466a      	mov	r2, sp
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d907      	bls.n	8001e5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e4a:	f005 f89f 	bl	8006f8c <__errno>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	230c      	movs	r3, #12
 8001e52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	e006      	b.n	8001e68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <_sbrk+0x50>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <_sbrk+0x50>)
 8001e64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000254 	.word	0x20000254
 8001e74:	200003e0 	.word	0x200003e0

08001e78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <SystemInit+0x64>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <SystemInit+0x64>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <SystemInit+0x68>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <SystemInit+0x68>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <SystemInit+0x68>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <SystemInit+0x68>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <SystemInit+0x68>)
 8001ea4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ea8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001eac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <SystemInit+0x68>)
 8001eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <SystemInit+0x68>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <SystemInit+0x68>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <SystemInit+0x68>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SystemInit+0x64>)
 8001eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ece:	609a      	str	r2, [r3, #8]
#endif
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ee8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001efa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
	ldr	r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <LoopForever+0x16>)
	cmp	r2, r3
 8001f0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f0e:	f7ff ffb3 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f005 f841 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7ff f9cd 	bl	80012b4 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001f20:	08009430 	.word	0x08009430
	ldr	r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f28:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8001f2c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8001f30:	200003e0 	.word	0x200003e0

08001f34 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC3_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_Init+0x3c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_Init+0x3c>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f001 fe54 	bl	8003bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 f80f 	bl	8001f78 <HAL_InitTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	e001      	b.n	8001f6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f66:	f7ff fe07 	bl	8001b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_InitTick+0x68>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d022      	beq.n	8001fd2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_InitTick+0x6c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_InitTick+0x68>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 fe60 	bl	8003c66 <HAL_SYSTICK_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	d809      	bhi.n	8001fc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fba:	f001 fe2a 	bl	8003c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_InitTick+0x70>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e007      	b.n	8001fd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e004      	b.n	8001fd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e001      	b.n	8001fd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000014 	.word	0x20000014
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	20000010 	.word	0x20000010

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_IncTick+0x1c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x20>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a03      	ldr	r2, [pc, #12]	; (8002008 <HAL_IncTick+0x1c>)
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	200003d8 	.word	0x200003d8
 800200c:	20000014 	.word	0x20000014

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200003d8 	.word	0x200003d8

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d004      	beq.n	800204c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_Delay+0x40>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204c:	bf00      	nop
 800204e:	f7ff ffdf 	bl	8002010 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	429a      	cmp	r2, r3
 800205c:	d8f7      	bhi.n	800204e <HAL_Delay+0x26>
  {
  }
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000014 	.word	0x20000014

0800206c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020d4:	b490      	push	{r4, r7}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <LL_ADC_SetOffset+0x40>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	4313      	orrs	r3, r2
 8002102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002106:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bc90      	pop	{r4, r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	03fff000 	.word	0x03fff000

08002118 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002118:	b490      	push	{r4, r7}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3360      	adds	r3, #96	; 0x60
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bc90      	pop	{r4, r7}
 800213e:	4770      	bx	lr

08002140 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002140:	b490      	push	{r4, r7}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bc90      	pop	{r4, r7}
 800216e:	4770      	bx	lr

08002170 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002196:	b490      	push	{r4, r7}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3330      	adds	r3, #48	; 0x30
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	4413      	add	r3, r2
 80021b4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	211f      	movs	r1, #31
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 011f 	and.w	r1, r3, #31
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc90      	pop	{r4, r7}
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800220e:	b490      	push	{r4, r7}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3314      	adds	r3, #20
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0e5b      	lsrs	r3, r3, #25
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	0d1b      	lsrs	r3, r3, #20
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2107      	movs	r1, #7
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	401a      	ands	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	0d1b      	lsrs	r3, r3, #20
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bc90      	pop	{r4, r7}
 800225c:	4770      	bx	lr
	...

08002260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0318 	and.w	r3, r3, #24
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002284:	40d9      	lsrs	r1, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	400b      	ands	r3, r1
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	0007ffff 	.word	0x0007ffff

080022a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 031f 	and.w	r3, r3, #31
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6093      	str	r3, [r2, #8]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002318:	d101      	bne.n	800231e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800233c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002368:	d101      	bne.n	800236e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800238c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <LL_ADC_IsEnabled+0x18>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <LL_ADC_IsEnabled+0x1a>
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023de:	f043 0204 	orr.w	r2, r3, #4
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d101      	bne.n	800240a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b08      	cmp	r3, #8
 800242a:	d101      	bne.n	8002430 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e134      	b.n	80026c4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fba9 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff3f 	bl	8002304 <LL_ADC_IsDeepPowerDownEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff25 	bl	80022e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff5a 	bl	8002354 <LL_ADC_IsInternalRegulatorEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d113      	bne.n	80024ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff3e 	bl	800232c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024b0:	4b86      	ldr	r3, [pc, #536]	; (80026cc <HAL_ADC_Init+0x28c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	4a86      	ldr	r2, [pc, #536]	; (80026d0 <HAL_ADC_Init+0x290>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f9      	bne.n	80024c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff3e 	bl	8002354 <LL_ADC_IsInternalRegulatorEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ff77 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 8002504:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 80cf 	bne.w	80026b2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 80cb 	bne.w	80026b2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff37 	bl	80023a4 <LL_ADC_IsEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d115      	bne.n	8002568 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253c:	4865      	ldr	r0, [pc, #404]	; (80026d4 <HAL_ADC_Init+0x294>)
 800253e:	f7ff ff31 	bl	80023a4 <LL_ADC_IsEnabled>
 8002542:	4604      	mov	r4, r0
 8002544:	4864      	ldr	r0, [pc, #400]	; (80026d8 <HAL_ADC_Init+0x298>)
 8002546:	f7ff ff2d 	bl	80023a4 <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	431c      	orrs	r4, r3
 800254e:	4863      	ldr	r0, [pc, #396]	; (80026dc <HAL_ADC_Init+0x29c>)
 8002550:	f7ff ff28 	bl	80023a4 <LL_ADC_IsEnabled>
 8002554:	4603      	mov	r3, r0
 8002556:	4323      	orrs	r3, r4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4619      	mov	r1, r3
 8002562:	485f      	ldr	r0, [pc, #380]	; (80026e0 <HAL_ADC_Init+0x2a0>)
 8002564:	f7ff fd82 	bl	800206c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e5b      	ldrb	r3, [r3, #25]
 800256c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002572:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002578:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800257e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002586:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d106      	bne.n	80025a4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	3b01      	subs	r3, #1
 800259c:	045b      	lsls	r3, r3, #17
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_ADC_Init+0x2a4>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff0a 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 80025de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff17 	bl	8002418 <LL_ADC_INJ_IsConversionOngoing>
 80025ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d13d      	bne.n	800266e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d13a      	bne.n	800266e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002604:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002614:	f023 0302 	bic.w	r3, r3, #2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	69b9      	ldr	r1, [r7, #24]
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002628:	2b01      	cmp	r3, #1
 800262a:	d118      	bne.n	800265e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002636:	f023 0304 	bic.w	r3, r3, #4
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800264e:	430a      	orrs	r2, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	611a      	str	r2, [r3, #16]
 800265c:	e007      	b.n	800266e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10c      	bne.n	8002690 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f023 010f 	bic.w	r1, r3, #15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
 800268e:	e007      	b.n	80026a0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020f 	bic.w	r2, r2, #15
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f023 0303 	bic.w	r3, r3, #3
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
 80026b0:	e007      	b.n	80026c2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3724      	adds	r7, #36	; 0x24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	2000000c 	.word	0x2000000c
 80026d0:	053e2d63 	.word	0x053e2d63
 80026d4:	50040000 	.word	0x50040000
 80026d8:	50040100 	.word	0x50040100
 80026dc:	50040200 	.word	0x50040200
 80026e0:	50040300 	.word	0x50040300
 80026e4:	fff0c007 	.word	0xfff0c007

080026e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f0:	4857      	ldr	r0, [pc, #348]	; (8002850 <HAL_ADC_Start+0x168>)
 80026f2:	f7ff fdd9 	bl	80022a8 <LL_ADC_GetMultimode>
 80026f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe78 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 809c 	bne.w	8002842 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_ADC_Start+0x30>
 8002714:	2302      	movs	r3, #2
 8002716:	e097      	b.n	8002848 <HAL_ADC_Start+0x160>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f001 f83d 	bl	80037a0 <ADC_Enable>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 8083 	bne.w	8002838 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a42      	ldr	r2, [pc, #264]	; (8002854 <HAL_ADC_Start+0x16c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d002      	beq.n	8002756 <HAL_ADC_Start+0x6e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	e000      	b.n	8002758 <HAL_ADC_Start+0x70>
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_ADC_Start+0x170>)
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4293      	cmp	r3, r2
 800275e:	d002      	beq.n	8002766 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	d106      	bne.n	800278e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f023 0206 	bic.w	r2, r3, #6
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	659a      	str	r2, [r3, #88]	; 0x58
 800278c:	e002      	b.n	8002794 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	221c      	movs	r2, #28
 800279a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <HAL_ADC_Start+0x16c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d002      	beq.n	80027b4 <HAL_ADC_Start+0xcc>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_Start+0xce>
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_ADC_Start+0x170>)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d008      	beq.n	80027d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d002      	beq.n	80027d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d114      	bne.n	80027fa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fde9 	bl	80023ca <LL_ADC_REG_StartConversion>
 80027f8:	e025      	b.n	8002846 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_ADC_Start+0x16c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d002      	beq.n	8002816 <HAL_ADC_Start+0x12e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	e000      	b.n	8002818 <HAL_ADC_Start+0x130>
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_ADC_Start+0x170>)
 8002818:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00f      	beq.n	8002846 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800282e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
 8002836:	e006      	b.n	8002846 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002840:	e001      	b.n	8002846 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002846:	7dfb      	ldrb	r3, [r7, #23]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	50040300 	.word	0x50040300
 8002854:	50040100 	.word	0x50040100
 8002858:	50040000 	.word	0x50040000

0800285c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002866:	4862      	ldr	r0, [pc, #392]	; (80029f0 <HAL_ADC_PollForConversion+0x194>)
 8002868:	f7ff fd1e 	bl	80022a8 <LL_ADC_GetMultimode>
 800286c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d102      	bne.n	800287c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002876:	2308      	movs	r3, #8
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e02a      	b.n	80028d2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d002      	beq.n	800288e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b09      	cmp	r3, #9
 800288c:	d111      	bne.n	80028b2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e09d      	b.n	80029e8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ac:	2304      	movs	r3, #4
 80028ae:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028b0:	e00f      	b.n	80028d2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028b2:	484f      	ldr	r0, [pc, #316]	; (80029f0 <HAL_ADC_PollForConversion+0x194>)
 80028b4:	f7ff fd06 	bl	80022c4 <LL_ADC_GetMultiDMATransfer>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e08c      	b.n	80029e8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ce:	2304      	movs	r3, #4
 80028d0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028d2:	f7ff fb9d 	bl	8002010 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028d8:	e01a      	b.n	8002910 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d016      	beq.n	8002910 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028e2:	f7ff fb95 	bl	8002010 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <HAL_ADC_PollForConversion+0x9c>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e06b      	b.n	80029e8 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0dd      	beq.n	80028da <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fc1e 	bl	8002170 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01c      	beq.n	8002974 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7e5b      	ldrb	r3, [r3, #25]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b08      	cmp	r3, #8
 800294e:	d111      	bne.n	8002974 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_ADC_PollForConversion+0x198>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d002      	beq.n	8002984 <HAL_ADC_PollForConversion+0x128>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e000      	b.n	8002986 <HAL_ADC_PollForConversion+0x12a>
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_ADC_PollForConversion+0x19c>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	4293      	cmp	r3, r2
 800298c:	d008      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d002      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b09      	cmp	r3, #9
 800299e:	d104      	bne.n	80029aa <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e00c      	b.n	80029c4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <HAL_ADC_PollForConversion+0x198>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d002      	beq.n	80029ba <HAL_ADC_PollForConversion+0x15e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	e000      	b.n	80029bc <HAL_ADC_PollForConversion+0x160>
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_ADC_PollForConversion+0x19c>)
 80029bc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d104      	bne.n	80029d4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2208      	movs	r2, #8
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e008      	b.n	80029e6 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	50040300 	.word	0x50040300
 80029f4:	50040100 	.word	0x50040100
 80029f8:	50040000 	.word	0x50040000

080029fc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a04:	4893      	ldr	r0, [pc, #588]	; (8002c54 <HAL_ADC_Start_IT+0x258>)
 8002a06:	f7ff fc4f 	bl	80022a8 <LL_ADC_GetMultimode>
 8002a0a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fcee 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 8112 	bne.w	8002c42 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_Start_IT+0x30>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e10f      	b.n	8002c4c <HAL_ADC_Start_IT+0x250>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 feb3 	bl	80037a0 <ADC_Enable>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f040 80f9 	bne.w	8002c38 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_ADC_Start_IT+0x25c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d002      	beq.n	8002a6a <HAL_ADC_Start_IT+0x6e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	e000      	b.n	8002a6c <HAL_ADC_Start_IT+0x70>
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <HAL_ADC_Start_IT+0x260>)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d002      	beq.n	8002a7a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	f023 0206 	bic.w	r2, r3, #6
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a9e:	e002      	b.n	8002aa6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	221c      	movs	r2, #28
 8002aac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 021c 	bic.w	r2, r2, #28
 8002ac4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d108      	bne.n	8002ae0 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0208 	orr.w	r2, r2, #8
 8002adc:	605a      	str	r2, [r3, #4]
          break;
 8002ade:	e008      	b.n	8002af2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0204 	orr.w	r2, r2, #4
 8002aee:	605a      	str	r2, [r3, #4]
          break;
 8002af0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0210 	orr.w	r2, r2, #16
 8002b08:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_ADC_Start_IT+0x25c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_Start_IT+0x11e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	e000      	b.n	8002b1c <HAL_ADC_Start_IT+0x120>
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_ADC_Start_IT+0x260>)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d008      	beq.n	8002b36 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d002      	beq.n	8002b36 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	d13b      	bne.n	8002bae <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02d      	beq.n	8002ba0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d110      	bne.n	8002b7e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0220 	bic.w	r2, r2, #32
 8002b6a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7a:	605a      	str	r2, [r3, #4]
              break;
 8002b7c:	e011      	b.n	8002ba2 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0220 	orr.w	r2, r2, #32
 8002b9c:	605a      	str	r2, [r3, #4]
              break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002ba0:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fc0f 	bl	80023ca <LL_ADC_REG_StartConversion>
 8002bac:	e04d      	b.n	8002c4a <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <HAL_ADC_Start_IT+0x25c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d002      	beq.n	8002bca <HAL_ADC_Start_IT+0x1ce>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_ADC_Start_IT+0x1d0>
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_ADC_Start_IT+0x260>)
 8002bcc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d036      	beq.n	8002c48 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002be2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d110      	bne.n	8002c14 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0220 	bic.w	r2, r2, #32
 8002c00:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c10:	605a      	str	r2, [r3, #4]
              break;
 8002c12:	e01a      	b.n	8002c4a <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c22:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0220 	orr.w	r2, r2, #32
 8002c32:	605a      	str	r2, [r3, #4]
              break;
 8002c34:	bf00      	nop
 8002c36:	e008      	b.n	8002c4a <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	75fb      	strb	r3, [r7, #23]
 8002c46:	e000      	b.n	8002c4a <HAL_ADC_Start_IT+0x24e>
        }
 8002c48:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	50040300 	.word	0x50040300
 8002c58:	50040100 	.word	0x50040100
 8002c5c:	50040000 	.word	0x50040000

08002c60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c98:	4882      	ldr	r0, [pc, #520]	; (8002ea4 <HAL_ADC_IRQHandler+0x228>)
 8002c9a:	f7ff fb05 	bl	80022a8 <LL_ADC_GetMultimode>
 8002c9e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <HAL_ADC_IRQHandler+0x5e>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d012      	beq.n	8002cda <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fe0f 	bl	80038f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_IRQHandler+0x72>
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8083 	beq.w	8002e00 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d07d      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fa25 	bl	8002170 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d062      	beq.n	8002df2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5d      	ldr	r2, [pc, #372]	; (8002ea8 <HAL_ADC_IRQHandler+0x22c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d002      	beq.n	8002d3c <HAL_ADC_IRQHandler+0xc0>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e000      	b.n	8002d3e <HAL_ADC_IRQHandler+0xc2>
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_ADC_IRQHandler+0x230>)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d008      	beq.n	8002d58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d002      	beq.n	8002d58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d104      	bne.n	8002d62 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	e00c      	b.n	8002d7c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a50      	ldr	r2, [pc, #320]	; (8002ea8 <HAL_ADC_IRQHandler+0x22c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d002      	beq.n	8002d72 <HAL_ADC_IRQHandler+0xf6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_IRQHandler+0xf8>
 8002d72:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <HAL_ADC_IRQHandler+0x230>)
 8002d74:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d135      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d12e      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb2a 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11a      	bne.n	8002dda <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 020c 	bic.w	r2, r2, #12
 8002db2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d112      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
 8002dd8:	e00b      	b.n	8002df2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f9e4 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	220c      	movs	r2, #12
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x198>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 809f 	beq.w	8002f5e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8099 	beq.w	8002f5e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f9cd 	bl	80021e8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e4e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f98b 	bl	8002170 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_ADC_IRQHandler+0x22c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d002      	beq.n	8002e6c <HAL_ADC_IRQHandler+0x1f0>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_IRQHandler+0x1f2>
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_ADC_IRQHandler+0x230>)
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d008      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d002      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b07      	cmp	r3, #7
 8002e86:	d104      	bne.n	8002e92 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	623b      	str	r3, [r7, #32]
 8002e90:	e013      	b.n	8002eba <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <HAL_ADC_IRQHandler+0x22c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x234>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	e007      	b.n	8002eb2 <HAL_ADC_IRQHandler+0x236>
 8002ea2:	bf00      	nop
 8002ea4:	50040300 	.word	0x50040300
 8002ea8:	50040100 	.word	0x50040100
 8002eac:	50040000 	.word	0x50040000
 8002eb0:	4b7d      	ldr	r3, [pc, #500]	; (80030a8 <HAL_ADC_IRQHandler+0x42c>)
 8002eb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d142      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d03f      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13a      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d133      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d12e      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fa8e 	bl	8002418 <LL_ADC_INJ_IsConversionOngoing>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11a      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f10:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d112      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
 8002f36:	e00b      	b.n	8002f50 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fca5 	bl	80038a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2260      	movs	r2, #96	; 0x60
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x310>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f896 	bl	80030b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x340>
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fc8b 	bl	80038c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_ADC_IRQHandler+0x370>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fc7d 	bl	80038dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d036      	beq.n	8003064 <HAL_ADC_IRQHandler+0x3e8>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d031      	beq.n	8003064 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	e014      	b.n	8003038 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003014:	4825      	ldr	r0, [pc, #148]	; (80030ac <HAL_ADC_IRQHandler+0x430>)
 8003016:	f7ff f955 	bl	80022c4 <LL_ADC_GetMultiDMATransfer>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
 8003024:	e008      	b.n	8003038 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003034:	2301      	movs	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10e      	bne.n	800305c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f043 0202 	orr.w	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f834 	bl	80030c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <HAL_ADC_IRQHandler+0x424>
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f043 0208 	orr.w	r2, r3, #8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003098:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fc0a 	bl	80038b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80030a0:	bf00      	nop
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	50040000 	.word	0x50040000
 80030ac:	50040300 	.word	0x50040300

080030b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0a6      	sub	sp, #152	; 0x98
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x22>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e348      	b.n	800378c <HAL_ADC_ConfigChannel+0x6b4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f973 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 8329 	bne.w	8003766 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b05      	cmp	r3, #5
 800311a:	d824      	bhi.n	8003166 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	3b02      	subs	r3, #2
 8003122:	2b03      	cmp	r3, #3
 8003124:	d81b      	bhi.n	800315e <HAL_ADC_ConfigChannel+0x86>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_ADC_ConfigChannel+0x54>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003145 	.word	0x08003145
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003155 	.word	0x08003155
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	220c      	movs	r2, #12
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e011      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2212      	movs	r2, #18
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e00d      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2218      	movs	r2, #24
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e009      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	e004      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2206      	movs	r2, #6
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e000      	b.n	8003168 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003166:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	f7ff f80e 	bl	8002196 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f937 	bl	80023f2 <LL_ADC_REG_IsConversionOngoing>
 8003184:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f943 	bl	8002418 <LL_ADC_INJ_IsConversionOngoing>
 8003192:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8148 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 8143 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7ff f829 	bl	800220e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00a      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ee:	f7fe ff71 	bl	80020d4 <LL_ADC_SetOffset>
 80031f2:	e11d      	b.n	8003430 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe ff8c 	bl	8002118 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x148>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe ff81 	bl	8002118 <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 021f 	and.w	r2, r3, #31
 800321e:	e012      	b.n	8003246 <HAL_ADC_ConfigChannel+0x16e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe ff76 	bl	8002118 <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_ADC_ConfigChannel+0x186>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	e00a      	b.n	8003274 <HAL_ADC_ConfigChannel+0x19c>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800326c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	429a      	cmp	r2, r3
 8003276:	d106      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe ff5d 	bl	8002140 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe ff43 	bl	8002118 <LL_ADC_GetOffsetChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x1da>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ff38 	bl	8002118 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	e010      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x1fc>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe ff2d 	bl	8002118 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x214>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	e00a      	b.n	8003302 <HAL_ADC_ConfigChannel+0x22a>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	429a      	cmp	r2, r3
 8003304:	d106      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff16 	bl	8002140 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fefc 	bl	8002118 <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x268>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe fef1 	bl	8002118 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	e010      	b.n	8003362 <HAL_ADC_ConfigChannel+0x28a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fee6 	bl	8002118 <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_ADC_ConfigChannel+0x2a2>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	e00a      	b.n	8003390 <HAL_ADC_ConfigChannel+0x2b8>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	429a      	cmp	r2, r3
 8003392:	d106      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fecf 	bl	8002140 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2103      	movs	r1, #3
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe feb5 	bl	8002118 <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x2f6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2103      	movs	r1, #3
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe feaa 	bl	8002118 <LL_ADC_GetOffsetChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	0e9b      	lsrs	r3, r3, #26
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	e010      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x318>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2103      	movs	r1, #3
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fe9f 	bl	8002118 <LL_ADC_GetOffsetChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x330>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	e00a      	b.n	800341e <HAL_ADC_ConfigChannel+0x346>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	429a      	cmp	r2, r3
 8003420:	d106      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	2103      	movs	r1, #3
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fe88 	bl	8002140 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe ffb5 	bl	80023a4 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 810c 	bne.w	800365a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	461a      	mov	r2, r3
 8003450:	f7fe ff06 	bl	8002260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4aad      	ldr	r2, [pc, #692]	; (8003710 <HAL_ADC_ConfigChannel+0x638>)
 800345a:	4293      	cmp	r3, r2
 800345c:	f040 80fd 	bne.w	800365a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x3b0>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2b09      	cmp	r3, #9
 800347e:	bf94      	ite	ls
 8003480:	2301      	movls	r3, #1
 8003482:	2300      	movhi	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e012      	b.n	80034ae <HAL_ADC_ConfigChannel+0x3d6>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2b09      	cmp	r3, #9
 80034a6:	bf94      	ite	ls
 80034a8:	2301      	movls	r3, #1
 80034aa:	2300      	movhi	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d064      	beq.n	800357c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x3f6>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	0e9b      	lsrs	r3, r3, #26
 80034c4:	3301      	adds	r3, #1
 80034c6:	069b      	lsls	r3, r3, #26
 80034c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034cc:	e00e      	b.n	80034ec <HAL_ADC_ConfigChannel+0x414>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	069b      	lsls	r3, r3, #26
 80034e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_ADC_ConfigChannel+0x434>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	e010      	b.n	800352e <HAL_ADC_ConfigChannel+0x456>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	ea42 0103 	orr.w	r1, r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x47c>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	3301      	adds	r3, #1
 8003546:	f003 021f 	and.w	r2, r3, #31
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	051b      	lsls	r3, r3, #20
 8003552:	e011      	b.n	8003578 <HAL_ADC_ConfigChannel+0x4a0>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003578:	430b      	orrs	r3, r1
 800357a:	e069      	b.n	8003650 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x4c0>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	3301      	adds	r3, #1
 8003590:	069b      	lsls	r3, r3, #26
 8003592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003596:	e00e      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x4de>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	61fb      	str	r3, [r7, #28]
  return result;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x4fe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	0e9b      	lsrs	r3, r3, #26
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	e010      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x520>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	617b      	str	r3, [r7, #20]
  return result;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	ea42 0103 	orr.w	r1, r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x54c>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	3301      	adds	r3, #1
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	3b1e      	subs	r3, #30
 800361c:	051b      	lsls	r3, r3, #20
 800361e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003622:	e014      	b.n	800364e <HAL_ADC_ConfigChannel+0x576>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	60fb      	str	r3, [r7, #12]
  return result;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	3b1e      	subs	r3, #30
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364e:	430b      	orrs	r3, r1
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	4619      	mov	r1, r3
 8003656:	f7fe fdda 	bl	800220e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <HAL_ADC_ConfigChannel+0x63c>)
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 808c 	beq.w	8003780 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003668:	482b      	ldr	r0, [pc, #172]	; (8003718 <HAL_ADC_ConfigChannel+0x640>)
 800366a:	f7fe fd25 	bl	80020b8 <LL_ADC_GetCommonPathInternalCh>
 800366e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <HAL_ADC_ConfigChannel+0x644>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d12b      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x5fc>
 800367c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d125      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_ADC_ConfigChannel+0x648>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_ADC_ConfigChannel+0x5c4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a23      	ldr	r2, [pc, #140]	; (8003724 <HAL_ADC_ConfigChannel+0x64c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d16e      	bne.n	800377a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036a4:	4619      	mov	r1, r3
 80036a6:	481c      	ldr	r0, [pc, #112]	; (8003718 <HAL_ADC_ConfigChannel+0x640>)
 80036a8:	f7fe fcf3 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <HAL_ADC_ConfigChannel+0x650>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_ADC_ConfigChannel+0x654>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	099a      	lsrs	r2, r3, #6
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036c4:	e002      	b.n	80036cc <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f9      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d2:	e052      	b.n	800377a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_ADC_ConfigChannel+0x658>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d12a      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x65c>
 80036de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d124      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <HAL_ADC_ConfigChannel+0x648>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_ADC_ConfigChannel+0x626>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <HAL_ADC_ConfigChannel+0x64c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d13f      	bne.n	800377e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	4619      	mov	r1, r3
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <HAL_ADC_ConfigChannel+0x640>)
 800370a:	f7fe fcc2 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800370e:	e036      	b.n	800377e <HAL_ADC_ConfigChannel+0x6a6>
 8003710:	407f0000 	.word	0x407f0000
 8003714:	80080000 	.word	0x80080000
 8003718:	50040300 	.word	0x50040300
 800371c:	c7520000 	.word	0xc7520000
 8003720:	50040000 	.word	0x50040000
 8003724:	50040200 	.word	0x50040200
 8003728:	2000000c 	.word	0x2000000c
 800372c:	053e2d63 	.word	0x053e2d63
 8003730:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a16      	ldr	r2, [pc, #88]	; (8003794 <HAL_ADC_ConfigChannel+0x6bc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d120      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800373e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11a      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_ADC_ConfigChannel+0x6c0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d115      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800375c:	4619      	mov	r1, r3
 800375e:	480f      	ldr	r0, [pc, #60]	; (800379c <HAL_ADC_ConfigChannel+0x6c4>)
 8003760:	f7fe fc97 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
 8003764:	e00c      	b.n	8003780 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003778:	e002      	b.n	8003780 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800377e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003788:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800378c:	4618      	mov	r0, r3
 800378e:	3798      	adds	r7, #152	; 0x98
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	80000001 	.word	0x80000001
 8003798:	50040000 	.word	0x50040000
 800379c:	50040300 	.word	0x50040300

080037a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fdf9 	bl	80023a4 <LL_ADC_IsEnabled>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d146      	bne.n	8003846 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <ADC_Enable+0xb0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e032      	b.n	8003848 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fdc8 	bl	800237c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037ec:	f7fe fc10 	bl	8002010 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037f2:	e021      	b.n	8003838 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fdd3 	bl	80023a4 <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fdb7 	bl	800237c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800380e:	f7fe fbff 	bl	8002010 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d90d      	bls.n	8003838 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0210 	orr.w	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d1d6      	bne.n	80037f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	8000003f 	.word	0x8000003f

08003854 <LL_ADC_IsEnabled>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <LL_ADC_IsEnabled+0x18>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <LL_ADC_IsEnabled+0x1a>
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_ADC_REG_IsConversionOngoing>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d101      	bne.n	8003892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b09f      	sub	sp, #124	; 0x7c
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e08f      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d102      	bne.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003934:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	e001      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e072      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff8b 	bl	800387a <LL_ADC_REG_IsConversionOngoing>
 8003964:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff85 	bl	800387a <LL_ADC_REG_IsConversionOngoing>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d154      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003978:	2b00      	cmp	r3, #0
 800397a:	d151      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800397c:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800397e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02c      	beq.n	80039e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800399a:	035b      	lsls	r3, r3, #13
 800399c:	430b      	orrs	r3, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039a4:	4829      	ldr	r0, [pc, #164]	; (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80039a6:	f7ff ff55 	bl	8003854 <LL_ADC_IsEnabled>
 80039aa:	4604      	mov	r4, r0
 80039ac:	4828      	ldr	r0, [pc, #160]	; (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80039ae:	f7ff ff51 	bl	8003854 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	431c      	orrs	r4, r3
 80039b6:	4828      	ldr	r0, [pc, #160]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039b8:	f7ff ff4c 	bl	8003854 <LL_ADC_IsEnabled>
 80039bc:	4603      	mov	r3, r0
 80039be:	4323      	orrs	r3, r4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d137      	bne.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039cc:	f023 030f 	bic.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	430a      	orrs	r2, r1
 80039da:	431a      	orrs	r2, r3
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039e0:	e028      	b.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ee:	4817      	ldr	r0, [pc, #92]	; (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80039f0:	f7ff ff30 	bl	8003854 <LL_ADC_IsEnabled>
 80039f4:	4604      	mov	r4, r0
 80039f6:	4816      	ldr	r0, [pc, #88]	; (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80039f8:	f7ff ff2c 	bl	8003854 <LL_ADC_IsEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	431c      	orrs	r4, r3
 8003a00:	4815      	ldr	r0, [pc, #84]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a02:	f7ff ff27 	bl	8003854 <LL_ADC_IsEnabled>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4323      	orrs	r3, r4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d112      	bne.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a16:	f023 030f 	bic.w	r3, r3, #15
 8003a1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a1e:	e009      	b.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a32:	e000      	b.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	377c      	adds	r7, #124	; 0x7c
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	50040000 	.word	0x50040000
 8003a50:	50040100 	.word	0x50040100
 8003a54:	50040300 	.word	0x50040300
 8003a58:	50040200 	.word	0x50040200

08003a5c <__NVIC_SetPriorityGrouping>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8e:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	60d3      	str	r3, [r2, #12]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_GetPriorityGrouping>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <__NVIC_GetPriorityGrouping+0x18>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0307 	and.w	r3, r3, #7
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_EnableIRQ>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db0b      	blt.n	8003aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	4907      	ldr	r1, [pc, #28]	; (8003af8 <__NVIC_EnableIRQ+0x38>)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000e100 	.word	0xe000e100

08003afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	db0a      	blt.n	8003b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	490c      	ldr	r1, [pc, #48]	; (8003b48 <__NVIC_SetPriority+0x4c>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b24:	e00a      	b.n	8003b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4908      	ldr	r1, [pc, #32]	; (8003b4c <__NVIC_SetPriority+0x50>)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3b04      	subs	r3, #4
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	440b      	add	r3, r1
 8003b3a:	761a      	strb	r2, [r3, #24]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000e100 	.word	0xe000e100
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f1c3 0307 	rsb	r3, r3, #7
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	bf28      	it	cs
 8003b6e:	2304      	movcs	r3, #4
 8003b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d902      	bls.n	8003b80 <NVIC_EncodePriority+0x30>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3b03      	subs	r3, #3
 8003b7e:	e000      	b.n	8003b82 <NVIC_EncodePriority+0x32>
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	401a      	ands	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b98:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43d9      	mvns	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	4313      	orrs	r3, r2
         );
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc8:	d301      	bcc.n	8003bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00f      	b.n	8003bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <SysTick_Config+0x40>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	f7ff ff8e 	bl	8003afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <SysTick_Config+0x40>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <SysTick_Config+0x40>)
 8003be8:	2207      	movs	r2, #7
 8003bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	e000e010 	.word	0xe000e010

08003bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff29 	bl	8003a5c <__NVIC_SetPriorityGrouping>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c24:	f7ff ff3e 	bl	8003aa4 <__NVIC_GetPriorityGrouping>
 8003c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	6978      	ldr	r0, [r7, #20]
 8003c30:	f7ff ff8e 	bl	8003b50 <NVIC_EncodePriority>
 8003c34:	4602      	mov	r2, r0
 8003c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff5d 	bl	8003afc <__NVIC_SetPriority>
}
 8003c42:	bf00      	nop
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff31 	bl	8003ac0 <__NVIC_EnableIRQ>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffa2 	bl	8003bb8 <SysTick_Config>
 8003c74:	4603      	mov	r3, r0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d005      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e029      	b.n	8003cf6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020e 	bic.w	r2, r2, #14
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f003 021c 	and.w	r2, r3, #28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
    }
  }
  return status;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0e:	e17f      	b.n	8004010 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8171 	beq.w	800400a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d00b      	beq.n	8003d48 <HAL_GPIO_Init+0x48>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d007      	beq.n	8003d48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d3c:	2b11      	cmp	r3, #17
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b12      	cmp	r3, #18
 8003d46:	d130      	bne.n	8003daa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d7e:	2201      	movs	r2, #1
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0201 	and.w	r2, r3, #1
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d118      	bne.n	8003de8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f003 0201 	and.w	r2, r3, #1
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x128>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b12      	cmp	r3, #18
 8003e26:	d123      	bne.n	8003e70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0203 	and.w	r2, r3, #3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80ac 	beq.w	800400a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	4b5e      	ldr	r3, [pc, #376]	; (800402c <HAL_GPIO_Init+0x32c>)
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	4a5d      	ldr	r2, [pc, #372]	; (800402c <HAL_GPIO_Init+0x32c>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8003ebe:	4b5b      	ldr	r3, [pc, #364]	; (800402c <HAL_GPIO_Init+0x32c>)
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003eca:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_GPIO_Init+0x330>)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ef4:	d025      	beq.n	8003f42 <HAL_GPIO_Init+0x242>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4e      	ldr	r2, [pc, #312]	; (8004034 <HAL_GPIO_Init+0x334>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01f      	beq.n	8003f3e <HAL_GPIO_Init+0x23e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_GPIO_Init+0x338>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d019      	beq.n	8003f3a <HAL_GPIO_Init+0x23a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4c      	ldr	r2, [pc, #304]	; (800403c <HAL_GPIO_Init+0x33c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_GPIO_Init+0x236>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <HAL_GPIO_Init+0x340>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00d      	beq.n	8003f32 <HAL_GPIO_Init+0x232>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_GPIO_Init+0x344>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <HAL_GPIO_Init+0x22e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a49      	ldr	r2, [pc, #292]	; (8004048 <HAL_GPIO_Init+0x348>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_GPIO_Init+0x22a>
 8003f26:	2306      	movs	r3, #6
 8003f28:	e00c      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f2a:	2307      	movs	r3, #7
 8003f2c:	e00a      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f2e:	2305      	movs	r3, #5
 8003f30:	e008      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f32:	2304      	movs	r3, #4
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e004      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e002      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_GPIO_Init+0x244>
 8003f42:	2300      	movs	r3, #0
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	f002 0203 	and.w	r2, r2, #3
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f54:	4936      	ldr	r1, [pc, #216]	; (8004030 <HAL_GPIO_Init+0x330>)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f62:	4b3a      	ldr	r3, [pc, #232]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f86:	4a31      	ldr	r2, [pc, #196]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003f8c:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fda:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004004:	4a11      	ldr	r2, [pc, #68]	; (800404c <HAL_GPIO_Init+0x34c>)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f47f ae78 	bne.w	8003d10 <HAL_GPIO_Init+0x10>
  }
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40021000 	.word	0x40021000
 8004030:	40010000 	.word	0x40010000
 8004034:	48000400 	.word	0x48000400
 8004038:	48000800 	.word	0x48000800
 800403c:	48000c00 	.word	0x48000c00
 8004040:	48001000 	.word	0x48001000
 8004044:	48001400 	.word	0x48001400
 8004048:	48001800 	.word	0x48001800
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800406c:	e002      	b.n	8004074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800409e:	e002      	b.n	80040a6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040a0:	887a      	ldrh	r2, [r7, #2]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <HAL_PWREx_GetVoltageRange+0x18>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040de:	d130      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ec:	d038      	beq.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2232      	movs	r2, #50	; 0x32
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0c9b      	lsrs	r3, r3, #18
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004114:	e002      	b.n	800411c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b01      	subs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004128:	d102      	bne.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f2      	bne.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d110      	bne.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e00f      	b.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d007      	beq.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004158:	4a05      	ldr	r2, [pc, #20]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40007000 	.word	0x40007000
 8004174:	2000000c 	.word	0x2000000c
 8004178:	431bde83 	.word	0x431bde83

0800417c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e3d4      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418e:	4ba1      	ldr	r3, [pc, #644]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004198:	4b9e      	ldr	r3, [pc, #632]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80e4 	beq.w	8004378 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_RCC_OscConfig+0x4a>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	f040 808b 	bne.w	80042d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 8087 	bne.w	80042d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041c6:	4b93      	ldr	r3, [pc, #588]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_RCC_OscConfig+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e3ac      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_RCC_OscConfig+0x7c>
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f6:	e005      	b.n	8004204 <HAL_RCC_OscConfig+0x88>
 80041f8:	4b86      	ldr	r3, [pc, #536]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004204:	4293      	cmp	r3, r2
 8004206:	d223      	bcs.n	8004250 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd3f 	bl	8004c90 <RCC_SetFlashLatencyFromMSIRange>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e38d      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421c:	4b7d      	ldr	r3, [pc, #500]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004222:	f043 0308 	orr.w	r3, r3, #8
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	4977      	ldr	r1, [pc, #476]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	4972      	ldr	r1, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
 800424e:	e025      	b.n	800429c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004250:	4b70      	ldr	r3, [pc, #448]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6f      	ldr	r2, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004256:	f043 0308 	orr.w	r3, r3, #8
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b6d      	ldr	r3, [pc, #436]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	496a      	ldr	r1, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426e:	4b69      	ldr	r3, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	4965      	ldr	r1, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fcff 	bl	8004c90 <RCC_SetFlashLatencyFromMSIRange>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e34d      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429c:	f000 fc36 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80042a0:	4601      	mov	r1, r0
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <HAL_RCC_OscConfig+0x29c>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa21 f303 	lsr.w	r3, r1, r3
 80042b8:	4a58      	ldr	r2, [pc, #352]	; (800441c <HAL_RCC_OscConfig+0x2a0>)
 80042ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_RCC_OscConfig+0x2a4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd fe59 	bl	8001f78 <HAL_InitTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d052      	beq.n	8004376 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	e331      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d032      	beq.n	8004342 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042dc:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a4c      	ldr	r2, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e8:	f7fd fe92 	bl	8002010 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042f0:	f7fd fe8e 	bl	8002010 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e31a      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004302:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800430e:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a40      	ldr	r2, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	493b      	ldr	r1, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004328:	4313      	orrs	r3, r2
 800432a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800432c:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	4936      	ldr	r1, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
 8004340:	e01a      	b.n	8004378 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004342:	4b34      	ldr	r3, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a33      	ldr	r2, [pc, #204]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800434e:	f7fd fe5f 	bl	8002010 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004356:	f7fd fe5b 	bl	8002010 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e2e7      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004368:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x1da>
 8004374:	e000      	b.n	8004378 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d074      	beq.n	800446e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x21a>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d10e      	bne.n	80043ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d10b      	bne.n	80043ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d064      	beq.n	800446c <HAL_RCC_OscConfig+0x2f0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d160      	bne.n	800446c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e2c4      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x24a>
 80043b8:	4b16      	ldr	r3, [pc, #88]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e01d      	b.n	8004402 <HAL_RCC_OscConfig+0x286>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ce:	d10c      	bne.n	80043ea <HAL_RCC_OscConfig+0x26e>
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e00b      	b.n	8004402 <HAL_RCC_OscConfig+0x286>
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <HAL_RCC_OscConfig+0x298>)
 80043fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004400:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01c      	beq.n	8004444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd fe01 	bl	8002010 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004410:	e011      	b.n	8004436 <HAL_RCC_OscConfig+0x2ba>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	0800917c 	.word	0x0800917c
 800441c:	2000000c 	.word	0x2000000c
 8004420:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fd fdf4 	bl	8002010 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e280      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004436:	4baf      	ldr	r3, [pc, #700]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x2a8>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd fde4 	bl	8002010 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fd fde0 	bl	8002010 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	; 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e26c      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445e:	4ba5      	ldr	r3, [pc, #660]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x2d0>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d060      	beq.n	800453c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x310>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d119      	bne.n	80044ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d116      	bne.n	80044ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448c:	4b99      	ldr	r3, [pc, #612]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_OscConfig+0x328>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e249      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b93      	ldr	r3, [pc, #588]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	4990      	ldr	r1, [pc, #576]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b8:	e040      	b.n	800453c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d023      	beq.n	800450a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c2:	4b8c      	ldr	r3, [pc, #560]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a8b      	ldr	r2, [pc, #556]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fd fd9f 	bl	8002010 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fd fd9b 	bl	8002010 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e227      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e8:	4b82      	ldr	r3, [pc, #520]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b7f      	ldr	r3, [pc, #508]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	497c      	ldr	r1, [pc, #496]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	e018      	b.n	800453c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a79      	ldr	r2, [pc, #484]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fd fd7b 	bl	8002010 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fd fd77 	bl	8002010 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e203      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004530:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d03c      	beq.n	80045c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01c      	beq.n	800458a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004550:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004556:	4a67      	ldr	r2, [pc, #412]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fd fd56 	bl	8002010 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004568:	f7fd fd52 	bl	8002010 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1de      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800457a:	4b5e      	ldr	r3, [pc, #376]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ef      	beq.n	8004568 <HAL_RCC_OscConfig+0x3ec>
 8004588:	e01b      	b.n	80045c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458a:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fd fd39 	bl	8002010 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fd fd35 	bl	8002010 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e1c1      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b4:	4b4f      	ldr	r3, [pc, #316]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80045b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ef      	bne.n	80045a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a6 	beq.w	800471c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045d4:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b44      	ldr	r3, [pc, #272]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	4a43      	ldr	r2, [pc, #268]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	; 0x58
 80045ec:	4b41      	ldr	r3, [pc, #260]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_RCC_OscConfig+0x57c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d118      	bne.n	800463a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCC_OscConfig+0x57c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0x57c>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004614:	f7fd fcfc 	bl	8002010 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461c:	f7fd fcf8 	bl	8002010 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e184      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <HAL_RCC_OscConfig+0x57c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d108      	bne.n	8004654 <HAL_RCC_OscConfig+0x4d8>
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004652:	e024      	b.n	800469e <HAL_RCC_OscConfig+0x522>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d110      	bne.n	800467e <HAL_RCC_OscConfig+0x502>
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466c:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800467c:	e00f      	b.n	800469e <HAL_RCC_OscConfig+0x522>
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800468e:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 8004696:	f023 0304 	bic.w	r3, r3, #4
 800469a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fd fcb3 	bl	8002010 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fd fcaf 	bl	8002010 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e139      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_OscConfig+0x578>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ed      	beq.n	80046ae <HAL_RCC_OscConfig+0x532>
 80046d2:	e01a      	b.n	800470a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd fc9c 	bl	8002010 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046da:	e00f      	b.n	80046fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fd fc98 	bl	8002010 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d906      	bls.n	80046fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e122      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046fc:	4b90      	ldr	r3, [pc, #576]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e8      	bne.n	80046dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470a:	7ffb      	ldrb	r3, [r7, #31]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b8b      	ldr	r3, [pc, #556]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	4a8a      	ldr	r2, [pc, #552]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8108 	beq.w	8004936 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b02      	cmp	r3, #2
 800472c:	f040 80d0 	bne.w	80048d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004730:	4b83      	ldr	r3, [pc, #524]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0203 	and.w	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d130      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	3b01      	subs	r3, #1
 8004750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d127      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11f      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004770:	2a07      	cmp	r2, #7
 8004772:	bf14      	ite	ne
 8004774:	2201      	movne	r2, #1
 8004776:	2200      	moveq	r2, #0
 8004778:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800477a:	4293      	cmp	r3, r2
 800477c:	d113      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d06e      	beq.n	8004884 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d069      	beq.n	8004880 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ac:	4b64      	ldr	r3, [pc, #400]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047b8:	4b61      	ldr	r3, [pc, #388]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b7      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5c      	ldr	r2, [pc, #368]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047d4:	f7fd fc1c 	bl	8002010 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd fc18 	bl	8002010 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0a4      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fa:	4b51      	ldr	r3, [pc, #324]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	4b51      	ldr	r3, [pc, #324]	; (8004944 <HAL_RCC_OscConfig+0x7c8>)
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800480a:	3a01      	subs	r2, #1
 800480c:	0112      	lsls	r2, r2, #4
 800480e:	4311      	orrs	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004814:	0212      	lsls	r2, r2, #8
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0552      	lsls	r2, r2, #21
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004828:	0852      	lsrs	r2, r2, #1
 800482a:	3a01      	subs	r2, #1
 800482c:	0652      	lsls	r2, r2, #25
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004834:	0912      	lsrs	r2, r2, #4
 8004836:	0452      	lsls	r2, r2, #17
 8004838:	430a      	orrs	r2, r1
 800483a:	4941      	ldr	r1, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 800483c:	4313      	orrs	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004840:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a3e      	ldr	r2, [pc, #248]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a3b      	ldr	r2, [pc, #236]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004858:	f7fd fbda 	bl	8002010 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fd fbd6 	bl	8002010 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e062      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	e05a      	b.n	8004936 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e059      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d152      	bne.n	8004936 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a27      	ldr	r2, [pc, #156]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048a8:	f7fd fbb2 	bl	8002010 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd fbae 	bl	8002010 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e03a      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x734>
 80048ce:	e032      	b.n	8004936 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d02d      	beq.n	8004932 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a19      	ldr	r2, [pc, #100]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4a13      	ldr	r2, [pc, #76]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048f4:	f023 0303 	bic.w	r3, r3, #3
 80048f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4a10      	ldr	r2, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004900:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004908:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fd fb81 	bl	8002010 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004912:	f7fd fb7d 	bl	8002010 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e009      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCC_OscConfig+0x7c4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x796>
 8004930:	e001      	b.n	8004936 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	f99d808c 	.word	0xf99d808c

08004948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0c8      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800495c:	4b66      	ldr	r3, [pc, #408]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d910      	bls.n	800498c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	4961      	ldr	r1, [pc, #388]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b0      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d04c      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a0:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e09e      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d115      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e092      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d0:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e086      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e07e      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049f0:	4b42      	ldr	r3, [pc, #264]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 0203 	bic.w	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	493f      	ldr	r1, [pc, #252]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a02:	f7fd fb05 	bl	8002010 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0a:	f7fd fb01 	bl	8002010 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e066      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 020c 	and.w	r2, r3, #12
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d1eb      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3e:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	492c      	ldr	r1, [pc, #176]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d210      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	4924      	ldr	r1, [pc, #144]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e036      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4918      	ldr	r1, [pc, #96]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4910      	ldr	r1, [pc, #64]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004abe:	f000 f825 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	fa21 f303 	lsr.w	r3, r1, r3
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd fa48 	bl	8001f78 <HAL_InitTick>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	72fb      	strb	r3, [r7, #11]

  return status;
 8004aec:	7afb      	ldrb	r3, [r7, #11]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40021000 	.word	0x40021000
 8004b00:	0800917c 	.word	0x0800917c
 8004b04:	2000000c 	.word	0x2000000c
 8004b08:	20000010 	.word	0x20000010

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b24:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x34>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d121      	bne.n	8004b7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d11e      	bne.n	8004b7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b40:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b4c:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	e005      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d102      	bne.n	8004b8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e004      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b90:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d133      	bne.n	8004c02 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004bae:	e005      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bb2:	617b      	str	r3, [r7, #20]
      break;
 8004bb4:	e005      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bb6:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bb8:	617b      	str	r3, [r7, #20]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	617b      	str	r3, [r7, #20]
      break;
 8004bc0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	3301      	adds	r3, #1
 8004bce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	fb02 f203 	mul.w	r2, r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0e5b      	lsrs	r3, r3, #25
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c02:	69bb      	ldr	r3, [r7, #24]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3724      	adds	r7, #36	; 0x24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40021000 	.word	0x40021000
 8004c14:	08009194 	.word	0x08009194
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	007a1200 	.word	0x007a1200

08004c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c

08004c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c3c:	f7ff fff0 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c40:	4601      	mov	r1, r0
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800918c 	.word	0x0800918c

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c68:	f7ff ffda 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0adb      	lsrs	r3, r3, #11
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4a04      	ldr	r2, [pc, #16]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800918c 	.word	0x0800918c

08004c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ca8:	f7ff fa04 	bl	80040b4 <HAL_PWREx_GetVoltageRange>
 8004cac:	6178      	str	r0, [r7, #20]
 8004cae:	e014      	b.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	4a24      	ldr	r2, [pc, #144]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cba:	6593      	str	r3, [r2, #88]	; 0x58
 8004cbc:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cc8:	f7ff f9f4 	bl	80040b4 <HAL_PWREx_GetVoltageRange>
 8004ccc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce0:	d10b      	bne.n	8004cfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b80      	cmp	r3, #128	; 0x80
 8004ce6:	d919      	bls.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2ba0      	cmp	r3, #160	; 0xa0
 8004cec:	d902      	bls.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cee:	2302      	movs	r3, #2
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	e013      	b.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	e010      	b.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d902      	bls.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d00:	2303      	movs	r3, #3
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e00a      	b.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d102      	bne.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e004      	b.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b70      	cmp	r3, #112	; 0x70
 8004d16:	d101      	bne.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d18:	2301      	movs	r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 0207 	bic.w	r2, r3, #7
 8004d24:	4909      	ldr	r1, [pc, #36]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40022000 	.word	0x40022000

08004d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d58:	2300      	movs	r3, #0
 8004d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03f      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d74:	d01c      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d802      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d80:	e01f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d86:	d003      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004d88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d8c:	d01c      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d8e:	e018      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d90:	4b85      	ldr	r3, [pc, #532]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a84      	ldr	r2, [pc, #528]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d9c:	e015      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fab9 	bl	800531c <RCCEx_PLLSAI1_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dae:	e00c      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3320      	adds	r3, #32
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fba0 	bl	80054fc <RCCEx_PLLSAI2_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dc0:	e003      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	74fb      	strb	r3, [r7, #19]
      break;
 8004dc6:	e000      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dd0:	4b75      	ldr	r3, [pc, #468]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dde:	4972      	ldr	r1, [pc, #456]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004de6:	e001      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d03f      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e00:	d01c      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e06:	d802      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004e0c:	e01f      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e12:	d003      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004e14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e18:	d01c      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004e1a:	e018      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e1c:	4b62      	ldr	r3, [pc, #392]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a61      	ldr	r2, [pc, #388]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e28:	e015      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fa73 	bl	800531c <RCCEx_PLLSAI1_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e3a:	e00c      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3320      	adds	r3, #32
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fb5a 	bl	80054fc <RCCEx_PLLSAI2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	74fb      	strb	r3, [r7, #19]
      break;
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e5c:	4b52      	ldr	r3, [pc, #328]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6a:	494f      	ldr	r1, [pc, #316]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e72:	e001      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a0 	beq.w	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b41      	ldr	r3, [pc, #260]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	4a40      	ldr	r2, [pc, #256]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a3a      	ldr	r2, [pc, #232]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ec8:	f7fd f8a2 	bl	8002010 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ece:	e009      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed0:	f7fd f89e 	bl	8002010 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d902      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ee4:	4b31      	ldr	r3, [pc, #196]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d15c      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef6:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01f      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d019      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	4a20      	ldr	r2, [pc, #128]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f30:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f40:	4a19      	ldr	r2, [pc, #100]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fd f85d 	bl	8002010 <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f58:	e00b      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fd f859 	bl	8002010 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d902      	bls.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f72:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ec      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f96:	4904      	ldr	r1, [pc, #16]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f9e:	e009      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	74bb      	strb	r3, [r7, #18]
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb4:	7c7b      	ldrb	r3, [r7, #17]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b9e      	ldr	r3, [pc, #632]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a9d      	ldr	r2, [pc, #628]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd2:	4b98      	ldr	r3, [pc, #608]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f023 0203 	bic.w	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	4994      	ldr	r1, [pc, #592]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff4:	4b8f      	ldr	r3, [pc, #572]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 020c 	bic.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	498c      	ldr	r1, [pc, #560]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005016:	4b87      	ldr	r3, [pc, #540]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	4983      	ldr	r1, [pc, #524]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005038:	4b7e      	ldr	r3, [pc, #504]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	497b      	ldr	r1, [pc, #492]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505a:	4b76      	ldr	r3, [pc, #472]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005068:	4972      	ldr	r1, [pc, #456]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507c:	4b6d      	ldr	r3, [pc, #436]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	496a      	ldr	r1, [pc, #424]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800509e:	4b65      	ldr	r3, [pc, #404]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	4961      	ldr	r1, [pc, #388]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050c0:	4b5c      	ldr	r3, [pc, #368]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ce:	4959      	ldr	r1, [pc, #356]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050e2:	4b54      	ldr	r3, [pc, #336]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	4950      	ldr	r1, [pc, #320]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005104:	4b4b      	ldr	r3, [pc, #300]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	4948      	ldr	r1, [pc, #288]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005126:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	493f      	ldr	r1, [pc, #252]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d028      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005148:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	4937      	ldr	r1, [pc, #220]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005166:	d106      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a31      	ldr	r2, [pc, #196]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800516e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005172:	60d3      	str	r3, [r2, #12]
 8005174:	e011      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f8c8 	bl	800531c <RCCEx_PLLSAI1_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d028      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	491f      	ldr	r1, [pc, #124]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d0:	60d3      	str	r3, [r2, #12]
 80051d2:	e011      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	2101      	movs	r1, #1
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f899 	bl	800531c <RCCEx_PLLSAI1_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02b      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	4908      	ldr	r1, [pc, #32]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005222:	d109      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a02      	ldr	r2, [pc, #8]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522e:	60d3      	str	r3, [r2, #12]
 8005230:	e014      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005240:	d10c      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3304      	adds	r3, #4
 8005246:	2101      	movs	r1, #1
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f867 	bl	800531c <RCCEx_PLLSAI1_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005252:	7cfb      	ldrb	r3, [r7, #19]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02f      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	4928      	ldr	r1, [pc, #160]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005286:	d10d      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2102      	movs	r1, #2
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f844 	bl	800531c <RCCEx_PLLSAI1_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d014      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	74bb      	strb	r3, [r7, #18]
 80052a2:	e011      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3320      	adds	r3, #32
 80052b2:	2102      	movs	r1, #2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f921 	bl	80054fc <RCCEx_PLLSAI2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e2:	490d      	ldr	r1, [pc, #52]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	4904      	ldr	r1, [pc, #16]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800530e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000

0800531c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800532a:	4b73      	ldr	r3, [pc, #460]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d018      	beq.n	8005368 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005336:	4b70      	ldr	r3, [pc, #448]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0203 	and.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d10d      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
       ||
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800534e:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
       ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d044      	beq.n	80053ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	e041      	b.n	80053ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d00c      	beq.n	800538a <RCCEx_PLLSAI1_Config+0x6e>
 8005370:	2b03      	cmp	r3, #3
 8005372:	d013      	beq.n	800539c <RCCEx_PLLSAI1_Config+0x80>
 8005374:	2b01      	cmp	r3, #1
 8005376:	d120      	bne.n	80053ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005378:	4b5f      	ldr	r3, [pc, #380]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005388:	e01a      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800538a:	4b5b      	ldr	r3, [pc, #364]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539a:	e013      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800539c:	4b56      	ldr	r3, [pc, #344]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a8:	4b53      	ldr	r3, [pc, #332]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b8:	e006      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
      break;
 80053be:	e004      	b.n	80053ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80053c0:	bf00      	nop
 80053c2:	e002      	b.n	80053ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80053c4:	bf00      	nop
 80053c6:	e000      	b.n	80053ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80053c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10d      	bne.n	80053ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053d0:	4b49      	ldr	r3, [pc, #292]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	430b      	orrs	r3, r1
 80053e6:	4944      	ldr	r1, [pc, #272]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d17d      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053f2:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a40      	ldr	r2, [pc, #256]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fe:	f7fc fe07 	bl	8002010 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005404:	e009      	b.n	800541a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005406:	f7fc fe03 	bl	8002010 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d902      	bls.n	800541a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	73fb      	strb	r3, [r7, #15]
        break;
 8005418:	e005      	b.n	8005426 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800541a:	4b37      	ldr	r3, [pc, #220]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ef      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d160      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d111      	bne.n	8005456 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005432:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	0211      	lsls	r1, r2, #8
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68d2      	ldr	r2, [r2, #12]
 8005448:	0912      	lsrs	r2, r2, #4
 800544a:	0452      	lsls	r2, r2, #17
 800544c:	430a      	orrs	r2, r1
 800544e:	492a      	ldr	r1, [pc, #168]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	610b      	str	r3, [r1, #16]
 8005454:	e027      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d112      	bne.n	8005482 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545c:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005464:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6892      	ldr	r2, [r2, #8]
 800546c:	0211      	lsls	r1, r2, #8
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6912      	ldr	r2, [r2, #16]
 8005472:	0852      	lsrs	r2, r2, #1
 8005474:	3a01      	subs	r2, #1
 8005476:	0552      	lsls	r2, r2, #21
 8005478:	430a      	orrs	r2, r1
 800547a:	491f      	ldr	r1, [pc, #124]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]
 8005480:	e011      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005482:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800548a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6892      	ldr	r2, [r2, #8]
 8005492:	0211      	lsls	r1, r2, #8
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6952      	ldr	r2, [r2, #20]
 8005498:	0852      	lsrs	r2, r2, #1
 800549a:	3a01      	subs	r2, #1
 800549c:	0652      	lsls	r2, r2, #25
 800549e:	430a      	orrs	r2, r1
 80054a0:	4915      	ldr	r1, [pc, #84]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fc fdad 	bl	8002010 <HAL_GetTick>
 80054b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b8:	e009      	b.n	80054ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ba:	f7fc fda9 	bl	8002010 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d902      	bls.n	80054ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	73fb      	strb	r3, [r7, #15]
          break;
 80054cc:	e005      	b.n	80054da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ef      	beq.n	80054ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40021000 	.word	0x40021000

080054fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800550a:	4b68      	ldr	r3, [pc, #416]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005516:	4b65      	ldr	r3, [pc, #404]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0203 	and.w	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d10d      	bne.n	8005542 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
       ||
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800552e:	4b5f      	ldr	r3, [pc, #380]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
       ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d044      	beq.n	80055cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e041      	b.n	80055cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d00c      	beq.n	800556a <RCCEx_PLLSAI2_Config+0x6e>
 8005550:	2b03      	cmp	r3, #3
 8005552:	d013      	beq.n	800557c <RCCEx_PLLSAI2_Config+0x80>
 8005554:	2b01      	cmp	r3, #1
 8005556:	d120      	bne.n	800559a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005558:	4b54      	ldr	r3, [pc, #336]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11d      	bne.n	80055a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005568:	e01a      	b.n	80055a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800556a:	4b50      	ldr	r3, [pc, #320]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800557a:	e013      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800557c:	4b4b      	ldr	r3, [pc, #300]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005588:	4b48      	ldr	r3, [pc, #288]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d109      	bne.n	80055a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005598:	e006      	b.n	80055a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
      break;
 800559e:	e004      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80055a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055b0:	4b3e      	ldr	r3, [pc, #248]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	430b      	orrs	r3, r1
 80055c6:	4939      	ldr	r1, [pc, #228]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d167      	bne.n	80056a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055d2:	4b36      	ldr	r3, [pc, #216]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a35      	ldr	r2, [pc, #212]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80055d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055de:	f7fc fd17 	bl	8002010 <HAL_GetTick>
 80055e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055e4:	e009      	b.n	80055fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e6:	f7fc fd13 	bl	8002010 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d902      	bls.n	80055fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	73fb      	strb	r3, [r7, #15]
        break;
 80055f8:	e005      	b.n	8005606 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055fa:	4b2c      	ldr	r3, [pc, #176]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ef      	bne.n	80055e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d14a      	bne.n	80056a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d111      	bne.n	8005636 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800561a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6892      	ldr	r2, [r2, #8]
 8005622:	0211      	lsls	r1, r2, #8
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68d2      	ldr	r2, [r2, #12]
 8005628:	0912      	lsrs	r2, r2, #4
 800562a:	0452      	lsls	r2, r2, #17
 800562c:	430a      	orrs	r2, r1
 800562e:	491f      	ldr	r1, [pc, #124]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005630:	4313      	orrs	r3, r2
 8005632:	614b      	str	r3, [r1, #20]
 8005634:	e011      	b.n	800565a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005636:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800563e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6892      	ldr	r2, [r2, #8]
 8005646:	0211      	lsls	r1, r2, #8
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6912      	ldr	r2, [r2, #16]
 800564c:	0852      	lsrs	r2, r2, #1
 800564e:	3a01      	subs	r2, #1
 8005650:	0652      	lsls	r2, r2, #25
 8005652:	430a      	orrs	r2, r1
 8005654:	4915      	ldr	r1, [pc, #84]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005656:	4313      	orrs	r3, r2
 8005658:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a13      	ldr	r2, [pc, #76]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fc fcd3 	bl	8002010 <HAL_GetTick>
 800566a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800566c:	e009      	b.n	8005682 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800566e:	f7fc fccf 	bl	8002010 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d902      	bls.n	8005682 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	73fb      	strb	r3, [r7, #15]
          break;
 8005680:	e005      	b.n	800568e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ef      	beq.n	800566e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4903      	ldr	r1, [pc, #12]	; (80056ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000

080056b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e01d      	b.n	80056fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc faf4 	bl	8001cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f000 faec 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <HAL_TIM_Base_Start_IT+0x50>)
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b06      	cmp	r3, #6
 8005730:	d00b      	beq.n	800574a <HAL_TIM_Base_Start_IT+0x42>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d007      	beq.n	800574a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	00010007 	.word	0x00010007

0800575c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e01d      	b.n	80057aa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fc fa5a 	bl	8001c3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f000 fa96 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	d841      	bhi.n	8005848 <HAL_TIM_IC_Start_IT+0x94>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <HAL_TIM_IC_Start_IT+0x18>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005849 	.word	0x08005849
 80057d4:	08005849 	.word	0x08005849
 80057d8:	08005849 	.word	0x08005849
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005849 	.word	0x08005849
 80057e4:	08005849 	.word	0x08005849
 80057e8:	08005849 	.word	0x08005849
 80057ec:	08005825 	.word	0x08005825
 80057f0:	08005849 	.word	0x08005849
 80057f4:	08005849 	.word	0x08005849
 80057f8:	08005849 	.word	0x08005849
 80057fc:	08005837 	.word	0x08005837
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0202 	orr.w	r2, r2, #2
 800580e:	60da      	str	r2, [r3, #12]
      break;
 8005810:	e01b      	b.n	800584a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0204 	orr.w	r2, r2, #4
 8005820:	60da      	str	r2, [r3, #12]
      break;
 8005822:	e012      	b.n	800584a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	60da      	str	r2, [r3, #12]
      break;
 8005834:	e009      	b.n	800584a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0210 	orr.w	r2, r2, #16
 8005844:	60da      	str	r2, [r3, #12]
      break;
 8005846:	e000      	b.n	800584a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005848:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fbf8 	bl	8006048 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_TIM_IC_Start_IT+0xd8>)
 8005860:	4013      	ands	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b06      	cmp	r3, #6
 8005868:	d00b      	beq.n	8005882 <HAL_TIM_IC_Start_IT+0xce>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005870:	d007      	beq.n	8005882 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0202 	mvn.w	r2, #2
 80058bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fb fb78 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9d8 	bl	8005c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9df 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0204 	mvn.w	r2, #4
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fb fb4e 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9ae 	bl	8005c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f9b5 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b08      	cmp	r3, #8
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0208 	mvn.w	r2, #8
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2204      	movs	r2, #4
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fb24 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f984 	bl	8005c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f98b 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b10      	cmp	r3, #16
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0210 	mvn.w	r2, #16
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2208      	movs	r2, #8
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fb fafa 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f95a 	bl	8005c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f961 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10e      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0201 	mvn.w	r2, #1
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fb fb36 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fbbc 	bl	80061b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4e:	d10e      	bne.n	8005a6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b80      	cmp	r3, #128	; 0x80
 8005a5c:	d107      	bne.n	8005a6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fbaf 	bl	80061cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d10e      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d107      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f90f 	bl	8005cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d10e      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d107      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f06f 0220 	mvn.w	r2, #32
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb6f 	bl	80061a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e08a      	b.n	8005bfe <HAL_TIM_IC_ConfigChannel+0x130>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11b      	bne.n	8005b36 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f000 f977 	bl	8005e00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 020c 	bic.w	r2, r2, #12
 8005b20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6999      	ldr	r1, [r3, #24]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	619a      	str	r2, [r3, #24]
 8005b34:	e05a      	b.n	8005bec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d11c      	bne.n	8005b76 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 f9c6 	bl	8005edc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6999      	ldr	r1, [r3, #24]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	619a      	str	r2, [r3, #24]
 8005b74:	e03a      	b.n	8005bec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d11b      	bne.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f000 f9e3 	bl	8005f56 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 020c 	bic.w	r2, r2, #12
 8005b9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69d9      	ldr	r1, [r3, #28]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
 8005bb2:	e01b      	b.n	8005bec <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f000 fa03 	bl	8005fce <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69d9      	ldr	r1, [r3, #28]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d831      	bhi.n	8005c80 <HAL_TIM_ReadCapturedValue+0x78>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c59 	.word	0x08005c59
 8005c28:	08005c81 	.word	0x08005c81
 8005c2c:	08005c81 	.word	0x08005c81
 8005c30:	08005c81 	.word	0x08005c81
 8005c34:	08005c63 	.word	0x08005c63
 8005c38:	08005c81 	.word	0x08005c81
 8005c3c:	08005c81 	.word	0x08005c81
 8005c40:	08005c81 	.word	0x08005c81
 8005c44:	08005c6d 	.word	0x08005c6d
 8005c48:	08005c81 	.word	0x08005c81
 8005c4c:	08005c81 	.word	0x08005c81
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005c77 	.word	0x08005c77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	60fb      	str	r3, [r7, #12]

      break;
 8005c60:	e00f      	b.n	8005c82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	60fb      	str	r3, [r7, #12]

      break;
 8005c6a:	e00a      	b.n	8005c82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	60fb      	str	r3, [r7, #12]

      break;
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	60fb      	str	r3, [r7, #12]

      break;
 8005c7e:	e000      	b.n	8005c82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c80:	bf00      	nop
  }

  return tmpreg;
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a40      	ldr	r2, [pc, #256]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d00f      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3a      	ldr	r2, [pc, #232]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01f      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d01b      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d017      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <TIM_Base_SetConfig+0x128>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <TIM_Base_SetConfig+0x12c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_Base_SetConfig+0x130>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a10      	ldr	r2, [pc, #64]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <TIM_Base_SetConfig+0x128>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <TIM_Base_SetConfig+0x12c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <TIM_Base_SetConfig+0x130>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <TIM_TI1_SetConfig+0xc4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d017      	beq.n	8005e5e <TIM_TI1_SetConfig+0x5e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e34:	d013      	beq.n	8005e5e <TIM_TI1_SetConfig+0x5e>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <TIM_TI1_SetConfig+0xc8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00f      	beq.n	8005e5e <TIM_TI1_SetConfig+0x5e>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <TIM_TI1_SetConfig+0xcc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_TI1_SetConfig+0x5e>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <TIM_TI1_SetConfig+0xd0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_TI1_SetConfig+0x5e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <TIM_TI1_SetConfig+0xd4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_TI1_SetConfig+0x5e>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a1f      	ldr	r2, [pc, #124]	; (8005ed8 <TIM_TI1_SetConfig+0xd8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <TIM_TI1_SetConfig+0x62>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <TIM_TI1_SetConfig+0x64>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e003      	b.n	8005e82 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f023 030a 	bic.w	r3, r3, #10
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f003 030a 	and.w	r3, r3, #10
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40000c00 	.word	0x40000c00
 8005ed4:	40013400 	.word	0x40013400
 8005ed8:	40014000 	.word	0x40014000

08005edc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0210 	bic.w	r2, r3, #16
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	031b      	lsls	r3, r3, #12
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	b29b      	uxth	r3, r3
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	031b      	lsls	r3, r3, #12
 8006026:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e068      	b.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2e      	ldr	r2, [pc, #184]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d004      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01d      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d018      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10c      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4313      	orrs	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40014000 	.word	0x40014000

080061a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e040      	b.n	8006274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb fd7e 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2224      	movs	r2, #36	; 0x24
 800620c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f986 	bl	8006530 <UART_SetConfig>
 8006224:	4603      	mov	r3, r0
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e022      	b.n	8006274 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fcec 	bl	8006c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fd73 	bl	8006d58 <UART_CheckIdleState>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	f640 030f 	movw	r3, #2063	; 0x80f
 80062a2:	4013      	ands	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d113      	bne.n	80062d4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8114 	beq.w	80064f2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
      }
      return;
 80062d2:	e10e      	b.n	80064f2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80d6 	beq.w	8006488 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80cb 	beq.w	8006488 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <HAL_UART_IRQHandler+0x9e>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006312:	f043 0201 	orr.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00e      	beq.n	8006342 <HAL_UART_IRQHandler+0xc6>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2202      	movs	r2, #2
 8006334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <HAL_UART_IRQHandler+0xee>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2204      	movs	r2, #4
 800635c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006362:	f043 0202 	orr.w	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2208      	movs	r2, #8
 800638e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006394:	f043 0208 	orr.w	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00f      	beq.n	80063c6 <HAL_UART_IRQHandler+0x14a>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063be:	f043 0220 	orr.w	r2, r3, #32
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8093 	beq.w	80064f6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d004      	beq.n	8006412 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800640e:	2b00      	cmp	r3, #0
 8006410:	d031      	beq.n	8006476 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fd60 	bl	8006ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d123      	bne.n	800646e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006434:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d013      	beq.n	8006466 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006442:	4a30      	ldr	r2, [pc, #192]	; (8006504 <HAL_UART_IRQHandler+0x288>)
 8006444:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644a:	4618      	mov	r0, r3
 800644c:	f7fd fc17 	bl	8003c7e <HAL_DMA_Abort_IT>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00e      	b.n	8006484 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f858 	bl	800651c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e00a      	b.n	8006484 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f854 	bl	800651c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	e006      	b.n	8006484 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f850 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006482:	e038      	b.n	80064f6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006484:	bf00      	nop
    return;
 8006486:	e036      	b.n	80064f6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <HAL_UART_IRQHandler+0x232>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fd65 	bl	8006f76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ac:	e026      	b.n	80064fc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00d      	beq.n	80064d4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d017      	beq.n	80064fa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
    }
    return;
 80064d2:	e012      	b.n	80064fa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <HAL_UART_IRQHandler+0x280>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fd2b 	bl	8006f44 <UART_EndTransmit_IT>
    return;
 80064ee:	bf00      	nop
 80064f0:	e004      	b.n	80064fc <HAL_UART_IRQHandler+0x280>
      return;
 80064f2:	bf00      	nop
 80064f4:	e002      	b.n	80064fc <HAL_UART_IRQHandler+0x280>
    return;
 80064f6:	bf00      	nop
 80064f8:	e000      	b.n	80064fc <HAL_UART_IRQHandler+0x280>
    return;
 80064fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08006f19 	.word	0x08006f19

08006508 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006530:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006534:	b08a      	sub	sp, #40	; 0x28
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4313      	orrs	r3, r2
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4bb8      	ldr	r3, [pc, #736]	; (8006848 <UART_SetConfig+0x318>)
 8006566:	4013      	ands	r3, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800656e:	430b      	orrs	r3, r1
 8006570:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4aae      	ldr	r2, [pc, #696]	; (800684c <UART_SetConfig+0x31c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659e:	4313      	orrs	r3, r2
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4aa5      	ldr	r2, [pc, #660]	; (8006850 <UART_SetConfig+0x320>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d126      	bne.n	800660e <UART_SetConfig+0xde>
 80065c0:	4ba4      	ldr	r3, [pc, #656]	; (8006854 <UART_SetConfig+0x324>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d81a      	bhi.n	8006604 <UART_SetConfig+0xd4>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0xa4>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080065fd 	.word	0x080065fd
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ea:	e105      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80065ec:	2302      	movs	r3, #2
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f2:	e101      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fa:	e0fd      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006602:	e0f9      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660a:	bf00      	nop
 800660c:	e0f4      	b.n	80067f8 <UART_SetConfig+0x2c8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a91      	ldr	r2, [pc, #580]	; (8006858 <UART_SetConfig+0x328>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d138      	bne.n	800668a <UART_SetConfig+0x15a>
 8006618:	4b8e      	ldr	r3, [pc, #568]	; (8006854 <UART_SetConfig+0x324>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b0c      	cmp	r3, #12
 8006624:	d82c      	bhi.n	8006680 <UART_SetConfig+0x150>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0xfc>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	08006661 	.word	0x08006661
 8006630:	08006681 	.word	0x08006681
 8006634:	08006681 	.word	0x08006681
 8006638:	08006681 	.word	0x08006681
 800663c:	08006671 	.word	0x08006671
 8006640:	08006681 	.word	0x08006681
 8006644:	08006681 	.word	0x08006681
 8006648:	08006681 	.word	0x08006681
 800664c:	08006669 	.word	0x08006669
 8006650:	08006681 	.word	0x08006681
 8006654:	08006681 	.word	0x08006681
 8006658:	08006681 	.word	0x08006681
 800665c:	08006679 	.word	0x08006679
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e0c7      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006668:	2302      	movs	r3, #2
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	e0c3      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006676:	e0bf      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800667e:	e0bb      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006686:	bf00      	nop
 8006688:	e0b6      	b.n	80067f8 <UART_SetConfig+0x2c8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a73      	ldr	r2, [pc, #460]	; (800685c <UART_SetConfig+0x32c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d125      	bne.n	80066e0 <UART_SetConfig+0x1b0>
 8006694:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <UART_SetConfig+0x324>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800669e:	2b10      	cmp	r3, #16
 80066a0:	d011      	beq.n	80066c6 <UART_SetConfig+0x196>
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d802      	bhi.n	80066ac <UART_SetConfig+0x17c>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <UART_SetConfig+0x186>
 80066aa:	e014      	b.n	80066d6 <UART_SetConfig+0x1a6>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d006      	beq.n	80066be <UART_SetConfig+0x18e>
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d00c      	beq.n	80066ce <UART_SetConfig+0x19e>
 80066b4:	e00f      	b.n	80066d6 <UART_SetConfig+0x1a6>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066bc:	e09c      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80066be:	2302      	movs	r3, #2
 80066c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c4:	e098      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80066c6:	2304      	movs	r3, #4
 80066c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066cc:	e094      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80066ce:	2308      	movs	r3, #8
 80066d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d4:	e090      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80066d6:	2310      	movs	r3, #16
 80066d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066dc:	bf00      	nop
 80066de:	e08b      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a5e      	ldr	r2, [pc, #376]	; (8006860 <UART_SetConfig+0x330>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d125      	bne.n	8006736 <UART_SetConfig+0x206>
 80066ea:	4b5a      	ldr	r3, [pc, #360]	; (8006854 <UART_SetConfig+0x324>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d011      	beq.n	800671c <UART_SetConfig+0x1ec>
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d802      	bhi.n	8006702 <UART_SetConfig+0x1d2>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <UART_SetConfig+0x1dc>
 8006700:	e014      	b.n	800672c <UART_SetConfig+0x1fc>
 8006702:	2b80      	cmp	r3, #128	; 0x80
 8006704:	d006      	beq.n	8006714 <UART_SetConfig+0x1e4>
 8006706:	2bc0      	cmp	r3, #192	; 0xc0
 8006708:	d00c      	beq.n	8006724 <UART_SetConfig+0x1f4>
 800670a:	e00f      	b.n	800672c <UART_SetConfig+0x1fc>
 800670c:	2300      	movs	r3, #0
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e071      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006714:	2302      	movs	r3, #2
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e06d      	b.n	80067f8 <UART_SetConfig+0x2c8>
 800671c:	2304      	movs	r3, #4
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e069      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006724:	2308      	movs	r3, #8
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672a:	e065      	b.n	80067f8 <UART_SetConfig+0x2c8>
 800672c:	2310      	movs	r3, #16
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	bf00      	nop
 8006734:	e060      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a4a      	ldr	r2, [pc, #296]	; (8006864 <UART_SetConfig+0x334>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d129      	bne.n	8006794 <UART_SetConfig+0x264>
 8006740:	4b44      	ldr	r3, [pc, #272]	; (8006854 <UART_SetConfig+0x324>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674e:	d014      	beq.n	800677a <UART_SetConfig+0x24a>
 8006750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006754:	d802      	bhi.n	800675c <UART_SetConfig+0x22c>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <UART_SetConfig+0x23a>
 800675a:	e016      	b.n	800678a <UART_SetConfig+0x25a>
 800675c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006760:	d007      	beq.n	8006772 <UART_SetConfig+0x242>
 8006762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006766:	d00c      	beq.n	8006782 <UART_SetConfig+0x252>
 8006768:	e00f      	b.n	800678a <UART_SetConfig+0x25a>
 800676a:	2300      	movs	r3, #0
 800676c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006770:	e042      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006772:	2302      	movs	r3, #2
 8006774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006778:	e03e      	b.n	80067f8 <UART_SetConfig+0x2c8>
 800677a:	2304      	movs	r3, #4
 800677c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006780:	e03a      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006782:	2308      	movs	r3, #8
 8006784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006788:	e036      	b.n	80067f8 <UART_SetConfig+0x2c8>
 800678a:	2310      	movs	r3, #16
 800678c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006790:	bf00      	nop
 8006792:	e031      	b.n	80067f8 <UART_SetConfig+0x2c8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2c      	ldr	r2, [pc, #176]	; (800684c <UART_SetConfig+0x31c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d129      	bne.n	80067f2 <UART_SetConfig+0x2c2>
 800679e:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <UART_SetConfig+0x324>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ac:	d014      	beq.n	80067d8 <UART_SetConfig+0x2a8>
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d802      	bhi.n	80067ba <UART_SetConfig+0x28a>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <UART_SetConfig+0x298>
 80067b8:	e016      	b.n	80067e8 <UART_SetConfig+0x2b8>
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d007      	beq.n	80067d0 <UART_SetConfig+0x2a0>
 80067c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c4:	d00c      	beq.n	80067e0 <UART_SetConfig+0x2b0>
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x2b8>
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ce:	e013      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067de:	e00b      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e6:	e007      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <UART_SetConfig+0x2c8>
 80067f2:	2310      	movs	r3, #16
 80067f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a13      	ldr	r2, [pc, #76]	; (800684c <UART_SetConfig+0x31c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f040 80fe 	bne.w	8006a00 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006808:	2b08      	cmp	r3, #8
 800680a:	d837      	bhi.n	800687c <UART_SetConfig+0x34c>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x2e4>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006839 	.word	0x08006839
 8006818:	0800687d 	.word	0x0800687d
 800681c:	08006841 	.word	0x08006841
 8006820:	0800687d 	.word	0x0800687d
 8006824:	0800686d 	.word	0x0800686d
 8006828:	0800687d 	.word	0x0800687d
 800682c:	0800687d 	.word	0x0800687d
 8006830:	0800687d 	.word	0x0800687d
 8006834:	08006875 	.word	0x08006875
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fe f9fe 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 800683c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800683e:	e020      	b.n	8006882 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <UART_SetConfig+0x338>)
 8006842:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006844:	e01d      	b.n	8006882 <UART_SetConfig+0x352>
 8006846:	bf00      	nop
 8006848:	efff69f3 	.word	0xefff69f3
 800684c:	40008000 	.word	0x40008000
 8006850:	40013800 	.word	0x40013800
 8006854:	40021000 	.word	0x40021000
 8006858:	40004400 	.word	0x40004400
 800685c:	40004800 	.word	0x40004800
 8006860:	40004c00 	.word	0x40004c00
 8006864:	40005000 	.word	0x40005000
 8006868:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800686c:	f7fe f94e 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8006870:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006872:	e006      	b.n	8006882 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006878:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800687a:	e002      	b.n	8006882 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	76fb      	strb	r3, [r7, #27]
        break;
 8006880:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 81b9 	beq.w	8006bfc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d305      	bcc.n	80068a6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d902      	bls.n	80068ac <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	76fb      	strb	r3, [r7, #27]
 80068aa:	e1a7      	b.n	8006bfc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80068ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	f200 8092 	bhi.w	80069da <UART_SetConfig+0x4aa>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x38c>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080069db 	.word	0x080069db
 80068c4:	0800692f 	.word	0x0800692f
 80068c8:	080069db 	.word	0x080069db
 80068cc:	08006963 	.word	0x08006963
 80068d0:	080069db 	.word	0x080069db
 80068d4:	080069db 	.word	0x080069db
 80068d8:	080069db 	.word	0x080069db
 80068dc:	080069b1 	.word	0x080069b1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80068e0:	f7fe f9aa 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 80068e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4619      	mov	r1, r3
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	f04f 0400 	mov.w	r4, #0
 80068f6:	0214      	lsls	r4, r2, #8
 80068f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80068fc:	020b      	lsls	r3, r1, #8
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	0852      	lsrs	r2, r2, #1
 8006904:	4611      	mov	r1, r2
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	eb13 0b01 	adds.w	fp, r3, r1
 800690e:	eb44 0c02 	adc.w	ip, r4, r2
 8006912:	4658      	mov	r0, fp
 8006914:	4661      	mov	r1, ip
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f04f 0400 	mov.w	r4, #0
 800691e:	461a      	mov	r2, r3
 8006920:	4623      	mov	r3, r4
 8006922:	f7fa f991 	bl	8000c48 <__aeabi_uldivmod>
 8006926:	4603      	mov	r3, r0
 8006928:	460c      	mov	r4, r1
 800692a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800692c:	e058      	b.n	80069e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	085b      	lsrs	r3, r3, #1
 8006934:	f04f 0400 	mov.w	r4, #0
 8006938:	49ae      	ldr	r1, [pc, #696]	; (8006bf4 <UART_SetConfig+0x6c4>)
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	eb13 0b01 	adds.w	fp, r3, r1
 8006942:	eb44 0c02 	adc.w	ip, r4, r2
 8006946:	4658      	mov	r0, fp
 8006948:	4661      	mov	r1, ip
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f04f 0400 	mov.w	r4, #0
 8006952:	461a      	mov	r2, r3
 8006954:	4623      	mov	r3, r4
 8006956:	f7fa f977 	bl	8000c48 <__aeabi_uldivmod>
 800695a:	4603      	mov	r3, r0
 800695c:	460c      	mov	r4, r1
 800695e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006960:	e03e      	b.n	80069e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fe f8d3 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8006966:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4619      	mov	r1, r3
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	f04f 0400 	mov.w	r4, #0
 8006978:	0214      	lsls	r4, r2, #8
 800697a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800697e:	020b      	lsls	r3, r1, #8
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6852      	ldr	r2, [r2, #4]
 8006984:	0852      	lsrs	r2, r2, #1
 8006986:	4611      	mov	r1, r2
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	eb13 0b01 	adds.w	fp, r3, r1
 8006990:	eb44 0c02 	adc.w	ip, r4, r2
 8006994:	4658      	mov	r0, fp
 8006996:	4661      	mov	r1, ip
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f04f 0400 	mov.w	r4, #0
 80069a0:	461a      	mov	r2, r3
 80069a2:	4623      	mov	r3, r4
 80069a4:	f7fa f950 	bl	8000c48 <__aeabi_uldivmod>
 80069a8:	4603      	mov	r3, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069ae:	e017      	b.n	80069e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	f04f 0400 	mov.w	r4, #0
 80069ba:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80069be:	f144 0100 	adc.w	r1, r4, #0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f04f 0400 	mov.w	r4, #0
 80069ca:	461a      	mov	r2, r3
 80069cc:	4623      	mov	r3, r4
 80069ce:	f7fa f93b 	bl	8000c48 <__aeabi_uldivmod>
 80069d2:	4603      	mov	r3, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069d8:	e002      	b.n	80069e0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	76fb      	strb	r3, [r7, #27]
            break;
 80069de:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069e6:	d308      	bcc.n	80069fa <UART_SetConfig+0x4ca>
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ee:	d204      	bcs.n	80069fa <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	e100      	b.n	8006bfc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	76fb      	strb	r3, [r7, #27]
 80069fe:	e0fd      	b.n	8006bfc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	f040 8084 	bne.w	8006b14 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d85f      	bhi.n	8006ad4 <UART_SetConfig+0x5a4>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x4ec>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a81 	.word	0x08006a81
 8006a28:	08006ad5 	.word	0x08006ad5
 8006a2c:	08006a9d 	.word	0x08006a9d
 8006a30:	08006ad5 	.word	0x08006ad5
 8006a34:	08006ad5 	.word	0x08006ad5
 8006a38:	08006ad5 	.word	0x08006ad5
 8006a3c:	08006abd 	.word	0x08006abd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe f8fa 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8006a44:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	005a      	lsls	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	441a      	add	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a5e:	e03c      	b.n	8006ada <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fe f900 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 8006a64:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	005a      	lsls	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	441a      	add	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a7e:	e02c      	b.n	8006ada <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006a8a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6852      	ldr	r2, [r2, #4]
 8006a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a9a:	e01e      	b.n	8006ada <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9c:	f7fe f836 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8006aa0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	005a      	lsls	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006aba:	e00e      	b.n	8006ada <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ad2:	e002      	b.n	8006ada <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	76fb      	strb	r3, [r7, #27]
        break;
 8006ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	2b0f      	cmp	r3, #15
 8006ade:	d916      	bls.n	8006b0e <UART_SetConfig+0x5de>
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae6:	d212      	bcs.n	8006b0e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f023 030f 	bic.w	r3, r3, #15
 8006af0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	89fa      	ldrh	r2, [r7, #14]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	e076      	b.n	8006bfc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	76fb      	strb	r3, [r7, #27]
 8006b12:	e073      	b.n	8006bfc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d85c      	bhi.n	8006bd6 <UART_SetConfig+0x6a6>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x5f4>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b67 	.word	0x08006b67
 8006b2c:	08006b85 	.word	0x08006b85
 8006b30:	08006bd7 	.word	0x08006bd7
 8006b34:	08006ba1 	.word	0x08006ba1
 8006b38:	08006bd7 	.word	0x08006bd7
 8006b3c:	08006bd7 	.word	0x08006bd7
 8006b40:	08006bd7 	.word	0x08006bd7
 8006b44:	08006bbf 	.word	0x08006bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b48:	f7fe f876 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8006b4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	085a      	lsrs	r2, r3, #1
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	441a      	add	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b64:	e03a      	b.n	8006bdc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b66:	f7fe f87d 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 8006b6a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	085a      	lsrs	r2, r3, #1
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b82:	e02b      	b.n	8006bdc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006b8e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6852      	ldr	r2, [r2, #4]
 8006b96:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b9e:	e01d      	b.n	8006bdc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba0:	f7fd ffb4 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8006ba4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085a      	lsrs	r2, r3, #1
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bbc:	e00e      	b.n	8006bdc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bd4:	e002      	b.n	8006bdc <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	76fb      	strb	r3, [r7, #27]
        break;
 8006bda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d90a      	bls.n	8006bf8 <UART_SetConfig+0x6c8>
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d206      	bcs.n	8006bf8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	e003      	b.n	8006bfc <UART_SetConfig+0x6cc>
 8006bf4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c08:	7efb      	ldrb	r3, [r7, #27]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3728      	adds	r7, #40	; 0x28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01a      	beq.n	8006d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d12:	d10a      	bne.n	8006d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d66:	f7fb f953 	bl	8002010 <HAL_GetTick>
 8006d6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d10e      	bne.n	8006d98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f82a 	bl	8006de2 <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e020      	b.n	8006dda <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d10e      	bne.n	8006dc4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f814 	bl	8006de2 <UART_WaitOnFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e00a      	b.n	8006dda <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df2:	e05d      	b.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d059      	beq.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfc:	f7fb f908 	bl	8002010 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d302      	bcc.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d11b      	bne.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e042      	b.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02b      	beq.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e66:	d123      	bne.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e70:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e80:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0201 	bic.w	r2, r2, #1
 8006e90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e00f      	b.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69da      	ldr	r2, [r3, #28]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d092      	beq.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff faf0 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff facd 	bl	8006508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <__errno>:
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <__errno+0x8>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000018 	.word	0x20000018

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4e0d      	ldr	r6, [pc, #52]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9c:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006f9e:	1ba4      	subs	r4, r4, r6
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	42a5      	cmp	r5, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	4e0b      	ldr	r6, [pc, #44]	; (8006fd8 <__libc_init_array+0x40>)
 8006faa:	4c0c      	ldr	r4, [pc, #48]	; (8006fdc <__libc_init_array+0x44>)
 8006fac:	f002 f85c 	bl	8009068 <_init>
 8006fb0:	1ba4      	subs	r4, r4, r6
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	42a5      	cmp	r5, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fc0:	4798      	blx	r3
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fca:	4798      	blx	r3
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	08009428 	.word	0x08009428
 8006fd4:	08009428 	.word	0x08009428
 8006fd8:	08009428 	.word	0x08009428
 8006fdc:	0800942c 	.word	0x0800942c

08006fe0 <memset>:
 8006fe0:	4402      	add	r2, r0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d100      	bne.n	8006fea <memset+0xa>
 8006fe8:	4770      	bx	lr
 8006fea:	f803 1b01 	strb.w	r1, [r3], #1
 8006fee:	e7f9      	b.n	8006fe4 <memset+0x4>

08006ff0 <__cvt>:
 8006ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	ec55 4b10 	vmov	r4, r5, d0
 8006ff8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ffa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	460e      	mov	r6, r1
 8007002:	4691      	mov	r9, r2
 8007004:	4619      	mov	r1, r3
 8007006:	bfb8      	it	lt
 8007008:	4622      	movlt	r2, r4
 800700a:	462b      	mov	r3, r5
 800700c:	f027 0720 	bic.w	r7, r7, #32
 8007010:	bfbb      	ittet	lt
 8007012:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007016:	461d      	movlt	r5, r3
 8007018:	2300      	movge	r3, #0
 800701a:	232d      	movlt	r3, #45	; 0x2d
 800701c:	bfb8      	it	lt
 800701e:	4614      	movlt	r4, r2
 8007020:	2f46      	cmp	r7, #70	; 0x46
 8007022:	700b      	strb	r3, [r1, #0]
 8007024:	d004      	beq.n	8007030 <__cvt+0x40>
 8007026:	2f45      	cmp	r7, #69	; 0x45
 8007028:	d100      	bne.n	800702c <__cvt+0x3c>
 800702a:	3601      	adds	r6, #1
 800702c:	2102      	movs	r1, #2
 800702e:	e000      	b.n	8007032 <__cvt+0x42>
 8007030:	2103      	movs	r1, #3
 8007032:	ab03      	add	r3, sp, #12
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	ab02      	add	r3, sp, #8
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4632      	mov	r2, r6
 800703c:	4653      	mov	r3, sl
 800703e:	ec45 4b10 	vmov	d0, r4, r5
 8007042:	f000 fcdd 	bl	8007a00 <_dtoa_r>
 8007046:	2f47      	cmp	r7, #71	; 0x47
 8007048:	4680      	mov	r8, r0
 800704a:	d102      	bne.n	8007052 <__cvt+0x62>
 800704c:	f019 0f01 	tst.w	r9, #1
 8007050:	d026      	beq.n	80070a0 <__cvt+0xb0>
 8007052:	2f46      	cmp	r7, #70	; 0x46
 8007054:	eb08 0906 	add.w	r9, r8, r6
 8007058:	d111      	bne.n	800707e <__cvt+0x8e>
 800705a:	f898 3000 	ldrb.w	r3, [r8]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d10a      	bne.n	8007078 <__cvt+0x88>
 8007062:	2200      	movs	r2, #0
 8007064:	2300      	movs	r3, #0
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800706e:	b918      	cbnz	r0, 8007078 <__cvt+0x88>
 8007070:	f1c6 0601 	rsb	r6, r6, #1
 8007074:	f8ca 6000 	str.w	r6, [sl]
 8007078:	f8da 3000 	ldr.w	r3, [sl]
 800707c:	4499      	add	r9, r3
 800707e:	2200      	movs	r2, #0
 8007080:	2300      	movs	r3, #0
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800708a:	b938      	cbnz	r0, 800709c <__cvt+0xac>
 800708c:	2230      	movs	r2, #48	; 0x30
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	454b      	cmp	r3, r9
 8007092:	d205      	bcs.n	80070a0 <__cvt+0xb0>
 8007094:	1c59      	adds	r1, r3, #1
 8007096:	9103      	str	r1, [sp, #12]
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e7f8      	b.n	800708e <__cvt+0x9e>
 800709c:	f8cd 900c 	str.w	r9, [sp, #12]
 80070a0:	9b03      	ldr	r3, [sp, #12]
 80070a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070a4:	eba3 0308 	sub.w	r3, r3, r8
 80070a8:	4640      	mov	r0, r8
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	b004      	add	sp, #16
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080070b2 <__exponent>:
 80070b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b4:	2900      	cmp	r1, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	bfba      	itte	lt
 80070ba:	4249      	neglt	r1, r1
 80070bc:	232d      	movlt	r3, #45	; 0x2d
 80070be:	232b      	movge	r3, #43	; 0x2b
 80070c0:	2909      	cmp	r1, #9
 80070c2:	f804 2b02 	strb.w	r2, [r4], #2
 80070c6:	7043      	strb	r3, [r0, #1]
 80070c8:	dd20      	ble.n	800710c <__exponent+0x5a>
 80070ca:	f10d 0307 	add.w	r3, sp, #7
 80070ce:	461f      	mov	r7, r3
 80070d0:	260a      	movs	r6, #10
 80070d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80070d6:	fb06 1115 	mls	r1, r6, r5, r1
 80070da:	3130      	adds	r1, #48	; 0x30
 80070dc:	2d09      	cmp	r5, #9
 80070de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80070e6:	4629      	mov	r1, r5
 80070e8:	dc09      	bgt.n	80070fe <__exponent+0x4c>
 80070ea:	3130      	adds	r1, #48	; 0x30
 80070ec:	3b02      	subs	r3, #2
 80070ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	4622      	mov	r2, r4
 80070f6:	d304      	bcc.n	8007102 <__exponent+0x50>
 80070f8:	1a10      	subs	r0, r2, r0
 80070fa:	b003      	add	sp, #12
 80070fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070fe:	4613      	mov	r3, r2
 8007100:	e7e7      	b.n	80070d2 <__exponent+0x20>
 8007102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007106:	f804 2b01 	strb.w	r2, [r4], #1
 800710a:	e7f2      	b.n	80070f2 <__exponent+0x40>
 800710c:	2330      	movs	r3, #48	; 0x30
 800710e:	4419      	add	r1, r3
 8007110:	7083      	strb	r3, [r0, #2]
 8007112:	1d02      	adds	r2, r0, #4
 8007114:	70c1      	strb	r1, [r0, #3]
 8007116:	e7ef      	b.n	80070f8 <__exponent+0x46>

08007118 <_printf_float>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	b08d      	sub	sp, #52	; 0x34
 800711e:	460c      	mov	r4, r1
 8007120:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007124:	4616      	mov	r6, r2
 8007126:	461f      	mov	r7, r3
 8007128:	4605      	mov	r5, r0
 800712a:	f001 fa21 	bl	8008570 <_localeconv_r>
 800712e:	6803      	ldr	r3, [r0, #0]
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	4618      	mov	r0, r3
 8007134:	f7f9 f84c 	bl	80001d0 <strlen>
 8007138:	2300      	movs	r3, #0
 800713a:	930a      	str	r3, [sp, #40]	; 0x28
 800713c:	f8d8 3000 	ldr.w	r3, [r8]
 8007140:	9005      	str	r0, [sp, #20]
 8007142:	3307      	adds	r3, #7
 8007144:	f023 0307 	bic.w	r3, r3, #7
 8007148:	f103 0208 	add.w	r2, r3, #8
 800714c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007150:	f8d4 b000 	ldr.w	fp, [r4]
 8007154:	f8c8 2000 	str.w	r2, [r8]
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007160:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007164:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007168:	9307      	str	r3, [sp, #28]
 800716a:	f8cd 8018 	str.w	r8, [sp, #24]
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	4ba7      	ldr	r3, [pc, #668]	; (8007410 <_printf_float+0x2f8>)
 8007174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007178:	f7f9 fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800717c:	bb70      	cbnz	r0, 80071dc <_printf_float+0xc4>
 800717e:	f04f 32ff 	mov.w	r2, #4294967295
 8007182:	4ba3      	ldr	r3, [pc, #652]	; (8007410 <_printf_float+0x2f8>)
 8007184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007188:	f7f9 fcb2 	bl	8000af0 <__aeabi_dcmple>
 800718c:	bb30      	cbnz	r0, 80071dc <_printf_float+0xc4>
 800718e:	2200      	movs	r2, #0
 8007190:	2300      	movs	r3, #0
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	f7f9 fca1 	bl	8000adc <__aeabi_dcmplt>
 800719a:	b110      	cbz	r0, 80071a2 <_printf_float+0x8a>
 800719c:	232d      	movs	r3, #45	; 0x2d
 800719e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a2:	4a9c      	ldr	r2, [pc, #624]	; (8007414 <_printf_float+0x2fc>)
 80071a4:	4b9c      	ldr	r3, [pc, #624]	; (8007418 <_printf_float+0x300>)
 80071a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80071aa:	bf8c      	ite	hi
 80071ac:	4690      	movhi	r8, r2
 80071ae:	4698      	movls	r8, r3
 80071b0:	2303      	movs	r3, #3
 80071b2:	f02b 0204 	bic.w	r2, fp, #4
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	f04f 0900 	mov.w	r9, #0
 80071be:	9700      	str	r7, [sp, #0]
 80071c0:	4633      	mov	r3, r6
 80071c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80071c4:	4621      	mov	r1, r4
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 f9e6 	bl	8007598 <_printf_common>
 80071cc:	3001      	adds	r0, #1
 80071ce:	f040 808d 	bne.w	80072ec <_printf_float+0x1d4>
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	b00d      	add	sp, #52	; 0x34
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	4642      	mov	r2, r8
 80071de:	464b      	mov	r3, r9
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fca2 	bl	8000b2c <__aeabi_dcmpun>
 80071e8:	b110      	cbz	r0, 80071f0 <_printf_float+0xd8>
 80071ea:	4a8c      	ldr	r2, [pc, #560]	; (800741c <_printf_float+0x304>)
 80071ec:	4b8c      	ldr	r3, [pc, #560]	; (8007420 <_printf_float+0x308>)
 80071ee:	e7da      	b.n	80071a6 <_printf_float+0x8e>
 80071f0:	6861      	ldr	r1, [r4, #4]
 80071f2:	1c4b      	adds	r3, r1, #1
 80071f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80071f8:	a80a      	add	r0, sp, #40	; 0x28
 80071fa:	d13e      	bne.n	800727a <_printf_float+0x162>
 80071fc:	2306      	movs	r3, #6
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	2300      	movs	r3, #0
 8007202:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007206:	ab09      	add	r3, sp, #36	; 0x24
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	ec49 8b10 	vmov	d0, r8, r9
 800720e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007212:	6022      	str	r2, [r4, #0]
 8007214:	f8cd a004 	str.w	sl, [sp, #4]
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	4628      	mov	r0, r5
 800721c:	f7ff fee8 	bl	8006ff0 <__cvt>
 8007220:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007224:	2b47      	cmp	r3, #71	; 0x47
 8007226:	4680      	mov	r8, r0
 8007228:	d109      	bne.n	800723e <_printf_float+0x126>
 800722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722c:	1cd8      	adds	r0, r3, #3
 800722e:	db02      	blt.n	8007236 <_printf_float+0x11e>
 8007230:	6862      	ldr	r2, [r4, #4]
 8007232:	4293      	cmp	r3, r2
 8007234:	dd47      	ble.n	80072c6 <_printf_float+0x1ae>
 8007236:	f1aa 0a02 	sub.w	sl, sl, #2
 800723a:	fa5f fa8a 	uxtb.w	sl, sl
 800723e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007242:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007244:	d824      	bhi.n	8007290 <_printf_float+0x178>
 8007246:	3901      	subs	r1, #1
 8007248:	4652      	mov	r2, sl
 800724a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800724e:	9109      	str	r1, [sp, #36]	; 0x24
 8007250:	f7ff ff2f 	bl	80070b2 <__exponent>
 8007254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007256:	1813      	adds	r3, r2, r0
 8007258:	2a01      	cmp	r2, #1
 800725a:	4681      	mov	r9, r0
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	dc02      	bgt.n	8007266 <_printf_float+0x14e>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	07d1      	lsls	r1, r2, #31
 8007264:	d501      	bpl.n	800726a <_printf_float+0x152>
 8007266:	3301      	adds	r3, #1
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0a5      	beq.n	80071be <_printf_float+0xa6>
 8007272:	232d      	movs	r3, #45	; 0x2d
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007278:	e7a1      	b.n	80071be <_printf_float+0xa6>
 800727a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800727e:	f000 8177 	beq.w	8007570 <_printf_float+0x458>
 8007282:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007286:	d1bb      	bne.n	8007200 <_printf_float+0xe8>
 8007288:	2900      	cmp	r1, #0
 800728a:	d1b9      	bne.n	8007200 <_printf_float+0xe8>
 800728c:	2301      	movs	r3, #1
 800728e:	e7b6      	b.n	80071fe <_printf_float+0xe6>
 8007290:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007294:	d119      	bne.n	80072ca <_printf_float+0x1b2>
 8007296:	2900      	cmp	r1, #0
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	dd0c      	ble.n	80072b6 <_printf_float+0x19e>
 800729c:	6121      	str	r1, [r4, #16]
 800729e:	b913      	cbnz	r3, 80072a6 <_printf_float+0x18e>
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	07d2      	lsls	r2, r2, #31
 80072a4:	d502      	bpl.n	80072ac <_printf_float+0x194>
 80072a6:	3301      	adds	r3, #1
 80072a8:	440b      	add	r3, r1
 80072aa:	6123      	str	r3, [r4, #16]
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80072b0:	f04f 0900 	mov.w	r9, #0
 80072b4:	e7d9      	b.n	800726a <_printf_float+0x152>
 80072b6:	b913      	cbnz	r3, 80072be <_printf_float+0x1a6>
 80072b8:	6822      	ldr	r2, [r4, #0]
 80072ba:	07d0      	lsls	r0, r2, #31
 80072bc:	d501      	bpl.n	80072c2 <_printf_float+0x1aa>
 80072be:	3302      	adds	r3, #2
 80072c0:	e7f3      	b.n	80072aa <_printf_float+0x192>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e7f1      	b.n	80072aa <_printf_float+0x192>
 80072c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80072ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072ce:	4293      	cmp	r3, r2
 80072d0:	db05      	blt.n	80072de <_printf_float+0x1c6>
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	07d1      	lsls	r1, r2, #31
 80072d8:	d5e8      	bpl.n	80072ac <_printf_float+0x194>
 80072da:	3301      	adds	r3, #1
 80072dc:	e7e5      	b.n	80072aa <_printf_float+0x192>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bfd4      	ite	le
 80072e2:	f1c3 0302 	rsble	r3, r3, #2
 80072e6:	2301      	movgt	r3, #1
 80072e8:	4413      	add	r3, r2
 80072ea:	e7de      	b.n	80072aa <_printf_float+0x192>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	055a      	lsls	r2, r3, #21
 80072f0:	d407      	bmi.n	8007302 <_printf_float+0x1ea>
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	4642      	mov	r2, r8
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	d12b      	bne.n	8007358 <_printf_float+0x240>
 8007300:	e767      	b.n	80071d2 <_printf_float+0xba>
 8007302:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007306:	f240 80dc 	bls.w	80074c2 <_printf_float+0x3aa>
 800730a:	2200      	movs	r2, #0
 800730c:	2300      	movs	r3, #0
 800730e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007312:	f7f9 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007316:	2800      	cmp	r0, #0
 8007318:	d033      	beq.n	8007382 <_printf_float+0x26a>
 800731a:	2301      	movs	r3, #1
 800731c:	4a41      	ldr	r2, [pc, #260]	; (8007424 <_printf_float+0x30c>)
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	f43f af54 	beq.w	80071d2 <_printf_float+0xba>
 800732a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800732e:	429a      	cmp	r2, r3
 8007330:	db02      	blt.n	8007338 <_printf_float+0x220>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	07d8      	lsls	r0, r3, #31
 8007336:	d50f      	bpl.n	8007358 <_printf_float+0x240>
 8007338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f af45 	beq.w	80071d2 <_printf_float+0xba>
 8007348:	f04f 0800 	mov.w	r8, #0
 800734c:	f104 091a 	add.w	r9, r4, #26
 8007350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007352:	3b01      	subs	r3, #1
 8007354:	4543      	cmp	r3, r8
 8007356:	dc09      	bgt.n	800736c <_printf_float+0x254>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	079b      	lsls	r3, r3, #30
 800735c:	f100 8103 	bmi.w	8007566 <_printf_float+0x44e>
 8007360:	68e0      	ldr	r0, [r4, #12]
 8007362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007364:	4298      	cmp	r0, r3
 8007366:	bfb8      	it	lt
 8007368:	4618      	movlt	r0, r3
 800736a:	e734      	b.n	80071d6 <_printf_float+0xbe>
 800736c:	2301      	movs	r3, #1
 800736e:	464a      	mov	r2, r9
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f af2b 	beq.w	80071d2 <_printf_float+0xba>
 800737c:	f108 0801 	add.w	r8, r8, #1
 8007380:	e7e6      	b.n	8007350 <_printf_float+0x238>
 8007382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	dc2b      	bgt.n	80073e0 <_printf_float+0x2c8>
 8007388:	2301      	movs	r3, #1
 800738a:	4a26      	ldr	r2, [pc, #152]	; (8007424 <_printf_float+0x30c>)
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f af1d 	beq.w	80071d2 <_printf_float+0xba>
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	b923      	cbnz	r3, 80073a6 <_printf_float+0x28e>
 800739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739e:	b913      	cbnz	r3, 80073a6 <_printf_float+0x28e>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	07d9      	lsls	r1, r3, #31
 80073a4:	d5d8      	bpl.n	8007358 <_printf_float+0x240>
 80073a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	f43f af0e 	beq.w	80071d2 <_printf_float+0xba>
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	f104 0a1a 	add.w	sl, r4, #26
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	425b      	negs	r3, r3
 80073c2:	454b      	cmp	r3, r9
 80073c4:	dc01      	bgt.n	80073ca <_printf_float+0x2b2>
 80073c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c8:	e794      	b.n	80072f4 <_printf_float+0x1dc>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4652      	mov	r2, sl
 80073ce:	4631      	mov	r1, r6
 80073d0:	4628      	mov	r0, r5
 80073d2:	47b8      	blx	r7
 80073d4:	3001      	adds	r0, #1
 80073d6:	f43f aefc 	beq.w	80071d2 <_printf_float+0xba>
 80073da:	f109 0901 	add.w	r9, r9, #1
 80073de:	e7ee      	b.n	80073be <_printf_float+0x2a6>
 80073e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073e4:	429a      	cmp	r2, r3
 80073e6:	bfa8      	it	ge
 80073e8:	461a      	movge	r2, r3
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	4691      	mov	r9, r2
 80073ee:	dd07      	ble.n	8007400 <_printf_float+0x2e8>
 80073f0:	4613      	mov	r3, r2
 80073f2:	4631      	mov	r1, r6
 80073f4:	4642      	mov	r2, r8
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	f43f aee9 	beq.w	80071d2 <_printf_float+0xba>
 8007400:	f104 031a 	add.w	r3, r4, #26
 8007404:	f04f 0b00 	mov.w	fp, #0
 8007408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800740c:	9306      	str	r3, [sp, #24]
 800740e:	e015      	b.n	800743c <_printf_float+0x324>
 8007410:	7fefffff 	.word	0x7fefffff
 8007414:	080091c8 	.word	0x080091c8
 8007418:	080091c4 	.word	0x080091c4
 800741c:	080091d0 	.word	0x080091d0
 8007420:	080091cc 	.word	0x080091cc
 8007424:	080091d4 	.word	0x080091d4
 8007428:	2301      	movs	r3, #1
 800742a:	9a06      	ldr	r2, [sp, #24]
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	f43f aecd 	beq.w	80071d2 <_printf_float+0xba>
 8007438:	f10b 0b01 	add.w	fp, fp, #1
 800743c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007440:	ebaa 0309 	sub.w	r3, sl, r9
 8007444:	455b      	cmp	r3, fp
 8007446:	dcef      	bgt.n	8007428 <_printf_float+0x310>
 8007448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800744c:	429a      	cmp	r2, r3
 800744e:	44d0      	add	r8, sl
 8007450:	db15      	blt.n	800747e <_printf_float+0x366>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	07da      	lsls	r2, r3, #31
 8007456:	d412      	bmi.n	800747e <_printf_float+0x366>
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745c:	eba3 020a 	sub.w	r2, r3, sl
 8007460:	eba3 0a01 	sub.w	sl, r3, r1
 8007464:	4592      	cmp	sl, r2
 8007466:	bfa8      	it	ge
 8007468:	4692      	movge	sl, r2
 800746a:	f1ba 0f00 	cmp.w	sl, #0
 800746e:	dc0e      	bgt.n	800748e <_printf_float+0x376>
 8007470:	f04f 0800 	mov.w	r8, #0
 8007474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007478:	f104 091a 	add.w	r9, r4, #26
 800747c:	e019      	b.n	80074b2 <_printf_float+0x39a>
 800747e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d1e5      	bne.n	8007458 <_printf_float+0x340>
 800748c:	e6a1      	b.n	80071d2 <_printf_float+0xba>
 800748e:	4653      	mov	r3, sl
 8007490:	4642      	mov	r2, r8
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	d1e9      	bne.n	8007470 <_printf_float+0x358>
 800749c:	e699      	b.n	80071d2 <_printf_float+0xba>
 800749e:	2301      	movs	r3, #1
 80074a0:	464a      	mov	r2, r9
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	47b8      	blx	r7
 80074a8:	3001      	adds	r0, #1
 80074aa:	f43f ae92 	beq.w	80071d2 <_printf_float+0xba>
 80074ae:	f108 0801 	add.w	r8, r8, #1
 80074b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	eba3 030a 	sub.w	r3, r3, sl
 80074bc:	4543      	cmp	r3, r8
 80074be:	dcee      	bgt.n	800749e <_printf_float+0x386>
 80074c0:	e74a      	b.n	8007358 <_printf_float+0x240>
 80074c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c4:	2a01      	cmp	r2, #1
 80074c6:	dc01      	bgt.n	80074cc <_printf_float+0x3b4>
 80074c8:	07db      	lsls	r3, r3, #31
 80074ca:	d53a      	bpl.n	8007542 <_printf_float+0x42a>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4642      	mov	r2, r8
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	f43f ae7b 	beq.w	80071d2 <_printf_float+0xba>
 80074dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	f108 0801 	add.w	r8, r8, #1
 80074ec:	f43f ae71 	beq.w	80071d2 <_printf_float+0xba>
 80074f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f2:	2200      	movs	r2, #0
 80074f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80074f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074fc:	2300      	movs	r3, #0
 80074fe:	f7f9 fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007502:	b9c8      	cbnz	r0, 8007538 <_printf_float+0x420>
 8007504:	4653      	mov	r3, sl
 8007506:	4642      	mov	r2, r8
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	d10e      	bne.n	8007530 <_printf_float+0x418>
 8007512:	e65e      	b.n	80071d2 <_printf_float+0xba>
 8007514:	2301      	movs	r3, #1
 8007516:	4652      	mov	r2, sl
 8007518:	4631      	mov	r1, r6
 800751a:	4628      	mov	r0, r5
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	f43f ae57 	beq.w	80071d2 <_printf_float+0xba>
 8007524:	f108 0801 	add.w	r8, r8, #1
 8007528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752a:	3b01      	subs	r3, #1
 800752c:	4543      	cmp	r3, r8
 800752e:	dcf1      	bgt.n	8007514 <_printf_float+0x3fc>
 8007530:	464b      	mov	r3, r9
 8007532:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007536:	e6de      	b.n	80072f6 <_printf_float+0x1de>
 8007538:	f04f 0800 	mov.w	r8, #0
 800753c:	f104 0a1a 	add.w	sl, r4, #26
 8007540:	e7f2      	b.n	8007528 <_printf_float+0x410>
 8007542:	2301      	movs	r3, #1
 8007544:	e7df      	b.n	8007506 <_printf_float+0x3ee>
 8007546:	2301      	movs	r3, #1
 8007548:	464a      	mov	r2, r9
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f ae3e 	beq.w	80071d2 <_printf_float+0xba>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	4543      	cmp	r3, r8
 8007562:	dcf0      	bgt.n	8007546 <_printf_float+0x42e>
 8007564:	e6fc      	b.n	8007360 <_printf_float+0x248>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	f104 0919 	add.w	r9, r4, #25
 800756e:	e7f4      	b.n	800755a <_printf_float+0x442>
 8007570:	2900      	cmp	r1, #0
 8007572:	f43f ae8b 	beq.w	800728c <_printf_float+0x174>
 8007576:	2300      	movs	r3, #0
 8007578:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800757c:	ab09      	add	r3, sp, #36	; 0x24
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	ec49 8b10 	vmov	d0, r8, r9
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	f8cd a004 	str.w	sl, [sp, #4]
 800758a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800758e:	4628      	mov	r0, r5
 8007590:	f7ff fd2e 	bl	8006ff0 <__cvt>
 8007594:	4680      	mov	r8, r0
 8007596:	e648      	b.n	800722a <_printf_float+0x112>

08007598 <_printf_common>:
 8007598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	4691      	mov	r9, r2
 800759e:	461f      	mov	r7, r3
 80075a0:	688a      	ldr	r2, [r1, #8]
 80075a2:	690b      	ldr	r3, [r1, #16]
 80075a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bfb8      	it	lt
 80075ac:	4613      	movlt	r3, r2
 80075ae:	f8c9 3000 	str.w	r3, [r9]
 80075b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b6:	4606      	mov	r6, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	b112      	cbz	r2, 80075c2 <_printf_common+0x2a>
 80075bc:	3301      	adds	r3, #1
 80075be:	f8c9 3000 	str.w	r3, [r9]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	0699      	lsls	r1, r3, #26
 80075c6:	bf42      	ittt	mi
 80075c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80075cc:	3302      	addmi	r3, #2
 80075ce:	f8c9 3000 	strmi.w	r3, [r9]
 80075d2:	6825      	ldr	r5, [r4, #0]
 80075d4:	f015 0506 	ands.w	r5, r5, #6
 80075d8:	d107      	bne.n	80075ea <_printf_common+0x52>
 80075da:	f104 0a19 	add.w	sl, r4, #25
 80075de:	68e3      	ldr	r3, [r4, #12]
 80075e0:	f8d9 2000 	ldr.w	r2, [r9]
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	42ab      	cmp	r3, r5
 80075e8:	dc28      	bgt.n	800763c <_printf_common+0xa4>
 80075ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80075ee:	6822      	ldr	r2, [r4, #0]
 80075f0:	3300      	adds	r3, #0
 80075f2:	bf18      	it	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	0692      	lsls	r2, r2, #26
 80075f8:	d42d      	bmi.n	8007656 <_printf_common+0xbe>
 80075fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075fe:	4639      	mov	r1, r7
 8007600:	4630      	mov	r0, r6
 8007602:	47c0      	blx	r8
 8007604:	3001      	adds	r0, #1
 8007606:	d020      	beq.n	800764a <_printf_common+0xb2>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	68e5      	ldr	r5, [r4, #12]
 800760c:	f8d9 2000 	ldr.w	r2, [r9]
 8007610:	f003 0306 	and.w	r3, r3, #6
 8007614:	2b04      	cmp	r3, #4
 8007616:	bf08      	it	eq
 8007618:	1aad      	subeq	r5, r5, r2
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	6922      	ldr	r2, [r4, #16]
 800761e:	bf0c      	ite	eq
 8007620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007624:	2500      	movne	r5, #0
 8007626:	4293      	cmp	r3, r2
 8007628:	bfc4      	itt	gt
 800762a:	1a9b      	subgt	r3, r3, r2
 800762c:	18ed      	addgt	r5, r5, r3
 800762e:	f04f 0900 	mov.w	r9, #0
 8007632:	341a      	adds	r4, #26
 8007634:	454d      	cmp	r5, r9
 8007636:	d11a      	bne.n	800766e <_printf_common+0xd6>
 8007638:	2000      	movs	r0, #0
 800763a:	e008      	b.n	800764e <_printf_common+0xb6>
 800763c:	2301      	movs	r3, #1
 800763e:	4652      	mov	r2, sl
 8007640:	4639      	mov	r1, r7
 8007642:	4630      	mov	r0, r6
 8007644:	47c0      	blx	r8
 8007646:	3001      	adds	r0, #1
 8007648:	d103      	bne.n	8007652 <_printf_common+0xba>
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	3501      	adds	r5, #1
 8007654:	e7c3      	b.n	80075de <_printf_common+0x46>
 8007656:	18e1      	adds	r1, r4, r3
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	2030      	movs	r0, #48	; 0x30
 800765c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007660:	4422      	add	r2, r4
 8007662:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007666:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800766a:	3302      	adds	r3, #2
 800766c:	e7c5      	b.n	80075fa <_printf_common+0x62>
 800766e:	2301      	movs	r3, #1
 8007670:	4622      	mov	r2, r4
 8007672:	4639      	mov	r1, r7
 8007674:	4630      	mov	r0, r6
 8007676:	47c0      	blx	r8
 8007678:	3001      	adds	r0, #1
 800767a:	d0e6      	beq.n	800764a <_printf_common+0xb2>
 800767c:	f109 0901 	add.w	r9, r9, #1
 8007680:	e7d8      	b.n	8007634 <_printf_common+0x9c>
	...

08007684 <_printf_i>:
 8007684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007688:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800768c:	460c      	mov	r4, r1
 800768e:	7e09      	ldrb	r1, [r1, #24]
 8007690:	b085      	sub	sp, #20
 8007692:	296e      	cmp	r1, #110	; 0x6e
 8007694:	4617      	mov	r7, r2
 8007696:	4606      	mov	r6, r0
 8007698:	4698      	mov	r8, r3
 800769a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800769c:	f000 80b3 	beq.w	8007806 <_printf_i+0x182>
 80076a0:	d822      	bhi.n	80076e8 <_printf_i+0x64>
 80076a2:	2963      	cmp	r1, #99	; 0x63
 80076a4:	d036      	beq.n	8007714 <_printf_i+0x90>
 80076a6:	d80a      	bhi.n	80076be <_printf_i+0x3a>
 80076a8:	2900      	cmp	r1, #0
 80076aa:	f000 80b9 	beq.w	8007820 <_printf_i+0x19c>
 80076ae:	2958      	cmp	r1, #88	; 0x58
 80076b0:	f000 8083 	beq.w	80077ba <_printf_i+0x136>
 80076b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80076bc:	e032      	b.n	8007724 <_printf_i+0xa0>
 80076be:	2964      	cmp	r1, #100	; 0x64
 80076c0:	d001      	beq.n	80076c6 <_printf_i+0x42>
 80076c2:	2969      	cmp	r1, #105	; 0x69
 80076c4:	d1f6      	bne.n	80076b4 <_printf_i+0x30>
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	6813      	ldr	r3, [r2, #0]
 80076ca:	0605      	lsls	r5, r0, #24
 80076cc:	f103 0104 	add.w	r1, r3, #4
 80076d0:	d52a      	bpl.n	8007728 <_printf_i+0xa4>
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da03      	bge.n	80076e2 <_printf_i+0x5e>
 80076da:	222d      	movs	r2, #45	; 0x2d
 80076dc:	425b      	negs	r3, r3
 80076de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80076e2:	486f      	ldr	r0, [pc, #444]	; (80078a0 <_printf_i+0x21c>)
 80076e4:	220a      	movs	r2, #10
 80076e6:	e039      	b.n	800775c <_printf_i+0xd8>
 80076e8:	2973      	cmp	r1, #115	; 0x73
 80076ea:	f000 809d 	beq.w	8007828 <_printf_i+0x1a4>
 80076ee:	d808      	bhi.n	8007702 <_printf_i+0x7e>
 80076f0:	296f      	cmp	r1, #111	; 0x6f
 80076f2:	d020      	beq.n	8007736 <_printf_i+0xb2>
 80076f4:	2970      	cmp	r1, #112	; 0x70
 80076f6:	d1dd      	bne.n	80076b4 <_printf_i+0x30>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	f043 0320 	orr.w	r3, r3, #32
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	e003      	b.n	800770a <_printf_i+0x86>
 8007702:	2975      	cmp	r1, #117	; 0x75
 8007704:	d017      	beq.n	8007736 <_printf_i+0xb2>
 8007706:	2978      	cmp	r1, #120	; 0x78
 8007708:	d1d4      	bne.n	80076b4 <_printf_i+0x30>
 800770a:	2378      	movs	r3, #120	; 0x78
 800770c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007710:	4864      	ldr	r0, [pc, #400]	; (80078a4 <_printf_i+0x220>)
 8007712:	e055      	b.n	80077c0 <_printf_i+0x13c>
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	1d19      	adds	r1, r3, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6011      	str	r1, [r2, #0]
 800771c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007724:	2301      	movs	r3, #1
 8007726:	e08c      	b.n	8007842 <_printf_i+0x1be>
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6011      	str	r1, [r2, #0]
 800772c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007730:	bf18      	it	ne
 8007732:	b21b      	sxthne	r3, r3
 8007734:	e7cf      	b.n	80076d6 <_printf_i+0x52>
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1d18      	adds	r0, r3, #4
 800773c:	6010      	str	r0, [r2, #0]
 800773e:	0628      	lsls	r0, r5, #24
 8007740:	d501      	bpl.n	8007746 <_printf_i+0xc2>
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	e002      	b.n	800774c <_printf_i+0xc8>
 8007746:	0668      	lsls	r0, r5, #25
 8007748:	d5fb      	bpl.n	8007742 <_printf_i+0xbe>
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	4854      	ldr	r0, [pc, #336]	; (80078a0 <_printf_i+0x21c>)
 800774e:	296f      	cmp	r1, #111	; 0x6f
 8007750:	bf14      	ite	ne
 8007752:	220a      	movne	r2, #10
 8007754:	2208      	moveq	r2, #8
 8007756:	2100      	movs	r1, #0
 8007758:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800775c:	6865      	ldr	r5, [r4, #4]
 800775e:	60a5      	str	r5, [r4, #8]
 8007760:	2d00      	cmp	r5, #0
 8007762:	f2c0 8095 	blt.w	8007890 <_printf_i+0x20c>
 8007766:	6821      	ldr	r1, [r4, #0]
 8007768:	f021 0104 	bic.w	r1, r1, #4
 800776c:	6021      	str	r1, [r4, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d13d      	bne.n	80077ee <_printf_i+0x16a>
 8007772:	2d00      	cmp	r5, #0
 8007774:	f040 808e 	bne.w	8007894 <_printf_i+0x210>
 8007778:	4665      	mov	r5, ip
 800777a:	2a08      	cmp	r2, #8
 800777c:	d10b      	bne.n	8007796 <_printf_i+0x112>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	07db      	lsls	r3, r3, #31
 8007782:	d508      	bpl.n	8007796 <_printf_i+0x112>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	bfde      	ittt	le
 800778c:	2330      	movle	r3, #48	; 0x30
 800778e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007796:	ebac 0305 	sub.w	r3, ip, r5
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	f8cd 8000 	str.w	r8, [sp]
 80077a0:	463b      	mov	r3, r7
 80077a2:	aa03      	add	r2, sp, #12
 80077a4:	4621      	mov	r1, r4
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7ff fef6 	bl	8007598 <_printf_common>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d14d      	bne.n	800784c <_printf_i+0x1c8>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	b005      	add	sp, #20
 80077b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ba:	4839      	ldr	r0, [pc, #228]	; (80078a0 <_printf_i+0x21c>)
 80077bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	6821      	ldr	r1, [r4, #0]
 80077c4:	1d1d      	adds	r5, r3, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6015      	str	r5, [r2, #0]
 80077ca:	060a      	lsls	r2, r1, #24
 80077cc:	d50b      	bpl.n	80077e6 <_printf_i+0x162>
 80077ce:	07ca      	lsls	r2, r1, #31
 80077d0:	bf44      	itt	mi
 80077d2:	f041 0120 	orrmi.w	r1, r1, #32
 80077d6:	6021      	strmi	r1, [r4, #0]
 80077d8:	b91b      	cbnz	r3, 80077e2 <_printf_i+0x15e>
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	f022 0220 	bic.w	r2, r2, #32
 80077e0:	6022      	str	r2, [r4, #0]
 80077e2:	2210      	movs	r2, #16
 80077e4:	e7b7      	b.n	8007756 <_printf_i+0xd2>
 80077e6:	064d      	lsls	r5, r1, #25
 80077e8:	bf48      	it	mi
 80077ea:	b29b      	uxthmi	r3, r3
 80077ec:	e7ef      	b.n	80077ce <_printf_i+0x14a>
 80077ee:	4665      	mov	r5, ip
 80077f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80077f4:	fb02 3311 	mls	r3, r2, r1, r3
 80077f8:	5cc3      	ldrb	r3, [r0, r3]
 80077fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077fe:	460b      	mov	r3, r1
 8007800:	2900      	cmp	r1, #0
 8007802:	d1f5      	bne.n	80077f0 <_printf_i+0x16c>
 8007804:	e7b9      	b.n	800777a <_printf_i+0xf6>
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	6961      	ldr	r1, [r4, #20]
 800780c:	1d18      	adds	r0, r3, #4
 800780e:	6010      	str	r0, [r2, #0]
 8007810:	0628      	lsls	r0, r5, #24
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	d501      	bpl.n	800781a <_printf_i+0x196>
 8007816:	6019      	str	r1, [r3, #0]
 8007818:	e002      	b.n	8007820 <_printf_i+0x19c>
 800781a:	066a      	lsls	r2, r5, #25
 800781c:	d5fb      	bpl.n	8007816 <_printf_i+0x192>
 800781e:	8019      	strh	r1, [r3, #0]
 8007820:	2300      	movs	r3, #0
 8007822:	6123      	str	r3, [r4, #16]
 8007824:	4665      	mov	r5, ip
 8007826:	e7b9      	b.n	800779c <_printf_i+0x118>
 8007828:	6813      	ldr	r3, [r2, #0]
 800782a:	1d19      	adds	r1, r3, #4
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	681d      	ldr	r5, [r3, #0]
 8007830:	6862      	ldr	r2, [r4, #4]
 8007832:	2100      	movs	r1, #0
 8007834:	4628      	mov	r0, r5
 8007836:	f7f8 fcd3 	bl	80001e0 <memchr>
 800783a:	b108      	cbz	r0, 8007840 <_printf_i+0x1bc>
 800783c:	1b40      	subs	r0, r0, r5
 800783e:	6060      	str	r0, [r4, #4]
 8007840:	6863      	ldr	r3, [r4, #4]
 8007842:	6123      	str	r3, [r4, #16]
 8007844:	2300      	movs	r3, #0
 8007846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784a:	e7a7      	b.n	800779c <_printf_i+0x118>
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	462a      	mov	r2, r5
 8007850:	4639      	mov	r1, r7
 8007852:	4630      	mov	r0, r6
 8007854:	47c0      	blx	r8
 8007856:	3001      	adds	r0, #1
 8007858:	d0aa      	beq.n	80077b0 <_printf_i+0x12c>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	079b      	lsls	r3, r3, #30
 800785e:	d413      	bmi.n	8007888 <_printf_i+0x204>
 8007860:	68e0      	ldr	r0, [r4, #12]
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	4298      	cmp	r0, r3
 8007866:	bfb8      	it	lt
 8007868:	4618      	movlt	r0, r3
 800786a:	e7a3      	b.n	80077b4 <_printf_i+0x130>
 800786c:	2301      	movs	r3, #1
 800786e:	464a      	mov	r2, r9
 8007870:	4639      	mov	r1, r7
 8007872:	4630      	mov	r0, r6
 8007874:	47c0      	blx	r8
 8007876:	3001      	adds	r0, #1
 8007878:	d09a      	beq.n	80077b0 <_printf_i+0x12c>
 800787a:	3501      	adds	r5, #1
 800787c:	68e3      	ldr	r3, [r4, #12]
 800787e:	9a03      	ldr	r2, [sp, #12]
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	42ab      	cmp	r3, r5
 8007884:	dcf2      	bgt.n	800786c <_printf_i+0x1e8>
 8007886:	e7eb      	b.n	8007860 <_printf_i+0x1dc>
 8007888:	2500      	movs	r5, #0
 800788a:	f104 0919 	add.w	r9, r4, #25
 800788e:	e7f5      	b.n	800787c <_printf_i+0x1f8>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1ac      	bne.n	80077ee <_printf_i+0x16a>
 8007894:	7803      	ldrb	r3, [r0, #0]
 8007896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800789a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800789e:	e76c      	b.n	800777a <_printf_i+0xf6>
 80078a0:	080091d6 	.word	0x080091d6
 80078a4:	080091e7 	.word	0x080091e7

080078a8 <siprintf>:
 80078a8:	b40e      	push	{r1, r2, r3}
 80078aa:	b500      	push	{lr}
 80078ac:	b09c      	sub	sp, #112	; 0x70
 80078ae:	ab1d      	add	r3, sp, #116	; 0x74
 80078b0:	9002      	str	r0, [sp, #8]
 80078b2:	9006      	str	r0, [sp, #24]
 80078b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078b8:	4809      	ldr	r0, [pc, #36]	; (80078e0 <siprintf+0x38>)
 80078ba:	9107      	str	r1, [sp, #28]
 80078bc:	9104      	str	r1, [sp, #16]
 80078be:	4909      	ldr	r1, [pc, #36]	; (80078e4 <siprintf+0x3c>)
 80078c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c4:	9105      	str	r1, [sp, #20]
 80078c6:	6800      	ldr	r0, [r0, #0]
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	a902      	add	r1, sp, #8
 80078cc:	f001 fa5c 	bl	8008d88 <_svfiprintf_r>
 80078d0:	9b02      	ldr	r3, [sp, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	b01c      	add	sp, #112	; 0x70
 80078d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078dc:	b003      	add	sp, #12
 80078de:	4770      	bx	lr
 80078e0:	20000018 	.word	0x20000018
 80078e4:	ffff0208 	.word	0xffff0208

080078e8 <quorem>:
 80078e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	6903      	ldr	r3, [r0, #16]
 80078ee:	690c      	ldr	r4, [r1, #16]
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	4680      	mov	r8, r0
 80078f4:	f2c0 8082 	blt.w	80079fc <quorem+0x114>
 80078f8:	3c01      	subs	r4, #1
 80078fa:	f101 0714 	add.w	r7, r1, #20
 80078fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007902:	f100 0614 	add.w	r6, r0, #20
 8007906:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800790a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800790e:	eb06 030c 	add.w	r3, r6, ip
 8007912:	3501      	adds	r5, #1
 8007914:	eb07 090c 	add.w	r9, r7, ip
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	fbb0 f5f5 	udiv	r5, r0, r5
 800791e:	b395      	cbz	r5, 8007986 <quorem+0x9e>
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	4638      	mov	r0, r7
 8007926:	46b6      	mov	lr, r6
 8007928:	46d3      	mov	fp, sl
 800792a:	f850 2b04 	ldr.w	r2, [r0], #4
 800792e:	b293      	uxth	r3, r2
 8007930:	fb05 a303 	mla	r3, r5, r3, sl
 8007934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007938:	b29b      	uxth	r3, r3
 800793a:	ebab 0303 	sub.w	r3, fp, r3
 800793e:	0c12      	lsrs	r2, r2, #16
 8007940:	f8de b000 	ldr.w	fp, [lr]
 8007944:	fb05 a202 	mla	r2, r5, r2, sl
 8007948:	fa13 f38b 	uxtah	r3, r3, fp
 800794c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007950:	fa1f fb82 	uxth.w	fp, r2
 8007954:	f8de 2000 	ldr.w	r2, [lr]
 8007958:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800795c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007966:	4581      	cmp	r9, r0
 8007968:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800796c:	f84e 3b04 	str.w	r3, [lr], #4
 8007970:	d2db      	bcs.n	800792a <quorem+0x42>
 8007972:	f856 300c 	ldr.w	r3, [r6, ip]
 8007976:	b933      	cbnz	r3, 8007986 <quorem+0x9e>
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	3b04      	subs	r3, #4
 800797c:	429e      	cmp	r6, r3
 800797e:	461a      	mov	r2, r3
 8007980:	d330      	bcc.n	80079e4 <quorem+0xfc>
 8007982:	f8c8 4010 	str.w	r4, [r8, #16]
 8007986:	4640      	mov	r0, r8
 8007988:	f001 f828 	bl	80089dc <__mcmp>
 800798c:	2800      	cmp	r0, #0
 800798e:	db25      	blt.n	80079dc <quorem+0xf4>
 8007990:	3501      	adds	r5, #1
 8007992:	4630      	mov	r0, r6
 8007994:	f04f 0c00 	mov.w	ip, #0
 8007998:	f857 2b04 	ldr.w	r2, [r7], #4
 800799c:	f8d0 e000 	ldr.w	lr, [r0]
 80079a0:	b293      	uxth	r3, r2
 80079a2:	ebac 0303 	sub.w	r3, ip, r3
 80079a6:	0c12      	lsrs	r2, r2, #16
 80079a8:	fa13 f38e 	uxtah	r3, r3, lr
 80079ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ba:	45b9      	cmp	r9, r7
 80079bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079c0:	f840 3b04 	str.w	r3, [r0], #4
 80079c4:	d2e8      	bcs.n	8007998 <quorem+0xb0>
 80079c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80079ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80079ce:	b92a      	cbnz	r2, 80079dc <quorem+0xf4>
 80079d0:	3b04      	subs	r3, #4
 80079d2:	429e      	cmp	r6, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	d30b      	bcc.n	80079f0 <quorem+0x108>
 80079d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80079dc:	4628      	mov	r0, r5
 80079de:	b003      	add	sp, #12
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	d1ca      	bne.n	8007982 <quorem+0x9a>
 80079ec:	3c01      	subs	r4, #1
 80079ee:	e7c5      	b.n	800797c <quorem+0x94>
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	3b04      	subs	r3, #4
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d1ef      	bne.n	80079d8 <quorem+0xf0>
 80079f8:	3c01      	subs	r4, #1
 80079fa:	e7ea      	b.n	80079d2 <quorem+0xea>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7ee      	b.n	80079de <quorem+0xf6>

08007a00 <_dtoa_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ec57 6b10 	vmov	r6, r7, d0
 8007a08:	b097      	sub	sp, #92	; 0x5c
 8007a0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a0c:	9106      	str	r1, [sp, #24]
 8007a0e:	4604      	mov	r4, r0
 8007a10:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a12:	9312      	str	r3, [sp, #72]	; 0x48
 8007a14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a18:	e9cd 6700 	strd	r6, r7, [sp]
 8007a1c:	b93d      	cbnz	r5, 8007a2e <_dtoa_r+0x2e>
 8007a1e:	2010      	movs	r0, #16
 8007a20:	f000 fdb4 	bl	800858c <malloc>
 8007a24:	6260      	str	r0, [r4, #36]	; 0x24
 8007a26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a2a:	6005      	str	r5, [r0, #0]
 8007a2c:	60c5      	str	r5, [r0, #12]
 8007a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a30:	6819      	ldr	r1, [r3, #0]
 8007a32:	b151      	cbz	r1, 8007a4a <_dtoa_r+0x4a>
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	604a      	str	r2, [r1, #4]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4093      	lsls	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fdeb 	bl	800861a <_Bfree>
 8007a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	1e3b      	subs	r3, r7, #0
 8007a4c:	bfbb      	ittet	lt
 8007a4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a52:	9301      	strlt	r3, [sp, #4]
 8007a54:	2300      	movge	r3, #0
 8007a56:	2201      	movlt	r2, #1
 8007a58:	bfac      	ite	ge
 8007a5a:	f8c8 3000 	strge.w	r3, [r8]
 8007a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8007a62:	4baf      	ldr	r3, [pc, #700]	; (8007d20 <_dtoa_r+0x320>)
 8007a64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a68:	ea33 0308 	bics.w	r3, r3, r8
 8007a6c:	d114      	bne.n	8007a98 <_dtoa_r+0x98>
 8007a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a70:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	b923      	cbnz	r3, 8007a84 <_dtoa_r+0x84>
 8007a7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f000 8542 	beq.w	8008508 <_dtoa_r+0xb08>
 8007a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007d34 <_dtoa_r+0x334>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8544 	beq.w	8008518 <_dtoa_r+0xb18>
 8007a90:	f10b 0303 	add.w	r3, fp, #3
 8007a94:	f000 bd3e 	b.w	8008514 <_dtoa_r+0xb14>
 8007a98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	4639      	mov	r1, r7
 8007aa4:	f7f9 f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	b168      	cbz	r0, 8007ac8 <_dtoa_r+0xc8>
 8007aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007aae:	2301      	movs	r3, #1
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8524 	beq.w	8008502 <_dtoa_r+0xb02>
 8007aba:	4b9a      	ldr	r3, [pc, #616]	; (8007d24 <_dtoa_r+0x324>)
 8007abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007abe:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	f000 bd28 	b.w	8008518 <_dtoa_r+0xb18>
 8007ac8:	aa14      	add	r2, sp, #80	; 0x50
 8007aca:	a915      	add	r1, sp, #84	; 0x54
 8007acc:	ec47 6b10 	vmov	d0, r6, r7
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fffa 	bl	8008aca <__d2b>
 8007ad6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ada:	9004      	str	r0, [sp, #16]
 8007adc:	2d00      	cmp	r5, #0
 8007ade:	d07c      	beq.n	8007bda <_dtoa_r+0x1da>
 8007ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ae4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007ae8:	46b2      	mov	sl, r6
 8007aea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007af2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b8b      	ldr	r3, [pc, #556]	; (8007d28 <_dtoa_r+0x328>)
 8007afa:	4650      	mov	r0, sl
 8007afc:	4659      	mov	r1, fp
 8007afe:	f7f8 fbc3 	bl	8000288 <__aeabi_dsub>
 8007b02:	a381      	add	r3, pc, #516	; (adr r3, 8007d08 <_dtoa_r+0x308>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fd76 	bl	80005f8 <__aeabi_dmul>
 8007b0c:	a380      	add	r3, pc, #512	; (adr r3, 8007d10 <_dtoa_r+0x310>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f8 fbbb 	bl	800028c <__adddf3>
 8007b16:	4606      	mov	r6, r0
 8007b18:	4628      	mov	r0, r5
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	f7f8 fd02 	bl	8000524 <__aeabi_i2d>
 8007b20:	a37d      	add	r3, pc, #500	; (adr r3, 8007d18 <_dtoa_r+0x318>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fd67 	bl	80005f8 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4639      	mov	r1, r7
 8007b32:	f7f8 fbab 	bl	800028c <__adddf3>
 8007b36:	4606      	mov	r6, r0
 8007b38:	460f      	mov	r7, r1
 8007b3a:	f7f9 f80d 	bl	8000b58 <__aeabi_d2iz>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4682      	mov	sl, r0
 8007b42:	2300      	movs	r3, #0
 8007b44:	4630      	mov	r0, r6
 8007b46:	4639      	mov	r1, r7
 8007b48:	f7f8 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8007b4c:	b148      	cbz	r0, 8007b62 <_dtoa_r+0x162>
 8007b4e:	4650      	mov	r0, sl
 8007b50:	f7f8 fce8 	bl	8000524 <__aeabi_i2d>
 8007b54:	4632      	mov	r2, r6
 8007b56:	463b      	mov	r3, r7
 8007b58:	f7f8 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5c:	b908      	cbnz	r0, 8007b62 <_dtoa_r+0x162>
 8007b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b62:	f1ba 0f16 	cmp.w	sl, #22
 8007b66:	d859      	bhi.n	8007c1c <_dtoa_r+0x21c>
 8007b68:	4970      	ldr	r1, [pc, #448]	; (8007d2c <_dtoa_r+0x32c>)
 8007b6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b76:	f7f8 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d050      	beq.n	8007c20 <_dtoa_r+0x220>
 8007b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b82:	2300      	movs	r3, #0
 8007b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b88:	1b5d      	subs	r5, r3, r5
 8007b8a:	f1b5 0801 	subs.w	r8, r5, #1
 8007b8e:	bf49      	itett	mi
 8007b90:	f1c5 0301 	rsbmi	r3, r5, #1
 8007b94:	2300      	movpl	r3, #0
 8007b96:	9305      	strmi	r3, [sp, #20]
 8007b98:	f04f 0800 	movmi.w	r8, #0
 8007b9c:	bf58      	it	pl
 8007b9e:	9305      	strpl	r3, [sp, #20]
 8007ba0:	f1ba 0f00 	cmp.w	sl, #0
 8007ba4:	db3e      	blt.n	8007c24 <_dtoa_r+0x224>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	44d0      	add	r8, sl
 8007baa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007bae:	9307      	str	r3, [sp, #28]
 8007bb0:	9b06      	ldr	r3, [sp, #24]
 8007bb2:	2b09      	cmp	r3, #9
 8007bb4:	f200 8090 	bhi.w	8007cd8 <_dtoa_r+0x2d8>
 8007bb8:	2b05      	cmp	r3, #5
 8007bba:	bfc4      	itt	gt
 8007bbc:	3b04      	subgt	r3, #4
 8007bbe:	9306      	strgt	r3, [sp, #24]
 8007bc0:	9b06      	ldr	r3, [sp, #24]
 8007bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bc6:	bfcc      	ite	gt
 8007bc8:	2500      	movgt	r5, #0
 8007bca:	2501      	movle	r5, #1
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	f200 808f 	bhi.w	8007cf0 <_dtoa_r+0x2f0>
 8007bd2:	e8df f003 	tbb	[pc, r3]
 8007bd6:	7f7d      	.short	0x7f7d
 8007bd8:	7131      	.short	0x7131
 8007bda:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007bde:	441d      	add	r5, r3
 8007be0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007be4:	2820      	cmp	r0, #32
 8007be6:	dd13      	ble.n	8007c10 <_dtoa_r+0x210>
 8007be8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007bec:	9b00      	ldr	r3, [sp, #0]
 8007bee:	fa08 f800 	lsl.w	r8, r8, r0
 8007bf2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007bf6:	fa23 f000 	lsr.w	r0, r3, r0
 8007bfa:	ea48 0000 	orr.w	r0, r8, r0
 8007bfe:	f7f8 fc81 	bl	8000504 <__aeabi_ui2d>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4682      	mov	sl, r0
 8007c06:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007c0a:	3d01      	subs	r5, #1
 8007c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c0e:	e772      	b.n	8007af6 <_dtoa_r+0xf6>
 8007c10:	9b00      	ldr	r3, [sp, #0]
 8007c12:	f1c0 0020 	rsb	r0, r0, #32
 8007c16:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1a:	e7f0      	b.n	8007bfe <_dtoa_r+0x1fe>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e7b1      	b.n	8007b84 <_dtoa_r+0x184>
 8007c20:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c22:	e7b0      	b.n	8007b86 <_dtoa_r+0x186>
 8007c24:	9b05      	ldr	r3, [sp, #20]
 8007c26:	eba3 030a 	sub.w	r3, r3, sl
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	f1ca 0300 	rsb	r3, sl, #0
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	2300      	movs	r3, #0
 8007c34:	930e      	str	r3, [sp, #56]	; 0x38
 8007c36:	e7bb      	b.n	8007bb0 <_dtoa_r+0x1b0>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd59      	ble.n	8007cf6 <_dtoa_r+0x2f6>
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	4699      	mov	r9, r3
 8007c46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c48:	2200      	movs	r2, #0
 8007c4a:	6072      	str	r2, [r6, #4]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	f102 0014 	add.w	r0, r2, #20
 8007c52:	4298      	cmp	r0, r3
 8007c54:	6871      	ldr	r1, [r6, #4]
 8007c56:	d953      	bls.n	8007d00 <_dtoa_r+0x300>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f000 fcaa 	bl	80085b2 <_Balloc>
 8007c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c60:	6030      	str	r0, [r6, #0]
 8007c62:	f1b9 0f0e 	cmp.w	r9, #14
 8007c66:	f8d3 b000 	ldr.w	fp, [r3]
 8007c6a:	f200 80e6 	bhi.w	8007e3a <_dtoa_r+0x43a>
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	f000 80e3 	beq.w	8007e3a <_dtoa_r+0x43a>
 8007c74:	ed9d 7b00 	vldr	d7, [sp]
 8007c78:	f1ba 0f00 	cmp.w	sl, #0
 8007c7c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007c80:	dd74      	ble.n	8007d6c <_dtoa_r+0x36c>
 8007c82:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <_dtoa_r+0x32c>)
 8007c84:	f00a 030f 	and.w	r3, sl, #15
 8007c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c8c:	ed93 7b00 	vldr	d7, [r3]
 8007c90:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007c94:	06f0      	lsls	r0, r6, #27
 8007c96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007c9a:	d565      	bpl.n	8007d68 <_dtoa_r+0x368>
 8007c9c:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <_dtoa_r+0x330>)
 8007c9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ca2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ca6:	f7f8 fdd1 	bl	800084c <__aeabi_ddiv>
 8007caa:	e9cd 0100 	strd	r0, r1, [sp]
 8007cae:	f006 060f 	and.w	r6, r6, #15
 8007cb2:	2503      	movs	r5, #3
 8007cb4:	4f1e      	ldr	r7, [pc, #120]	; (8007d30 <_dtoa_r+0x330>)
 8007cb6:	e04c      	b.n	8007d52 <_dtoa_r+0x352>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	930a      	str	r3, [sp, #40]	; 0x28
 8007cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cbe:	4453      	add	r3, sl
 8007cc0:	f103 0901 	add.w	r9, r3, #1
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	bfb8      	it	lt
 8007ccc:	2301      	movlt	r3, #1
 8007cce:	e7ba      	b.n	8007c46 <_dtoa_r+0x246>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e7b2      	b.n	8007c3a <_dtoa_r+0x23a>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e7f0      	b.n	8007cba <_dtoa_r+0x2ba>
 8007cd8:	2501      	movs	r5, #1
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9306      	str	r3, [sp, #24]
 8007cde:	950a      	str	r5, [sp, #40]	; 0x28
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce4:	9302      	str	r3, [sp, #8]
 8007ce6:	4699      	mov	r9, r3
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2312      	movs	r3, #18
 8007cec:	920b      	str	r2, [sp, #44]	; 0x2c
 8007cee:	e7aa      	b.n	8007c46 <_dtoa_r+0x246>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf4:	e7f4      	b.n	8007ce0 <_dtoa_r+0x2e0>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	4699      	mov	r9, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	e7f5      	b.n	8007cec <_dtoa_r+0x2ec>
 8007d00:	3101      	adds	r1, #1
 8007d02:	6071      	str	r1, [r6, #4]
 8007d04:	0052      	lsls	r2, r2, #1
 8007d06:	e7a2      	b.n	8007c4e <_dtoa_r+0x24e>
 8007d08:	636f4361 	.word	0x636f4361
 8007d0c:	3fd287a7 	.word	0x3fd287a7
 8007d10:	8b60c8b3 	.word	0x8b60c8b3
 8007d14:	3fc68a28 	.word	0x3fc68a28
 8007d18:	509f79fb 	.word	0x509f79fb
 8007d1c:	3fd34413 	.word	0x3fd34413
 8007d20:	7ff00000 	.word	0x7ff00000
 8007d24:	080091d5 	.word	0x080091d5
 8007d28:	3ff80000 	.word	0x3ff80000
 8007d2c:	08009230 	.word	0x08009230
 8007d30:	08009208 	.word	0x08009208
 8007d34:	08009201 	.word	0x08009201
 8007d38:	07f1      	lsls	r1, r6, #31
 8007d3a:	d508      	bpl.n	8007d4e <_dtoa_r+0x34e>
 8007d3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d44:	f7f8 fc58 	bl	80005f8 <__aeabi_dmul>
 8007d48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	1076      	asrs	r6, r6, #1
 8007d50:	3708      	adds	r7, #8
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	d1f0      	bne.n	8007d38 <_dtoa_r+0x338>
 8007d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5e:	f7f8 fd75 	bl	800084c <__aeabi_ddiv>
 8007d62:	e9cd 0100 	strd	r0, r1, [sp]
 8007d66:	e01a      	b.n	8007d9e <_dtoa_r+0x39e>
 8007d68:	2502      	movs	r5, #2
 8007d6a:	e7a3      	b.n	8007cb4 <_dtoa_r+0x2b4>
 8007d6c:	f000 80a0 	beq.w	8007eb0 <_dtoa_r+0x4b0>
 8007d70:	f1ca 0600 	rsb	r6, sl, #0
 8007d74:	4b9f      	ldr	r3, [pc, #636]	; (8007ff4 <_dtoa_r+0x5f4>)
 8007d76:	4fa0      	ldr	r7, [pc, #640]	; (8007ff8 <_dtoa_r+0x5f8>)
 8007d78:	f006 020f 	and.w	r2, r6, #15
 8007d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8007d90:	1136      	asrs	r6, r6, #4
 8007d92:	2300      	movs	r3, #0
 8007d94:	2502      	movs	r5, #2
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	d17f      	bne.n	8007e9a <_dtoa_r+0x49a>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e1      	bne.n	8007d62 <_dtoa_r+0x362>
 8007d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8087 	beq.w	8007eb4 <_dtoa_r+0x4b4>
 8007da6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b93      	ldr	r3, [pc, #588]	; (8007ffc <_dtoa_r+0x5fc>)
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fe93 	bl	8000adc <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d07c      	beq.n	8007eb4 <_dtoa_r+0x4b4>
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	d079      	beq.n	8007eb4 <_dtoa_r+0x4b4>
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dd35      	ble.n	8007e32 <_dtoa_r+0x432>
 8007dc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007dca:	9308      	str	r3, [sp, #32]
 8007dcc:	4639      	mov	r1, r7
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4b8b      	ldr	r3, [pc, #556]	; (8008000 <_dtoa_r+0x600>)
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7f8 fc10 	bl	80005f8 <__aeabi_dmul>
 8007dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8007ddc:	9f02      	ldr	r7, [sp, #8]
 8007dde:	3501      	adds	r5, #1
 8007de0:	4628      	mov	r0, r5
 8007de2:	f7f8 fb9f 	bl	8000524 <__aeabi_i2d>
 8007de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dea:	f7f8 fc05 	bl	80005f8 <__aeabi_dmul>
 8007dee:	2200      	movs	r2, #0
 8007df0:	4b84      	ldr	r3, [pc, #528]	; (8008004 <_dtoa_r+0x604>)
 8007df2:	f7f8 fa4b 	bl	800028c <__adddf3>
 8007df6:	4605      	mov	r5, r0
 8007df8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007dfc:	2f00      	cmp	r7, #0
 8007dfe:	d15d      	bne.n	8007ebc <_dtoa_r+0x4bc>
 8007e00:	2200      	movs	r2, #0
 8007e02:	4b81      	ldr	r3, [pc, #516]	; (8008008 <_dtoa_r+0x608>)
 8007e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e08:	f7f8 fa3e 	bl	8000288 <__aeabi_dsub>
 8007e0c:	462a      	mov	r2, r5
 8007e0e:	4633      	mov	r3, r6
 8007e10:	e9cd 0100 	strd	r0, r1, [sp]
 8007e14:	f7f8 fe80 	bl	8000b18 <__aeabi_dcmpgt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	f040 8288 	bne.w	800832e <_dtoa_r+0x92e>
 8007e1e:	462a      	mov	r2, r5
 8007e20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e28:	f7f8 fe58 	bl	8000adc <__aeabi_dcmplt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f040 827c 	bne.w	800832a <_dtoa_r+0x92a>
 8007e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e36:	e9cd 2300 	strd	r2, r3, [sp]
 8007e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f2c0 8150 	blt.w	80080e2 <_dtoa_r+0x6e2>
 8007e42:	f1ba 0f0e 	cmp.w	sl, #14
 8007e46:	f300 814c 	bgt.w	80080e2 <_dtoa_r+0x6e2>
 8007e4a:	4b6a      	ldr	r3, [pc, #424]	; (8007ff4 <_dtoa_r+0x5f4>)
 8007e4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e50:	ed93 7b00 	vldr	d7, [r3]
 8007e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e5c:	f280 80d8 	bge.w	8008010 <_dtoa_r+0x610>
 8007e60:	f1b9 0f00 	cmp.w	r9, #0
 8007e64:	f300 80d4 	bgt.w	8008010 <_dtoa_r+0x610>
 8007e68:	f040 825e 	bne.w	8008328 <_dtoa_r+0x928>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4b66      	ldr	r3, [pc, #408]	; (8008008 <_dtoa_r+0x608>)
 8007e70:	ec51 0b17 	vmov	r0, r1, d7
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e7c:	f7f8 fe42 	bl	8000b04 <__aeabi_dcmpge>
 8007e80:	464f      	mov	r7, r9
 8007e82:	464e      	mov	r6, r9
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f040 8234 	bne.w	80082f2 <_dtoa_r+0x8f2>
 8007e8a:	2331      	movs	r3, #49	; 0x31
 8007e8c:	f10b 0501 	add.w	r5, fp, #1
 8007e90:	f88b 3000 	strb.w	r3, [fp]
 8007e94:	f10a 0a01 	add.w	sl, sl, #1
 8007e98:	e22f      	b.n	80082fa <_dtoa_r+0x8fa>
 8007e9a:	07f2      	lsls	r2, r6, #31
 8007e9c:	d505      	bpl.n	8007eaa <_dtoa_r+0x4aa>
 8007e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea2:	f7f8 fba9 	bl	80005f8 <__aeabi_dmul>
 8007ea6:	3501      	adds	r5, #1
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	1076      	asrs	r6, r6, #1
 8007eac:	3708      	adds	r7, #8
 8007eae:	e772      	b.n	8007d96 <_dtoa_r+0x396>
 8007eb0:	2502      	movs	r5, #2
 8007eb2:	e774      	b.n	8007d9e <_dtoa_r+0x39e>
 8007eb4:	f8cd a020 	str.w	sl, [sp, #32]
 8007eb8:	464f      	mov	r7, r9
 8007eba:	e791      	b.n	8007de0 <_dtoa_r+0x3e0>
 8007ebc:	4b4d      	ldr	r3, [pc, #308]	; (8007ff4 <_dtoa_r+0x5f4>)
 8007ebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ec2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d047      	beq.n	8007f5c <_dtoa_r+0x55c>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	494e      	ldr	r1, [pc, #312]	; (800800c <_dtoa_r+0x60c>)
 8007ed4:	f7f8 fcba 	bl	800084c <__aeabi_ddiv>
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4633      	mov	r3, r6
 8007edc:	f7f8 f9d4 	bl	8000288 <__aeabi_dsub>
 8007ee0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ee4:	465d      	mov	r5, fp
 8007ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eea:	f7f8 fe35 	bl	8000b58 <__aeabi_d2iz>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	f7f8 fb18 	bl	8000524 <__aeabi_i2d>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007efc:	f7f8 f9c4 	bl	8000288 <__aeabi_dsub>
 8007f00:	3630      	adds	r6, #48	; 0x30
 8007f02:	f805 6b01 	strb.w	r6, [r5], #1
 8007f06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f0e:	f7f8 fde5 	bl	8000adc <__aeabi_dcmplt>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d163      	bne.n	8007fde <_dtoa_r+0x5de>
 8007f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	4937      	ldr	r1, [pc, #220]	; (8007ffc <_dtoa_r+0x5fc>)
 8007f1e:	f7f8 f9b3 	bl	8000288 <__aeabi_dsub>
 8007f22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f26:	f7f8 fdd9 	bl	8000adc <__aeabi_dcmplt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	f040 80b7 	bne.w	800809e <_dtoa_r+0x69e>
 8007f30:	eba5 030b 	sub.w	r3, r5, fp
 8007f34:	429f      	cmp	r7, r3
 8007f36:	f77f af7c 	ble.w	8007e32 <_dtoa_r+0x432>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4b30      	ldr	r3, [pc, #192]	; (8008000 <_dtoa_r+0x600>)
 8007f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f42:	f7f8 fb59 	bl	80005f8 <__aeabi_dmul>
 8007f46:	2200      	movs	r2, #0
 8007f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f4c:	4b2c      	ldr	r3, [pc, #176]	; (8008000 <_dtoa_r+0x600>)
 8007f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f52:	f7f8 fb51 	bl	80005f8 <__aeabi_dmul>
 8007f56:	e9cd 0100 	strd	r0, r1, [sp]
 8007f5a:	e7c4      	b.n	8007ee6 <_dtoa_r+0x4e6>
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4633      	mov	r3, r6
 8007f60:	f7f8 fb4a 	bl	80005f8 <__aeabi_dmul>
 8007f64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f68:	eb0b 0507 	add.w	r5, fp, r7
 8007f6c:	465e      	mov	r6, fp
 8007f6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f72:	f7f8 fdf1 	bl	8000b58 <__aeabi_d2iz>
 8007f76:	4607      	mov	r7, r0
 8007f78:	f7f8 fad4 	bl	8000524 <__aeabi_i2d>
 8007f7c:	3730      	adds	r7, #48	; 0x30
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f86:	f7f8 f97f 	bl	8000288 <__aeabi_dsub>
 8007f8a:	f806 7b01 	strb.w	r7, [r6], #1
 8007f8e:	42ae      	cmp	r6, r5
 8007f90:	e9cd 0100 	strd	r0, r1, [sp]
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	d126      	bne.n	8007fe8 <_dtoa_r+0x5e8>
 8007f9a:	4b1c      	ldr	r3, [pc, #112]	; (800800c <_dtoa_r+0x60c>)
 8007f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fa0:	f7f8 f974 	bl	800028c <__adddf3>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fac:	f7f8 fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d174      	bne.n	800809e <_dtoa_r+0x69e>
 8007fb4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007fb8:	2000      	movs	r0, #0
 8007fba:	4914      	ldr	r1, [pc, #80]	; (800800c <_dtoa_r+0x60c>)
 8007fbc:	f7f8 f964 	bl	8000288 <__aeabi_dsub>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fc8:	f7f8 fd88 	bl	8000adc <__aeabi_dcmplt>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	f43f af30 	beq.w	8007e32 <_dtoa_r+0x432>
 8007fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fdc:	d002      	beq.n	8007fe4 <_dtoa_r+0x5e4>
 8007fde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007fe2:	e04a      	b.n	800807a <_dtoa_r+0x67a>
 8007fe4:	4615      	mov	r5, r2
 8007fe6:	e7f4      	b.n	8007fd2 <_dtoa_r+0x5d2>
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <_dtoa_r+0x600>)
 8007fea:	f7f8 fb05 	bl	80005f8 <__aeabi_dmul>
 8007fee:	e9cd 0100 	strd	r0, r1, [sp]
 8007ff2:	e7bc      	b.n	8007f6e <_dtoa_r+0x56e>
 8007ff4:	08009230 	.word	0x08009230
 8007ff8:	08009208 	.word	0x08009208
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	40240000 	.word	0x40240000
 8008004:	401c0000 	.word	0x401c0000
 8008008:	40140000 	.word	0x40140000
 800800c:	3fe00000 	.word	0x3fe00000
 8008010:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008014:	465d      	mov	r5, fp
 8008016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800801a:	4630      	mov	r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 fc15 	bl	800084c <__aeabi_ddiv>
 8008022:	f7f8 fd99 	bl	8000b58 <__aeabi_d2iz>
 8008026:	4680      	mov	r8, r0
 8008028:	f7f8 fa7c 	bl	8000524 <__aeabi_i2d>
 800802c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008040:	f7f8 f922 	bl	8000288 <__aeabi_dsub>
 8008044:	f805 6b01 	strb.w	r6, [r5], #1
 8008048:	eba5 060b 	sub.w	r6, r5, fp
 800804c:	45b1      	cmp	r9, r6
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	d139      	bne.n	80080c8 <_dtoa_r+0x6c8>
 8008054:	f7f8 f91a 	bl	800028c <__adddf3>
 8008058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800805c:	4606      	mov	r6, r0
 800805e:	460f      	mov	r7, r1
 8008060:	f7f8 fd5a 	bl	8000b18 <__aeabi_dcmpgt>
 8008064:	b9c8      	cbnz	r0, 800809a <_dtoa_r+0x69a>
 8008066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800806a:	4630      	mov	r0, r6
 800806c:	4639      	mov	r1, r7
 800806e:	f7f8 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008072:	b110      	cbz	r0, 800807a <_dtoa_r+0x67a>
 8008074:	f018 0f01 	tst.w	r8, #1
 8008078:	d10f      	bne.n	800809a <_dtoa_r+0x69a>
 800807a:	9904      	ldr	r1, [sp, #16]
 800807c:	4620      	mov	r0, r4
 800807e:	f000 facc 	bl	800861a <_Bfree>
 8008082:	2300      	movs	r3, #0
 8008084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008086:	702b      	strb	r3, [r5, #0]
 8008088:	f10a 0301 	add.w	r3, sl, #1
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8241 	beq.w	8008518 <_dtoa_r+0xb18>
 8008096:	601d      	str	r5, [r3, #0]
 8008098:	e23e      	b.n	8008518 <_dtoa_r+0xb18>
 800809a:	f8cd a020 	str.w	sl, [sp, #32]
 800809e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080a2:	2a39      	cmp	r2, #57	; 0x39
 80080a4:	f105 33ff 	add.w	r3, r5, #4294967295
 80080a8:	d108      	bne.n	80080bc <_dtoa_r+0x6bc>
 80080aa:	459b      	cmp	fp, r3
 80080ac:	d10a      	bne.n	80080c4 <_dtoa_r+0x6c4>
 80080ae:	9b08      	ldr	r3, [sp, #32]
 80080b0:	3301      	adds	r3, #1
 80080b2:	9308      	str	r3, [sp, #32]
 80080b4:	2330      	movs	r3, #48	; 0x30
 80080b6:	f88b 3000 	strb.w	r3, [fp]
 80080ba:	465b      	mov	r3, fp
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	3201      	adds	r2, #1
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e78c      	b.n	8007fde <_dtoa_r+0x5de>
 80080c4:	461d      	mov	r5, r3
 80080c6:	e7ea      	b.n	800809e <_dtoa_r+0x69e>
 80080c8:	2200      	movs	r2, #0
 80080ca:	4b9b      	ldr	r3, [pc, #620]	; (8008338 <_dtoa_r+0x938>)
 80080cc:	f7f8 fa94 	bl	80005f8 <__aeabi_dmul>
 80080d0:	2200      	movs	r2, #0
 80080d2:	2300      	movs	r3, #0
 80080d4:	4606      	mov	r6, r0
 80080d6:	460f      	mov	r7, r1
 80080d8:	f7f8 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d09a      	beq.n	8008016 <_dtoa_r+0x616>
 80080e0:	e7cb      	b.n	800807a <_dtoa_r+0x67a>
 80080e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e4:	2a00      	cmp	r2, #0
 80080e6:	f000 808b 	beq.w	8008200 <_dtoa_r+0x800>
 80080ea:	9a06      	ldr	r2, [sp, #24]
 80080ec:	2a01      	cmp	r2, #1
 80080ee:	dc6e      	bgt.n	80081ce <_dtoa_r+0x7ce>
 80080f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	d067      	beq.n	80081c6 <_dtoa_r+0x7c6>
 80080f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080fa:	9f07      	ldr	r7, [sp, #28]
 80080fc:	9d05      	ldr	r5, [sp, #20]
 80080fe:	9a05      	ldr	r2, [sp, #20]
 8008100:	2101      	movs	r1, #1
 8008102:	441a      	add	r2, r3
 8008104:	4620      	mov	r0, r4
 8008106:	9205      	str	r2, [sp, #20]
 8008108:	4498      	add	r8, r3
 800810a:	f000 fb26 	bl	800875a <__i2b>
 800810e:	4606      	mov	r6, r0
 8008110:	2d00      	cmp	r5, #0
 8008112:	dd0c      	ble.n	800812e <_dtoa_r+0x72e>
 8008114:	f1b8 0f00 	cmp.w	r8, #0
 8008118:	dd09      	ble.n	800812e <_dtoa_r+0x72e>
 800811a:	4545      	cmp	r5, r8
 800811c:	9a05      	ldr	r2, [sp, #20]
 800811e:	462b      	mov	r3, r5
 8008120:	bfa8      	it	ge
 8008122:	4643      	movge	r3, r8
 8008124:	1ad2      	subs	r2, r2, r3
 8008126:	9205      	str	r2, [sp, #20]
 8008128:	1aed      	subs	r5, r5, r3
 800812a:	eba8 0803 	sub.w	r8, r8, r3
 800812e:	9b07      	ldr	r3, [sp, #28]
 8008130:	b1eb      	cbz	r3, 800816e <_dtoa_r+0x76e>
 8008132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	d067      	beq.n	8008208 <_dtoa_r+0x808>
 8008138:	b18f      	cbz	r7, 800815e <_dtoa_r+0x75e>
 800813a:	4631      	mov	r1, r6
 800813c:	463a      	mov	r2, r7
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fbaa 	bl	8008898 <__pow5mult>
 8008144:	9a04      	ldr	r2, [sp, #16]
 8008146:	4601      	mov	r1, r0
 8008148:	4606      	mov	r6, r0
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fb0e 	bl	800876c <__multiply>
 8008150:	9904      	ldr	r1, [sp, #16]
 8008152:	9008      	str	r0, [sp, #32]
 8008154:	4620      	mov	r0, r4
 8008156:	f000 fa60 	bl	800861a <_Bfree>
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	1bda      	subs	r2, r3, r7
 8008162:	d004      	beq.n	800816e <_dtoa_r+0x76e>
 8008164:	9904      	ldr	r1, [sp, #16]
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fb96 	bl	8008898 <__pow5mult>
 800816c:	9004      	str	r0, [sp, #16]
 800816e:	2101      	movs	r1, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f000 faf2 	bl	800875a <__i2b>
 8008176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008178:	4607      	mov	r7, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 81d0 	beq.w	8008520 <_dtoa_r+0xb20>
 8008180:	461a      	mov	r2, r3
 8008182:	4601      	mov	r1, r0
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fb87 	bl	8008898 <__pow5mult>
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	2b01      	cmp	r3, #1
 800818e:	4607      	mov	r7, r0
 8008190:	dc40      	bgt.n	8008214 <_dtoa_r+0x814>
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d139      	bne.n	800820c <_dtoa_r+0x80c>
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d136      	bne.n	8008210 <_dtoa_r+0x810>
 80081a2:	9b01      	ldr	r3, [sp, #4]
 80081a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081a8:	0d1b      	lsrs	r3, r3, #20
 80081aa:	051b      	lsls	r3, r3, #20
 80081ac:	b12b      	cbz	r3, 80081ba <_dtoa_r+0x7ba>
 80081ae:	9b05      	ldr	r3, [sp, #20]
 80081b0:	3301      	adds	r3, #1
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	f108 0801 	add.w	r8, r8, #1
 80081b8:	2301      	movs	r3, #1
 80081ba:	9307      	str	r3, [sp, #28]
 80081bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d12a      	bne.n	8008218 <_dtoa_r+0x818>
 80081c2:	2001      	movs	r0, #1
 80081c4:	e030      	b.n	8008228 <_dtoa_r+0x828>
 80081c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081cc:	e795      	b.n	80080fa <_dtoa_r+0x6fa>
 80081ce:	9b07      	ldr	r3, [sp, #28]
 80081d0:	f109 37ff 	add.w	r7, r9, #4294967295
 80081d4:	42bb      	cmp	r3, r7
 80081d6:	bfbf      	itttt	lt
 80081d8:	9b07      	ldrlt	r3, [sp, #28]
 80081da:	9707      	strlt	r7, [sp, #28]
 80081dc:	1afa      	sublt	r2, r7, r3
 80081de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80081e0:	bfbb      	ittet	lt
 80081e2:	189b      	addlt	r3, r3, r2
 80081e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80081e6:	1bdf      	subge	r7, r3, r7
 80081e8:	2700      	movlt	r7, #0
 80081ea:	f1b9 0f00 	cmp.w	r9, #0
 80081ee:	bfb5      	itete	lt
 80081f0:	9b05      	ldrlt	r3, [sp, #20]
 80081f2:	9d05      	ldrge	r5, [sp, #20]
 80081f4:	eba3 0509 	sublt.w	r5, r3, r9
 80081f8:	464b      	movge	r3, r9
 80081fa:	bfb8      	it	lt
 80081fc:	2300      	movlt	r3, #0
 80081fe:	e77e      	b.n	80080fe <_dtoa_r+0x6fe>
 8008200:	9f07      	ldr	r7, [sp, #28]
 8008202:	9d05      	ldr	r5, [sp, #20]
 8008204:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008206:	e783      	b.n	8008110 <_dtoa_r+0x710>
 8008208:	9a07      	ldr	r2, [sp, #28]
 800820a:	e7ab      	b.n	8008164 <_dtoa_r+0x764>
 800820c:	2300      	movs	r3, #0
 800820e:	e7d4      	b.n	80081ba <_dtoa_r+0x7ba>
 8008210:	9b00      	ldr	r3, [sp, #0]
 8008212:	e7d2      	b.n	80081ba <_dtoa_r+0x7ba>
 8008214:	2300      	movs	r3, #0
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800821e:	6918      	ldr	r0, [r3, #16]
 8008220:	f000 fa4d 	bl	80086be <__hi0bits>
 8008224:	f1c0 0020 	rsb	r0, r0, #32
 8008228:	4440      	add	r0, r8
 800822a:	f010 001f 	ands.w	r0, r0, #31
 800822e:	d047      	beq.n	80082c0 <_dtoa_r+0x8c0>
 8008230:	f1c0 0320 	rsb	r3, r0, #32
 8008234:	2b04      	cmp	r3, #4
 8008236:	dd3b      	ble.n	80082b0 <_dtoa_r+0x8b0>
 8008238:	9b05      	ldr	r3, [sp, #20]
 800823a:	f1c0 001c 	rsb	r0, r0, #28
 800823e:	4403      	add	r3, r0
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	4405      	add	r5, r0
 8008244:	4480      	add	r8, r0
 8008246:	9b05      	ldr	r3, [sp, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dd05      	ble.n	8008258 <_dtoa_r+0x858>
 800824c:	461a      	mov	r2, r3
 800824e:	9904      	ldr	r1, [sp, #16]
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fb6f 	bl	8008934 <__lshift>
 8008256:	9004      	str	r0, [sp, #16]
 8008258:	f1b8 0f00 	cmp.w	r8, #0
 800825c:	dd05      	ble.n	800826a <_dtoa_r+0x86a>
 800825e:	4639      	mov	r1, r7
 8008260:	4642      	mov	r2, r8
 8008262:	4620      	mov	r0, r4
 8008264:	f000 fb66 	bl	8008934 <__lshift>
 8008268:	4607      	mov	r7, r0
 800826a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800826c:	b353      	cbz	r3, 80082c4 <_dtoa_r+0x8c4>
 800826e:	4639      	mov	r1, r7
 8008270:	9804      	ldr	r0, [sp, #16]
 8008272:	f000 fbb3 	bl	80089dc <__mcmp>
 8008276:	2800      	cmp	r0, #0
 8008278:	da24      	bge.n	80082c4 <_dtoa_r+0x8c4>
 800827a:	2300      	movs	r3, #0
 800827c:	220a      	movs	r2, #10
 800827e:	9904      	ldr	r1, [sp, #16]
 8008280:	4620      	mov	r0, r4
 8008282:	f000 f9e1 	bl	8008648 <__multadd>
 8008286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008288:	9004      	str	r0, [sp, #16]
 800828a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 814d 	beq.w	800852e <_dtoa_r+0xb2e>
 8008294:	2300      	movs	r3, #0
 8008296:	4631      	mov	r1, r6
 8008298:	220a      	movs	r2, #10
 800829a:	4620      	mov	r0, r4
 800829c:	f000 f9d4 	bl	8008648 <__multadd>
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	4606      	mov	r6, r0
 80082a6:	dc4f      	bgt.n	8008348 <_dtoa_r+0x948>
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	dd4c      	ble.n	8008348 <_dtoa_r+0x948>
 80082ae:	e011      	b.n	80082d4 <_dtoa_r+0x8d4>
 80082b0:	d0c9      	beq.n	8008246 <_dtoa_r+0x846>
 80082b2:	9a05      	ldr	r2, [sp, #20]
 80082b4:	331c      	adds	r3, #28
 80082b6:	441a      	add	r2, r3
 80082b8:	9205      	str	r2, [sp, #20]
 80082ba:	441d      	add	r5, r3
 80082bc:	4498      	add	r8, r3
 80082be:	e7c2      	b.n	8008246 <_dtoa_r+0x846>
 80082c0:	4603      	mov	r3, r0
 80082c2:	e7f6      	b.n	80082b2 <_dtoa_r+0x8b2>
 80082c4:	f1b9 0f00 	cmp.w	r9, #0
 80082c8:	dc38      	bgt.n	800833c <_dtoa_r+0x93c>
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	dd35      	ble.n	800833c <_dtoa_r+0x93c>
 80082d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80082d4:	9b02      	ldr	r3, [sp, #8]
 80082d6:	b963      	cbnz	r3, 80082f2 <_dtoa_r+0x8f2>
 80082d8:	4639      	mov	r1, r7
 80082da:	2205      	movs	r2, #5
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 f9b3 	bl	8008648 <__multadd>
 80082e2:	4601      	mov	r1, r0
 80082e4:	4607      	mov	r7, r0
 80082e6:	9804      	ldr	r0, [sp, #16]
 80082e8:	f000 fb78 	bl	80089dc <__mcmp>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f73f adcc 	bgt.w	8007e8a <_dtoa_r+0x48a>
 80082f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f4:	465d      	mov	r5, fp
 80082f6:	ea6f 0a03 	mvn.w	sl, r3
 80082fa:	f04f 0900 	mov.w	r9, #0
 80082fe:	4639      	mov	r1, r7
 8008300:	4620      	mov	r0, r4
 8008302:	f000 f98a 	bl	800861a <_Bfree>
 8008306:	2e00      	cmp	r6, #0
 8008308:	f43f aeb7 	beq.w	800807a <_dtoa_r+0x67a>
 800830c:	f1b9 0f00 	cmp.w	r9, #0
 8008310:	d005      	beq.n	800831e <_dtoa_r+0x91e>
 8008312:	45b1      	cmp	r9, r6
 8008314:	d003      	beq.n	800831e <_dtoa_r+0x91e>
 8008316:	4649      	mov	r1, r9
 8008318:	4620      	mov	r0, r4
 800831a:	f000 f97e 	bl	800861a <_Bfree>
 800831e:	4631      	mov	r1, r6
 8008320:	4620      	mov	r0, r4
 8008322:	f000 f97a 	bl	800861a <_Bfree>
 8008326:	e6a8      	b.n	800807a <_dtoa_r+0x67a>
 8008328:	2700      	movs	r7, #0
 800832a:	463e      	mov	r6, r7
 800832c:	e7e1      	b.n	80082f2 <_dtoa_r+0x8f2>
 800832e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008332:	463e      	mov	r6, r7
 8008334:	e5a9      	b.n	8007e8a <_dtoa_r+0x48a>
 8008336:	bf00      	nop
 8008338:	40240000 	.word	0x40240000
 800833c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 80fa 	beq.w	800853c <_dtoa_r+0xb3c>
 8008348:	2d00      	cmp	r5, #0
 800834a:	dd05      	ble.n	8008358 <_dtoa_r+0x958>
 800834c:	4631      	mov	r1, r6
 800834e:	462a      	mov	r2, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f000 faef 	bl	8008934 <__lshift>
 8008356:	4606      	mov	r6, r0
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d04c      	beq.n	80083f8 <_dtoa_r+0x9f8>
 800835e:	6871      	ldr	r1, [r6, #4]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 f926 	bl	80085b2 <_Balloc>
 8008366:	6932      	ldr	r2, [r6, #16]
 8008368:	3202      	adds	r2, #2
 800836a:	4605      	mov	r5, r0
 800836c:	0092      	lsls	r2, r2, #2
 800836e:	f106 010c 	add.w	r1, r6, #12
 8008372:	300c      	adds	r0, #12
 8008374:	f000 f912 	bl	800859c <memcpy>
 8008378:	2201      	movs	r2, #1
 800837a:	4629      	mov	r1, r5
 800837c:	4620      	mov	r0, r4
 800837e:	f000 fad9 	bl	8008934 <__lshift>
 8008382:	9b00      	ldr	r3, [sp, #0]
 8008384:	f8cd b014 	str.w	fp, [sp, #20]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	46b1      	mov	r9, r6
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	4606      	mov	r6, r0
 8008392:	4639      	mov	r1, r7
 8008394:	9804      	ldr	r0, [sp, #16]
 8008396:	f7ff faa7 	bl	80078e8 <quorem>
 800839a:	4649      	mov	r1, r9
 800839c:	4605      	mov	r5, r0
 800839e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80083a2:	9804      	ldr	r0, [sp, #16]
 80083a4:	f000 fb1a 	bl	80089dc <__mcmp>
 80083a8:	4632      	mov	r2, r6
 80083aa:	9000      	str	r0, [sp, #0]
 80083ac:	4639      	mov	r1, r7
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 fb2e 	bl	8008a10 <__mdiff>
 80083b4:	68c3      	ldr	r3, [r0, #12]
 80083b6:	4602      	mov	r2, r0
 80083b8:	bb03      	cbnz	r3, 80083fc <_dtoa_r+0x9fc>
 80083ba:	4601      	mov	r1, r0
 80083bc:	9008      	str	r0, [sp, #32]
 80083be:	9804      	ldr	r0, [sp, #16]
 80083c0:	f000 fb0c 	bl	80089dc <__mcmp>
 80083c4:	9a08      	ldr	r2, [sp, #32]
 80083c6:	4603      	mov	r3, r0
 80083c8:	4611      	mov	r1, r2
 80083ca:	4620      	mov	r0, r4
 80083cc:	9308      	str	r3, [sp, #32]
 80083ce:	f000 f924 	bl	800861a <_Bfree>
 80083d2:	9b08      	ldr	r3, [sp, #32]
 80083d4:	b9a3      	cbnz	r3, 8008400 <_dtoa_r+0xa00>
 80083d6:	9a06      	ldr	r2, [sp, #24]
 80083d8:	b992      	cbnz	r2, 8008400 <_dtoa_r+0xa00>
 80083da:	9a07      	ldr	r2, [sp, #28]
 80083dc:	b982      	cbnz	r2, 8008400 <_dtoa_r+0xa00>
 80083de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083e2:	d029      	beq.n	8008438 <_dtoa_r+0xa38>
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd01      	ble.n	80083ee <_dtoa_r+0x9ee>
 80083ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80083ee:	9b05      	ldr	r3, [sp, #20]
 80083f0:	1c5d      	adds	r5, r3, #1
 80083f2:	f883 8000 	strb.w	r8, [r3]
 80083f6:	e782      	b.n	80082fe <_dtoa_r+0x8fe>
 80083f8:	4630      	mov	r0, r6
 80083fa:	e7c2      	b.n	8008382 <_dtoa_r+0x982>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e7e3      	b.n	80083c8 <_dtoa_r+0x9c8>
 8008400:	9a00      	ldr	r2, [sp, #0]
 8008402:	2a00      	cmp	r2, #0
 8008404:	db04      	blt.n	8008410 <_dtoa_r+0xa10>
 8008406:	d125      	bne.n	8008454 <_dtoa_r+0xa54>
 8008408:	9a06      	ldr	r2, [sp, #24]
 800840a:	bb1a      	cbnz	r2, 8008454 <_dtoa_r+0xa54>
 800840c:	9a07      	ldr	r2, [sp, #28]
 800840e:	bb0a      	cbnz	r2, 8008454 <_dtoa_r+0xa54>
 8008410:	2b00      	cmp	r3, #0
 8008412:	ddec      	ble.n	80083ee <_dtoa_r+0x9ee>
 8008414:	2201      	movs	r2, #1
 8008416:	9904      	ldr	r1, [sp, #16]
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fa8b 	bl	8008934 <__lshift>
 800841e:	4639      	mov	r1, r7
 8008420:	9004      	str	r0, [sp, #16]
 8008422:	f000 fadb 	bl	80089dc <__mcmp>
 8008426:	2800      	cmp	r0, #0
 8008428:	dc03      	bgt.n	8008432 <_dtoa_r+0xa32>
 800842a:	d1e0      	bne.n	80083ee <_dtoa_r+0x9ee>
 800842c:	f018 0f01 	tst.w	r8, #1
 8008430:	d0dd      	beq.n	80083ee <_dtoa_r+0x9ee>
 8008432:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008436:	d1d8      	bne.n	80083ea <_dtoa_r+0x9ea>
 8008438:	9b05      	ldr	r3, [sp, #20]
 800843a:	9a05      	ldr	r2, [sp, #20]
 800843c:	1c5d      	adds	r5, r3, #1
 800843e:	2339      	movs	r3, #57	; 0x39
 8008440:	7013      	strb	r3, [r2, #0]
 8008442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008446:	2b39      	cmp	r3, #57	; 0x39
 8008448:	f105 32ff 	add.w	r2, r5, #4294967295
 800844c:	d04f      	beq.n	80084ee <_dtoa_r+0xaee>
 800844e:	3301      	adds	r3, #1
 8008450:	7013      	strb	r3, [r2, #0]
 8008452:	e754      	b.n	80082fe <_dtoa_r+0x8fe>
 8008454:	9a05      	ldr	r2, [sp, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f102 0501 	add.w	r5, r2, #1
 800845c:	dd06      	ble.n	800846c <_dtoa_r+0xa6c>
 800845e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008462:	d0e9      	beq.n	8008438 <_dtoa_r+0xa38>
 8008464:	f108 0801 	add.w	r8, r8, #1
 8008468:	9b05      	ldr	r3, [sp, #20]
 800846a:	e7c2      	b.n	80083f2 <_dtoa_r+0x9f2>
 800846c:	9a02      	ldr	r2, [sp, #8]
 800846e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008472:	eba5 030b 	sub.w	r3, r5, fp
 8008476:	4293      	cmp	r3, r2
 8008478:	d021      	beq.n	80084be <_dtoa_r+0xabe>
 800847a:	2300      	movs	r3, #0
 800847c:	220a      	movs	r2, #10
 800847e:	9904      	ldr	r1, [sp, #16]
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f8e1 	bl	8008648 <__multadd>
 8008486:	45b1      	cmp	r9, r6
 8008488:	9004      	str	r0, [sp, #16]
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	f04f 020a 	mov.w	r2, #10
 8008492:	4649      	mov	r1, r9
 8008494:	4620      	mov	r0, r4
 8008496:	d105      	bne.n	80084a4 <_dtoa_r+0xaa4>
 8008498:	f000 f8d6 	bl	8008648 <__multadd>
 800849c:	4681      	mov	r9, r0
 800849e:	4606      	mov	r6, r0
 80084a0:	9505      	str	r5, [sp, #20]
 80084a2:	e776      	b.n	8008392 <_dtoa_r+0x992>
 80084a4:	f000 f8d0 	bl	8008648 <__multadd>
 80084a8:	4631      	mov	r1, r6
 80084aa:	4681      	mov	r9, r0
 80084ac:	2300      	movs	r3, #0
 80084ae:	220a      	movs	r2, #10
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 f8c9 	bl	8008648 <__multadd>
 80084b6:	4606      	mov	r6, r0
 80084b8:	e7f2      	b.n	80084a0 <_dtoa_r+0xaa0>
 80084ba:	f04f 0900 	mov.w	r9, #0
 80084be:	2201      	movs	r2, #1
 80084c0:	9904      	ldr	r1, [sp, #16]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 fa36 	bl	8008934 <__lshift>
 80084c8:	4639      	mov	r1, r7
 80084ca:	9004      	str	r0, [sp, #16]
 80084cc:	f000 fa86 	bl	80089dc <__mcmp>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	dcb6      	bgt.n	8008442 <_dtoa_r+0xa42>
 80084d4:	d102      	bne.n	80084dc <_dtoa_r+0xadc>
 80084d6:	f018 0f01 	tst.w	r8, #1
 80084da:	d1b2      	bne.n	8008442 <_dtoa_r+0xa42>
 80084dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80084e6:	f47f af0a 	bne.w	80082fe <_dtoa_r+0x8fe>
 80084ea:	4615      	mov	r5, r2
 80084ec:	e7f6      	b.n	80084dc <_dtoa_r+0xadc>
 80084ee:	4593      	cmp	fp, r2
 80084f0:	d105      	bne.n	80084fe <_dtoa_r+0xafe>
 80084f2:	2331      	movs	r3, #49	; 0x31
 80084f4:	f10a 0a01 	add.w	sl, sl, #1
 80084f8:	f88b 3000 	strb.w	r3, [fp]
 80084fc:	e6ff      	b.n	80082fe <_dtoa_r+0x8fe>
 80084fe:	4615      	mov	r5, r2
 8008500:	e79f      	b.n	8008442 <_dtoa_r+0xa42>
 8008502:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008568 <_dtoa_r+0xb68>
 8008506:	e007      	b.n	8008518 <_dtoa_r+0xb18>
 8008508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800850a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800856c <_dtoa_r+0xb6c>
 800850e:	b11b      	cbz	r3, 8008518 <_dtoa_r+0xb18>
 8008510:	f10b 0308 	add.w	r3, fp, #8
 8008514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	4658      	mov	r0, fp
 800851a:	b017      	add	sp, #92	; 0x5c
 800851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	9b06      	ldr	r3, [sp, #24]
 8008522:	2b01      	cmp	r3, #1
 8008524:	f77f ae35 	ble.w	8008192 <_dtoa_r+0x792>
 8008528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852a:	9307      	str	r3, [sp, #28]
 800852c:	e649      	b.n	80081c2 <_dtoa_r+0x7c2>
 800852e:	9b02      	ldr	r3, [sp, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	dc03      	bgt.n	800853c <_dtoa_r+0xb3c>
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	2b02      	cmp	r3, #2
 8008538:	f73f aecc 	bgt.w	80082d4 <_dtoa_r+0x8d4>
 800853c:	465d      	mov	r5, fp
 800853e:	4639      	mov	r1, r7
 8008540:	9804      	ldr	r0, [sp, #16]
 8008542:	f7ff f9d1 	bl	80078e8 <quorem>
 8008546:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800854a:	f805 8b01 	strb.w	r8, [r5], #1
 800854e:	9a02      	ldr	r2, [sp, #8]
 8008550:	eba5 030b 	sub.w	r3, r5, fp
 8008554:	429a      	cmp	r2, r3
 8008556:	ddb0      	ble.n	80084ba <_dtoa_r+0xaba>
 8008558:	2300      	movs	r3, #0
 800855a:	220a      	movs	r2, #10
 800855c:	9904      	ldr	r1, [sp, #16]
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f872 	bl	8008648 <__multadd>
 8008564:	9004      	str	r0, [sp, #16]
 8008566:	e7ea      	b.n	800853e <_dtoa_r+0xb3e>
 8008568:	080091d4 	.word	0x080091d4
 800856c:	080091f8 	.word	0x080091f8

08008570 <_localeconv_r>:
 8008570:	4b04      	ldr	r3, [pc, #16]	; (8008584 <_localeconv_r+0x14>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6a18      	ldr	r0, [r3, #32]
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <_localeconv_r+0x18>)
 8008578:	2800      	cmp	r0, #0
 800857a:	bf08      	it	eq
 800857c:	4618      	moveq	r0, r3
 800857e:	30f0      	adds	r0, #240	; 0xf0
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000018 	.word	0x20000018
 8008588:	2000007c 	.word	0x2000007c

0800858c <malloc>:
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <malloc+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f000 bb45 	b.w	8008c20 <_malloc_r>
 8008596:	bf00      	nop
 8008598:	20000018 	.word	0x20000018

0800859c <memcpy>:
 800859c:	b510      	push	{r4, lr}
 800859e:	1e43      	subs	r3, r0, #1
 80085a0:	440a      	add	r2, r1
 80085a2:	4291      	cmp	r1, r2
 80085a4:	d100      	bne.n	80085a8 <memcpy+0xc>
 80085a6:	bd10      	pop	{r4, pc}
 80085a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085b0:	e7f7      	b.n	80085a2 <memcpy+0x6>

080085b2 <_Balloc>:
 80085b2:	b570      	push	{r4, r5, r6, lr}
 80085b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085b6:	4604      	mov	r4, r0
 80085b8:	460e      	mov	r6, r1
 80085ba:	b93d      	cbnz	r5, 80085cc <_Balloc+0x1a>
 80085bc:	2010      	movs	r0, #16
 80085be:	f7ff ffe5 	bl	800858c <malloc>
 80085c2:	6260      	str	r0, [r4, #36]	; 0x24
 80085c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085c8:	6005      	str	r5, [r0, #0]
 80085ca:	60c5      	str	r5, [r0, #12]
 80085cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80085ce:	68eb      	ldr	r3, [r5, #12]
 80085d0:	b183      	cbz	r3, 80085f4 <_Balloc+0x42>
 80085d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80085da:	b9b8      	cbnz	r0, 800860c <_Balloc+0x5a>
 80085dc:	2101      	movs	r1, #1
 80085de:	fa01 f506 	lsl.w	r5, r1, r6
 80085e2:	1d6a      	adds	r2, r5, #5
 80085e4:	0092      	lsls	r2, r2, #2
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 fabe 	bl	8008b68 <_calloc_r>
 80085ec:	b160      	cbz	r0, 8008608 <_Balloc+0x56>
 80085ee:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80085f2:	e00e      	b.n	8008612 <_Balloc+0x60>
 80085f4:	2221      	movs	r2, #33	; 0x21
 80085f6:	2104      	movs	r1, #4
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 fab5 	bl	8008b68 <_calloc_r>
 80085fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008600:	60e8      	str	r0, [r5, #12]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e4      	bne.n	80085d2 <_Balloc+0x20>
 8008608:	2000      	movs	r0, #0
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	6802      	ldr	r2, [r0, #0]
 800860e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008612:	2300      	movs	r3, #0
 8008614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008618:	e7f7      	b.n	800860a <_Balloc+0x58>

0800861a <_Bfree>:
 800861a:	b570      	push	{r4, r5, r6, lr}
 800861c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800861e:	4606      	mov	r6, r0
 8008620:	460d      	mov	r5, r1
 8008622:	b93c      	cbnz	r4, 8008634 <_Bfree+0x1a>
 8008624:	2010      	movs	r0, #16
 8008626:	f7ff ffb1 	bl	800858c <malloc>
 800862a:	6270      	str	r0, [r6, #36]	; 0x24
 800862c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008630:	6004      	str	r4, [r0, #0]
 8008632:	60c4      	str	r4, [r0, #12]
 8008634:	b13d      	cbz	r5, 8008646 <_Bfree+0x2c>
 8008636:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008638:	686a      	ldr	r2, [r5, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008640:	6029      	str	r1, [r5, #0]
 8008642:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008646:	bd70      	pop	{r4, r5, r6, pc}

08008648 <__multadd>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	690d      	ldr	r5, [r1, #16]
 800864e:	461f      	mov	r7, r3
 8008650:	4606      	mov	r6, r0
 8008652:	460c      	mov	r4, r1
 8008654:	f101 0c14 	add.w	ip, r1, #20
 8008658:	2300      	movs	r3, #0
 800865a:	f8dc 0000 	ldr.w	r0, [ip]
 800865e:	b281      	uxth	r1, r0
 8008660:	fb02 7101 	mla	r1, r2, r1, r7
 8008664:	0c0f      	lsrs	r7, r1, #16
 8008666:	0c00      	lsrs	r0, r0, #16
 8008668:	fb02 7000 	mla	r0, r2, r0, r7
 800866c:	b289      	uxth	r1, r1
 800866e:	3301      	adds	r3, #1
 8008670:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008674:	429d      	cmp	r5, r3
 8008676:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800867a:	f84c 1b04 	str.w	r1, [ip], #4
 800867e:	dcec      	bgt.n	800865a <__multadd+0x12>
 8008680:	b1d7      	cbz	r7, 80086b8 <__multadd+0x70>
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc12      	bgt.n	80086ae <__multadd+0x66>
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4630      	mov	r0, r6
 800868c:	3101      	adds	r1, #1
 800868e:	f7ff ff90 	bl	80085b2 <_Balloc>
 8008692:	6922      	ldr	r2, [r4, #16]
 8008694:	3202      	adds	r2, #2
 8008696:	f104 010c 	add.w	r1, r4, #12
 800869a:	4680      	mov	r8, r0
 800869c:	0092      	lsls	r2, r2, #2
 800869e:	300c      	adds	r0, #12
 80086a0:	f7ff ff7c 	bl	800859c <memcpy>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7ff ffb7 	bl	800861a <_Bfree>
 80086ac:	4644      	mov	r4, r8
 80086ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086b2:	3501      	adds	r5, #1
 80086b4:	615f      	str	r7, [r3, #20]
 80086b6:	6125      	str	r5, [r4, #16]
 80086b8:	4620      	mov	r0, r4
 80086ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086be <__hi0bits>:
 80086be:	0c02      	lsrs	r2, r0, #16
 80086c0:	0412      	lsls	r2, r2, #16
 80086c2:	4603      	mov	r3, r0
 80086c4:	b9b2      	cbnz	r2, 80086f4 <__hi0bits+0x36>
 80086c6:	0403      	lsls	r3, r0, #16
 80086c8:	2010      	movs	r0, #16
 80086ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80086ce:	bf04      	itt	eq
 80086d0:	021b      	lsleq	r3, r3, #8
 80086d2:	3008      	addeq	r0, #8
 80086d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80086d8:	bf04      	itt	eq
 80086da:	011b      	lsleq	r3, r3, #4
 80086dc:	3004      	addeq	r0, #4
 80086de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086e2:	bf04      	itt	eq
 80086e4:	009b      	lsleq	r3, r3, #2
 80086e6:	3002      	addeq	r0, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	db06      	blt.n	80086fa <__hi0bits+0x3c>
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	d503      	bpl.n	80086f8 <__hi0bits+0x3a>
 80086f0:	3001      	adds	r0, #1
 80086f2:	4770      	bx	lr
 80086f4:	2000      	movs	r0, #0
 80086f6:	e7e8      	b.n	80086ca <__hi0bits+0xc>
 80086f8:	2020      	movs	r0, #32
 80086fa:	4770      	bx	lr

080086fc <__lo0bits>:
 80086fc:	6803      	ldr	r3, [r0, #0]
 80086fe:	f013 0207 	ands.w	r2, r3, #7
 8008702:	4601      	mov	r1, r0
 8008704:	d00b      	beq.n	800871e <__lo0bits+0x22>
 8008706:	07da      	lsls	r2, r3, #31
 8008708:	d423      	bmi.n	8008752 <__lo0bits+0x56>
 800870a:	0798      	lsls	r0, r3, #30
 800870c:	bf49      	itett	mi
 800870e:	085b      	lsrmi	r3, r3, #1
 8008710:	089b      	lsrpl	r3, r3, #2
 8008712:	2001      	movmi	r0, #1
 8008714:	600b      	strmi	r3, [r1, #0]
 8008716:	bf5c      	itt	pl
 8008718:	600b      	strpl	r3, [r1, #0]
 800871a:	2002      	movpl	r0, #2
 800871c:	4770      	bx	lr
 800871e:	b298      	uxth	r0, r3
 8008720:	b9a8      	cbnz	r0, 800874e <__lo0bits+0x52>
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	2010      	movs	r0, #16
 8008726:	f013 0fff 	tst.w	r3, #255	; 0xff
 800872a:	bf04      	itt	eq
 800872c:	0a1b      	lsreq	r3, r3, #8
 800872e:	3008      	addeq	r0, #8
 8008730:	071a      	lsls	r2, r3, #28
 8008732:	bf04      	itt	eq
 8008734:	091b      	lsreq	r3, r3, #4
 8008736:	3004      	addeq	r0, #4
 8008738:	079a      	lsls	r2, r3, #30
 800873a:	bf04      	itt	eq
 800873c:	089b      	lsreq	r3, r3, #2
 800873e:	3002      	addeq	r0, #2
 8008740:	07da      	lsls	r2, r3, #31
 8008742:	d402      	bmi.n	800874a <__lo0bits+0x4e>
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	d006      	beq.n	8008756 <__lo0bits+0x5a>
 8008748:	3001      	adds	r0, #1
 800874a:	600b      	str	r3, [r1, #0]
 800874c:	4770      	bx	lr
 800874e:	4610      	mov	r0, r2
 8008750:	e7e9      	b.n	8008726 <__lo0bits+0x2a>
 8008752:	2000      	movs	r0, #0
 8008754:	4770      	bx	lr
 8008756:	2020      	movs	r0, #32
 8008758:	4770      	bx	lr

0800875a <__i2b>:
 800875a:	b510      	push	{r4, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	2101      	movs	r1, #1
 8008760:	f7ff ff27 	bl	80085b2 <_Balloc>
 8008764:	2201      	movs	r2, #1
 8008766:	6144      	str	r4, [r0, #20]
 8008768:	6102      	str	r2, [r0, #16]
 800876a:	bd10      	pop	{r4, pc}

0800876c <__multiply>:
 800876c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	4614      	mov	r4, r2
 8008772:	690a      	ldr	r2, [r1, #16]
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	bfb8      	it	lt
 800877a:	460b      	movlt	r3, r1
 800877c:	4688      	mov	r8, r1
 800877e:	bfbc      	itt	lt
 8008780:	46a0      	movlt	r8, r4
 8008782:	461c      	movlt	r4, r3
 8008784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008788:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800878c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008790:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008794:	eb07 0609 	add.w	r6, r7, r9
 8008798:	42b3      	cmp	r3, r6
 800879a:	bfb8      	it	lt
 800879c:	3101      	addlt	r1, #1
 800879e:	f7ff ff08 	bl	80085b2 <_Balloc>
 80087a2:	f100 0514 	add.w	r5, r0, #20
 80087a6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80087aa:	462b      	mov	r3, r5
 80087ac:	2200      	movs	r2, #0
 80087ae:	4573      	cmp	r3, lr
 80087b0:	d316      	bcc.n	80087e0 <__multiply+0x74>
 80087b2:	f104 0214 	add.w	r2, r4, #20
 80087b6:	f108 0114 	add.w	r1, r8, #20
 80087ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80087be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	9201      	str	r2, [sp, #4]
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d80c      	bhi.n	80087e6 <__multiply+0x7a>
 80087cc:	2e00      	cmp	r6, #0
 80087ce:	dd03      	ble.n	80087d8 <__multiply+0x6c>
 80087d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d05d      	beq.n	8008894 <__multiply+0x128>
 80087d8:	6106      	str	r6, [r0, #16]
 80087da:	b003      	add	sp, #12
 80087dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e0:	f843 2b04 	str.w	r2, [r3], #4
 80087e4:	e7e3      	b.n	80087ae <__multiply+0x42>
 80087e6:	f8b2 b000 	ldrh.w	fp, [r2]
 80087ea:	f1bb 0f00 	cmp.w	fp, #0
 80087ee:	d023      	beq.n	8008838 <__multiply+0xcc>
 80087f0:	4689      	mov	r9, r1
 80087f2:	46ac      	mov	ip, r5
 80087f4:	f04f 0800 	mov.w	r8, #0
 80087f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80087fc:	f8dc a000 	ldr.w	sl, [ip]
 8008800:	b2a3      	uxth	r3, r4
 8008802:	fa1f fa8a 	uxth.w	sl, sl
 8008806:	fb0b a303 	mla	r3, fp, r3, sl
 800880a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800880e:	f8dc 4000 	ldr.w	r4, [ip]
 8008812:	4443      	add	r3, r8
 8008814:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008818:	fb0b 840a 	mla	r4, fp, sl, r8
 800881c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008820:	46e2      	mov	sl, ip
 8008822:	b29b      	uxth	r3, r3
 8008824:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008828:	454f      	cmp	r7, r9
 800882a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800882e:	f84a 3b04 	str.w	r3, [sl], #4
 8008832:	d82b      	bhi.n	800888c <__multiply+0x120>
 8008834:	f8cc 8004 	str.w	r8, [ip, #4]
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800883e:	3204      	adds	r2, #4
 8008840:	f1ba 0f00 	cmp.w	sl, #0
 8008844:	d020      	beq.n	8008888 <__multiply+0x11c>
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	4689      	mov	r9, r1
 800884a:	46a8      	mov	r8, r5
 800884c:	f04f 0b00 	mov.w	fp, #0
 8008850:	f8b9 c000 	ldrh.w	ip, [r9]
 8008854:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008858:	fb0a 440c 	mla	r4, sl, ip, r4
 800885c:	445c      	add	r4, fp
 800885e:	46c4      	mov	ip, r8
 8008860:	b29b      	uxth	r3, r3
 8008862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008866:	f84c 3b04 	str.w	r3, [ip], #4
 800886a:	f859 3b04 	ldr.w	r3, [r9], #4
 800886e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008872:	0c1b      	lsrs	r3, r3, #16
 8008874:	fb0a b303 	mla	r3, sl, r3, fp
 8008878:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800887c:	454f      	cmp	r7, r9
 800887e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008882:	d805      	bhi.n	8008890 <__multiply+0x124>
 8008884:	f8c8 3004 	str.w	r3, [r8, #4]
 8008888:	3504      	adds	r5, #4
 800888a:	e79b      	b.n	80087c4 <__multiply+0x58>
 800888c:	46d4      	mov	ip, sl
 800888e:	e7b3      	b.n	80087f8 <__multiply+0x8c>
 8008890:	46e0      	mov	r8, ip
 8008892:	e7dd      	b.n	8008850 <__multiply+0xe4>
 8008894:	3e01      	subs	r6, #1
 8008896:	e799      	b.n	80087cc <__multiply+0x60>

08008898 <__pow5mult>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	4615      	mov	r5, r2
 800889e:	f012 0203 	ands.w	r2, r2, #3
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	d007      	beq.n	80088b8 <__pow5mult+0x20>
 80088a8:	3a01      	subs	r2, #1
 80088aa:	4c21      	ldr	r4, [pc, #132]	; (8008930 <__pow5mult+0x98>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088b2:	f7ff fec9 	bl	8008648 <__multadd>
 80088b6:	4607      	mov	r7, r0
 80088b8:	10ad      	asrs	r5, r5, #2
 80088ba:	d035      	beq.n	8008928 <__pow5mult+0x90>
 80088bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088be:	b93c      	cbnz	r4, 80088d0 <__pow5mult+0x38>
 80088c0:	2010      	movs	r0, #16
 80088c2:	f7ff fe63 	bl	800858c <malloc>
 80088c6:	6270      	str	r0, [r6, #36]	; 0x24
 80088c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088cc:	6004      	str	r4, [r0, #0]
 80088ce:	60c4      	str	r4, [r0, #12]
 80088d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088d8:	b94c      	cbnz	r4, 80088ee <__pow5mult+0x56>
 80088da:	f240 2171 	movw	r1, #625	; 0x271
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ff3b 	bl	800875a <__i2b>
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ea:	4604      	mov	r4, r0
 80088ec:	6003      	str	r3, [r0, #0]
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	07eb      	lsls	r3, r5, #31
 80088f4:	d50a      	bpl.n	800890c <__pow5mult+0x74>
 80088f6:	4639      	mov	r1, r7
 80088f8:	4622      	mov	r2, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ff36 	bl	800876c <__multiply>
 8008900:	4639      	mov	r1, r7
 8008902:	4681      	mov	r9, r0
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff fe88 	bl	800861a <_Bfree>
 800890a:	464f      	mov	r7, r9
 800890c:	106d      	asrs	r5, r5, #1
 800890e:	d00b      	beq.n	8008928 <__pow5mult+0x90>
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	b938      	cbnz	r0, 8008924 <__pow5mult+0x8c>
 8008914:	4622      	mov	r2, r4
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff ff27 	bl	800876c <__multiply>
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	f8c0 8000 	str.w	r8, [r0]
 8008924:	4604      	mov	r4, r0
 8008926:	e7e4      	b.n	80088f2 <__pow5mult+0x5a>
 8008928:	4638      	mov	r0, r7
 800892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892e:	bf00      	nop
 8008930:	080092f8 	.word	0x080092f8

08008934 <__lshift>:
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	6849      	ldr	r1, [r1, #4]
 8008942:	eb0a 0903 	add.w	r9, sl, r3
 8008946:	68a3      	ldr	r3, [r4, #8]
 8008948:	4607      	mov	r7, r0
 800894a:	4616      	mov	r6, r2
 800894c:	f109 0501 	add.w	r5, r9, #1
 8008950:	42ab      	cmp	r3, r5
 8008952:	db32      	blt.n	80089ba <__lshift+0x86>
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff fe2c 	bl	80085b2 <_Balloc>
 800895a:	2300      	movs	r3, #0
 800895c:	4680      	mov	r8, r0
 800895e:	f100 0114 	add.w	r1, r0, #20
 8008962:	461a      	mov	r2, r3
 8008964:	4553      	cmp	r3, sl
 8008966:	db2b      	blt.n	80089c0 <__lshift+0x8c>
 8008968:	6920      	ldr	r0, [r4, #16]
 800896a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800896e:	f104 0314 	add.w	r3, r4, #20
 8008972:	f016 021f 	ands.w	r2, r6, #31
 8008976:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800897a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800897e:	d025      	beq.n	80089cc <__lshift+0x98>
 8008980:	f1c2 0e20 	rsb	lr, r2, #32
 8008984:	2000      	movs	r0, #0
 8008986:	681e      	ldr	r6, [r3, #0]
 8008988:	468a      	mov	sl, r1
 800898a:	4096      	lsls	r6, r2
 800898c:	4330      	orrs	r0, r6
 800898e:	f84a 0b04 	str.w	r0, [sl], #4
 8008992:	f853 0b04 	ldr.w	r0, [r3], #4
 8008996:	459c      	cmp	ip, r3
 8008998:	fa20 f00e 	lsr.w	r0, r0, lr
 800899c:	d814      	bhi.n	80089c8 <__lshift+0x94>
 800899e:	6048      	str	r0, [r1, #4]
 80089a0:	b108      	cbz	r0, 80089a6 <__lshift+0x72>
 80089a2:	f109 0502 	add.w	r5, r9, #2
 80089a6:	3d01      	subs	r5, #1
 80089a8:	4638      	mov	r0, r7
 80089aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80089ae:	4621      	mov	r1, r4
 80089b0:	f7ff fe33 	bl	800861a <_Bfree>
 80089b4:	4640      	mov	r0, r8
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	3101      	adds	r1, #1
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	e7c7      	b.n	8008950 <__lshift+0x1c>
 80089c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80089c4:	3301      	adds	r3, #1
 80089c6:	e7cd      	b.n	8008964 <__lshift+0x30>
 80089c8:	4651      	mov	r1, sl
 80089ca:	e7dc      	b.n	8008986 <__lshift+0x52>
 80089cc:	3904      	subs	r1, #4
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80089d6:	459c      	cmp	ip, r3
 80089d8:	d8f9      	bhi.n	80089ce <__lshift+0x9a>
 80089da:	e7e4      	b.n	80089a6 <__lshift+0x72>

080089dc <__mcmp>:
 80089dc:	6903      	ldr	r3, [r0, #16]
 80089de:	690a      	ldr	r2, [r1, #16]
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	b530      	push	{r4, r5, lr}
 80089e4:	d10c      	bne.n	8008a00 <__mcmp+0x24>
 80089e6:	0092      	lsls	r2, r2, #2
 80089e8:	3014      	adds	r0, #20
 80089ea:	3114      	adds	r1, #20
 80089ec:	1884      	adds	r4, r0, r2
 80089ee:	4411      	add	r1, r2
 80089f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089f8:	4295      	cmp	r5, r2
 80089fa:	d003      	beq.n	8008a04 <__mcmp+0x28>
 80089fc:	d305      	bcc.n	8008a0a <__mcmp+0x2e>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4618      	mov	r0, r3
 8008a02:	bd30      	pop	{r4, r5, pc}
 8008a04:	42a0      	cmp	r0, r4
 8008a06:	d3f3      	bcc.n	80089f0 <__mcmp+0x14>
 8008a08:	e7fa      	b.n	8008a00 <__mcmp+0x24>
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0e:	e7f7      	b.n	8008a00 <__mcmp+0x24>

08008a10 <__mdiff>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	460d      	mov	r5, r1
 8008a16:	4607      	mov	r7, r0
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	f7ff ffdd 	bl	80089dc <__mcmp>
 8008a22:	1e06      	subs	r6, r0, #0
 8008a24:	d108      	bne.n	8008a38 <__mdiff+0x28>
 8008a26:	4631      	mov	r1, r6
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff fdc2 	bl	80085b2 <_Balloc>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a38:	bfa4      	itt	ge
 8008a3a:	4623      	movge	r3, r4
 8008a3c:	462c      	movge	r4, r5
 8008a3e:	4638      	mov	r0, r7
 8008a40:	6861      	ldr	r1, [r4, #4]
 8008a42:	bfa6      	itte	ge
 8008a44:	461d      	movge	r5, r3
 8008a46:	2600      	movge	r6, #0
 8008a48:	2601      	movlt	r6, #1
 8008a4a:	f7ff fdb2 	bl	80085b2 <_Balloc>
 8008a4e:	692b      	ldr	r3, [r5, #16]
 8008a50:	60c6      	str	r6, [r0, #12]
 8008a52:	6926      	ldr	r6, [r4, #16]
 8008a54:	f105 0914 	add.w	r9, r5, #20
 8008a58:	f104 0214 	add.w	r2, r4, #20
 8008a5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a64:	f100 0514 	add.w	r5, r0, #20
 8008a68:	f04f 0e00 	mov.w	lr, #0
 8008a6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a70:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a74:	fa1e f18a 	uxtah	r1, lr, sl
 8008a78:	b2a3      	uxth	r3, r4
 8008a7a:	1ac9      	subs	r1, r1, r3
 8008a7c:	0c23      	lsrs	r3, r4, #16
 8008a7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008a82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a86:	b289      	uxth	r1, r1
 8008a88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a8c:	45c8      	cmp	r8, r9
 8008a8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a92:	4694      	mov	ip, r2
 8008a94:	f845 3b04 	str.w	r3, [r5], #4
 8008a98:	d8e8      	bhi.n	8008a6c <__mdiff+0x5c>
 8008a9a:	45bc      	cmp	ip, r7
 8008a9c:	d304      	bcc.n	8008aa8 <__mdiff+0x98>
 8008a9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008aa2:	b183      	cbz	r3, 8008ac6 <__mdiff+0xb6>
 8008aa4:	6106      	str	r6, [r0, #16]
 8008aa6:	e7c5      	b.n	8008a34 <__mdiff+0x24>
 8008aa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008aac:	fa1e f381 	uxtah	r3, lr, r1
 8008ab0:	141a      	asrs	r2, r3, #16
 8008ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008abc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008ac0:	f845 3b04 	str.w	r3, [r5], #4
 8008ac4:	e7e9      	b.n	8008a9a <__mdiff+0x8a>
 8008ac6:	3e01      	subs	r6, #1
 8008ac8:	e7e9      	b.n	8008a9e <__mdiff+0x8e>

08008aca <__d2b>:
 8008aca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ace:	460e      	mov	r6, r1
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	ec59 8b10 	vmov	r8, r9, d0
 8008ad6:	4615      	mov	r5, r2
 8008ad8:	f7ff fd6b 	bl	80085b2 <_Balloc>
 8008adc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ae6:	bb34      	cbnz	r4, 8008b36 <__d2b+0x6c>
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	f1b8 0300 	subs.w	r3, r8, #0
 8008aee:	d027      	beq.n	8008b40 <__d2b+0x76>
 8008af0:	a802      	add	r0, sp, #8
 8008af2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008af6:	f7ff fe01 	bl	80086fc <__lo0bits>
 8008afa:	9900      	ldr	r1, [sp, #0]
 8008afc:	b1f0      	cbz	r0, 8008b3c <__d2b+0x72>
 8008afe:	9a01      	ldr	r2, [sp, #4]
 8008b00:	f1c0 0320 	rsb	r3, r0, #32
 8008b04:	fa02 f303 	lsl.w	r3, r2, r3
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	40c2      	lsrs	r2, r0
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	9201      	str	r2, [sp, #4]
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bf14      	ite	ne
 8008b18:	2102      	movne	r1, #2
 8008b1a:	2101      	moveq	r1, #1
 8008b1c:	6139      	str	r1, [r7, #16]
 8008b1e:	b1c4      	cbz	r4, 8008b52 <__d2b+0x88>
 8008b20:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b24:	4404      	add	r4, r0
 8008b26:	6034      	str	r4, [r6, #0]
 8008b28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b2c:	6028      	str	r0, [r5, #0]
 8008b2e:	4638      	mov	r0, r7
 8008b30:	b003      	add	sp, #12
 8008b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b3a:	e7d5      	b.n	8008ae8 <__d2b+0x1e>
 8008b3c:	6179      	str	r1, [r7, #20]
 8008b3e:	e7e7      	b.n	8008b10 <__d2b+0x46>
 8008b40:	a801      	add	r0, sp, #4
 8008b42:	f7ff fddb 	bl	80086fc <__lo0bits>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	6139      	str	r1, [r7, #16]
 8008b4e:	3020      	adds	r0, #32
 8008b50:	e7e5      	b.n	8008b1e <__d2b+0x54>
 8008b52:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b5a:	6030      	str	r0, [r6, #0]
 8008b5c:	6918      	ldr	r0, [r3, #16]
 8008b5e:	f7ff fdae 	bl	80086be <__hi0bits>
 8008b62:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b66:	e7e1      	b.n	8008b2c <__d2b+0x62>

08008b68 <_calloc_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	fb02 f401 	mul.w	r4, r2, r1
 8008b6e:	4621      	mov	r1, r4
 8008b70:	f000 f856 	bl	8008c20 <_malloc_r>
 8008b74:	4605      	mov	r5, r0
 8008b76:	b118      	cbz	r0, 8008b80 <_calloc_r+0x18>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	f7fe fa30 	bl	8006fe0 <memset>
 8008b80:	4628      	mov	r0, r5
 8008b82:	bd38      	pop	{r3, r4, r5, pc}

08008b84 <_free_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4605      	mov	r5, r0
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	d045      	beq.n	8008c18 <_free_r+0x94>
 8008b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b90:	1f0c      	subs	r4, r1, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bfb8      	it	lt
 8008b96:	18e4      	addlt	r4, r4, r3
 8008b98:	f000 fa29 	bl	8008fee <__malloc_lock>
 8008b9c:	4a1f      	ldr	r2, [pc, #124]	; (8008c1c <_free_r+0x98>)
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	b933      	cbnz	r3, 8008bb2 <_free_r+0x2e>
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	6014      	str	r4, [r2, #0]
 8008ba8:	4628      	mov	r0, r5
 8008baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bae:	f000 ba1f 	b.w	8008ff0 <__malloc_unlock>
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	d90c      	bls.n	8008bd0 <_free_r+0x4c>
 8008bb6:	6821      	ldr	r1, [r4, #0]
 8008bb8:	1862      	adds	r2, r4, r1
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bf04      	itt	eq
 8008bbe:	681a      	ldreq	r2, [r3, #0]
 8008bc0:	685b      	ldreq	r3, [r3, #4]
 8008bc2:	6063      	str	r3, [r4, #4]
 8008bc4:	bf04      	itt	eq
 8008bc6:	1852      	addeq	r2, r2, r1
 8008bc8:	6022      	streq	r2, [r4, #0]
 8008bca:	6004      	str	r4, [r0, #0]
 8008bcc:	e7ec      	b.n	8008ba8 <_free_r+0x24>
 8008bce:	4613      	mov	r3, r2
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	b10a      	cbz	r2, 8008bd8 <_free_r+0x54>
 8008bd4:	42a2      	cmp	r2, r4
 8008bd6:	d9fa      	bls.n	8008bce <_free_r+0x4a>
 8008bd8:	6819      	ldr	r1, [r3, #0]
 8008bda:	1858      	adds	r0, r3, r1
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d10b      	bne.n	8008bf8 <_free_r+0x74>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	4401      	add	r1, r0
 8008be4:	1858      	adds	r0, r3, r1
 8008be6:	4282      	cmp	r2, r0
 8008be8:	6019      	str	r1, [r3, #0]
 8008bea:	d1dd      	bne.n	8008ba8 <_free_r+0x24>
 8008bec:	6810      	ldr	r0, [r2, #0]
 8008bee:	6852      	ldr	r2, [r2, #4]
 8008bf0:	605a      	str	r2, [r3, #4]
 8008bf2:	4401      	add	r1, r0
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	e7d7      	b.n	8008ba8 <_free_r+0x24>
 8008bf8:	d902      	bls.n	8008c00 <_free_r+0x7c>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	e7d3      	b.n	8008ba8 <_free_r+0x24>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428a      	cmp	r2, r1
 8008c06:	bf04      	itt	eq
 8008c08:	6811      	ldreq	r1, [r2, #0]
 8008c0a:	6852      	ldreq	r2, [r2, #4]
 8008c0c:	6062      	str	r2, [r4, #4]
 8008c0e:	bf04      	itt	eq
 8008c10:	1809      	addeq	r1, r1, r0
 8008c12:	6021      	streq	r1, [r4, #0]
 8008c14:	605c      	str	r4, [r3, #4]
 8008c16:	e7c7      	b.n	8008ba8 <_free_r+0x24>
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000258 	.word	0x20000258

08008c20 <_malloc_r>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	1ccd      	adds	r5, r1, #3
 8008c24:	f025 0503 	bic.w	r5, r5, #3
 8008c28:	3508      	adds	r5, #8
 8008c2a:	2d0c      	cmp	r5, #12
 8008c2c:	bf38      	it	cc
 8008c2e:	250c      	movcc	r5, #12
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	4606      	mov	r6, r0
 8008c34:	db01      	blt.n	8008c3a <_malloc_r+0x1a>
 8008c36:	42a9      	cmp	r1, r5
 8008c38:	d903      	bls.n	8008c42 <_malloc_r+0x22>
 8008c3a:	230c      	movs	r3, #12
 8008c3c:	6033      	str	r3, [r6, #0]
 8008c3e:	2000      	movs	r0, #0
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
 8008c42:	f000 f9d4 	bl	8008fee <__malloc_lock>
 8008c46:	4a21      	ldr	r2, [pc, #132]	; (8008ccc <_malloc_r+0xac>)
 8008c48:	6814      	ldr	r4, [r2, #0]
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	b991      	cbnz	r1, 8008c74 <_malloc_r+0x54>
 8008c4e:	4c20      	ldr	r4, [pc, #128]	; (8008cd0 <_malloc_r+0xb0>)
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	b91b      	cbnz	r3, 8008c5c <_malloc_r+0x3c>
 8008c54:	4630      	mov	r0, r6
 8008c56:	f000 f98f 	bl	8008f78 <_sbrk_r>
 8008c5a:	6020      	str	r0, [r4, #0]
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f000 f98a 	bl	8008f78 <_sbrk_r>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d124      	bne.n	8008cb2 <_malloc_r+0x92>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	6033      	str	r3, [r6, #0]
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f000 f9bf 	bl	8008ff0 <__malloc_unlock>
 8008c72:	e7e4      	b.n	8008c3e <_malloc_r+0x1e>
 8008c74:	680b      	ldr	r3, [r1, #0]
 8008c76:	1b5b      	subs	r3, r3, r5
 8008c78:	d418      	bmi.n	8008cac <_malloc_r+0x8c>
 8008c7a:	2b0b      	cmp	r3, #11
 8008c7c:	d90f      	bls.n	8008c9e <_malloc_r+0x7e>
 8008c7e:	600b      	str	r3, [r1, #0]
 8008c80:	50cd      	str	r5, [r1, r3]
 8008c82:	18cc      	adds	r4, r1, r3
 8008c84:	4630      	mov	r0, r6
 8008c86:	f000 f9b3 	bl	8008ff0 <__malloc_unlock>
 8008c8a:	f104 000b 	add.w	r0, r4, #11
 8008c8e:	1d23      	adds	r3, r4, #4
 8008c90:	f020 0007 	bic.w	r0, r0, #7
 8008c94:	1ac3      	subs	r3, r0, r3
 8008c96:	d0d3      	beq.n	8008c40 <_malloc_r+0x20>
 8008c98:	425a      	negs	r2, r3
 8008c9a:	50e2      	str	r2, [r4, r3]
 8008c9c:	e7d0      	b.n	8008c40 <_malloc_r+0x20>
 8008c9e:	428c      	cmp	r4, r1
 8008ca0:	684b      	ldr	r3, [r1, #4]
 8008ca2:	bf16      	itet	ne
 8008ca4:	6063      	strne	r3, [r4, #4]
 8008ca6:	6013      	streq	r3, [r2, #0]
 8008ca8:	460c      	movne	r4, r1
 8008caa:	e7eb      	b.n	8008c84 <_malloc_r+0x64>
 8008cac:	460c      	mov	r4, r1
 8008cae:	6849      	ldr	r1, [r1, #4]
 8008cb0:	e7cc      	b.n	8008c4c <_malloc_r+0x2c>
 8008cb2:	1cc4      	adds	r4, r0, #3
 8008cb4:	f024 0403 	bic.w	r4, r4, #3
 8008cb8:	42a0      	cmp	r0, r4
 8008cba:	d005      	beq.n	8008cc8 <_malloc_r+0xa8>
 8008cbc:	1a21      	subs	r1, r4, r0
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f000 f95a 	bl	8008f78 <_sbrk_r>
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d0cf      	beq.n	8008c68 <_malloc_r+0x48>
 8008cc8:	6025      	str	r5, [r4, #0]
 8008cca:	e7db      	b.n	8008c84 <_malloc_r+0x64>
 8008ccc:	20000258 	.word	0x20000258
 8008cd0:	2000025c 	.word	0x2000025c

08008cd4 <__ssputs_r>:
 8008cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd8:	688e      	ldr	r6, [r1, #8]
 8008cda:	429e      	cmp	r6, r3
 8008cdc:	4682      	mov	sl, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	4690      	mov	r8, r2
 8008ce2:	4699      	mov	r9, r3
 8008ce4:	d837      	bhi.n	8008d56 <__ssputs_r+0x82>
 8008ce6:	898a      	ldrh	r2, [r1, #12]
 8008ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cec:	d031      	beq.n	8008d52 <__ssputs_r+0x7e>
 8008cee:	6825      	ldr	r5, [r4, #0]
 8008cf0:	6909      	ldr	r1, [r1, #16]
 8008cf2:	1a6f      	subs	r7, r5, r1
 8008cf4:	6965      	ldr	r5, [r4, #20]
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cfc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d00:	f109 0301 	add.w	r3, r9, #1
 8008d04:	443b      	add	r3, r7
 8008d06:	429d      	cmp	r5, r3
 8008d08:	bf38      	it	cc
 8008d0a:	461d      	movcc	r5, r3
 8008d0c:	0553      	lsls	r3, r2, #21
 8008d0e:	d530      	bpl.n	8008d72 <__ssputs_r+0x9e>
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7ff ff85 	bl	8008c20 <_malloc_r>
 8008d16:	4606      	mov	r6, r0
 8008d18:	b950      	cbnz	r0, 8008d30 <__ssputs_r+0x5c>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	f8ca 3000 	str.w	r3, [sl]
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d30:	463a      	mov	r2, r7
 8008d32:	6921      	ldr	r1, [r4, #16]
 8008d34:	f7ff fc32 	bl	800859c <memcpy>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	6126      	str	r6, [r4, #16]
 8008d46:	6165      	str	r5, [r4, #20]
 8008d48:	443e      	add	r6, r7
 8008d4a:	1bed      	subs	r5, r5, r7
 8008d4c:	6026      	str	r6, [r4, #0]
 8008d4e:	60a5      	str	r5, [r4, #8]
 8008d50:	464e      	mov	r6, r9
 8008d52:	454e      	cmp	r6, r9
 8008d54:	d900      	bls.n	8008d58 <__ssputs_r+0x84>
 8008d56:	464e      	mov	r6, r9
 8008d58:	4632      	mov	r2, r6
 8008d5a:	4641      	mov	r1, r8
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	f000 f92d 	bl	8008fbc <memmove>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	1b9b      	subs	r3, r3, r6
 8008d66:	60a3      	str	r3, [r4, #8]
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	441e      	add	r6, r3
 8008d6c:	6026      	str	r6, [r4, #0]
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e7dc      	b.n	8008d2c <__ssputs_r+0x58>
 8008d72:	462a      	mov	r2, r5
 8008d74:	f000 f93d 	bl	8008ff2 <_realloc_r>
 8008d78:	4606      	mov	r6, r0
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1e2      	bne.n	8008d44 <__ssputs_r+0x70>
 8008d7e:	6921      	ldr	r1, [r4, #16]
 8008d80:	4650      	mov	r0, sl
 8008d82:	f7ff feff 	bl	8008b84 <_free_r>
 8008d86:	e7c8      	b.n	8008d1a <__ssputs_r+0x46>

08008d88 <_svfiprintf_r>:
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	461d      	mov	r5, r3
 8008d8e:	898b      	ldrh	r3, [r1, #12]
 8008d90:	061f      	lsls	r7, r3, #24
 8008d92:	b09d      	sub	sp, #116	; 0x74
 8008d94:	4680      	mov	r8, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	4616      	mov	r6, r2
 8008d9a:	d50f      	bpl.n	8008dbc <_svfiprintf_r+0x34>
 8008d9c:	690b      	ldr	r3, [r1, #16]
 8008d9e:	b96b      	cbnz	r3, 8008dbc <_svfiprintf_r+0x34>
 8008da0:	2140      	movs	r1, #64	; 0x40
 8008da2:	f7ff ff3d 	bl	8008c20 <_malloc_r>
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	6120      	str	r0, [r4, #16]
 8008daa:	b928      	cbnz	r0, 8008db8 <_svfiprintf_r+0x30>
 8008dac:	230c      	movs	r3, #12
 8008dae:	f8c8 3000 	str.w	r3, [r8]
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	e0c8      	b.n	8008f4a <_svfiprintf_r+0x1c2>
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	6163      	str	r3, [r4, #20]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc6:	2330      	movs	r3, #48	; 0x30
 8008dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dcc:	9503      	str	r5, [sp, #12]
 8008dce:	f04f 0b01 	mov.w	fp, #1
 8008dd2:	4637      	mov	r7, r6
 8008dd4:	463d      	mov	r5, r7
 8008dd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008dda:	b10b      	cbz	r3, 8008de0 <_svfiprintf_r+0x58>
 8008ddc:	2b25      	cmp	r3, #37	; 0x25
 8008dde:	d13e      	bne.n	8008e5e <_svfiprintf_r+0xd6>
 8008de0:	ebb7 0a06 	subs.w	sl, r7, r6
 8008de4:	d00b      	beq.n	8008dfe <_svfiprintf_r+0x76>
 8008de6:	4653      	mov	r3, sl
 8008de8:	4632      	mov	r2, r6
 8008dea:	4621      	mov	r1, r4
 8008dec:	4640      	mov	r0, r8
 8008dee:	f7ff ff71 	bl	8008cd4 <__ssputs_r>
 8008df2:	3001      	adds	r0, #1
 8008df4:	f000 80a4 	beq.w	8008f40 <_svfiprintf_r+0x1b8>
 8008df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfa:	4453      	add	r3, sl
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfe:	783b      	ldrb	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 809d 	beq.w	8008f40 <_svfiprintf_r+0x1b8>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	9307      	str	r3, [sp, #28]
 8008e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e18:	931a      	str	r3, [sp, #104]	; 0x68
 8008e1a:	462f      	mov	r7, r5
 8008e1c:	2205      	movs	r2, #5
 8008e1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e22:	4850      	ldr	r0, [pc, #320]	; (8008f64 <_svfiprintf_r+0x1dc>)
 8008e24:	f7f7 f9dc 	bl	80001e0 <memchr>
 8008e28:	9b04      	ldr	r3, [sp, #16]
 8008e2a:	b9d0      	cbnz	r0, 8008e62 <_svfiprintf_r+0xda>
 8008e2c:	06d9      	lsls	r1, r3, #27
 8008e2e:	bf44      	itt	mi
 8008e30:	2220      	movmi	r2, #32
 8008e32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e36:	071a      	lsls	r2, r3, #28
 8008e38:	bf44      	itt	mi
 8008e3a:	222b      	movmi	r2, #43	; 0x2b
 8008e3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e40:	782a      	ldrb	r2, [r5, #0]
 8008e42:	2a2a      	cmp	r2, #42	; 0x2a
 8008e44:	d015      	beq.n	8008e72 <_svfiprintf_r+0xea>
 8008e46:	9a07      	ldr	r2, [sp, #28]
 8008e48:	462f      	mov	r7, r5
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	250a      	movs	r5, #10
 8008e4e:	4639      	mov	r1, r7
 8008e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e54:	3b30      	subs	r3, #48	; 0x30
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d94d      	bls.n	8008ef6 <_svfiprintf_r+0x16e>
 8008e5a:	b1b8      	cbz	r0, 8008e8c <_svfiprintf_r+0x104>
 8008e5c:	e00f      	b.n	8008e7e <_svfiprintf_r+0xf6>
 8008e5e:	462f      	mov	r7, r5
 8008e60:	e7b8      	b.n	8008dd4 <_svfiprintf_r+0x4c>
 8008e62:	4a40      	ldr	r2, [pc, #256]	; (8008f64 <_svfiprintf_r+0x1dc>)
 8008e64:	1a80      	subs	r0, r0, r2
 8008e66:	fa0b f000 	lsl.w	r0, fp, r0
 8008e6a:	4318      	orrs	r0, r3
 8008e6c:	9004      	str	r0, [sp, #16]
 8008e6e:	463d      	mov	r5, r7
 8008e70:	e7d3      	b.n	8008e1a <_svfiprintf_r+0x92>
 8008e72:	9a03      	ldr	r2, [sp, #12]
 8008e74:	1d11      	adds	r1, r2, #4
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	9103      	str	r1, [sp, #12]
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	db01      	blt.n	8008e82 <_svfiprintf_r+0xfa>
 8008e7e:	9207      	str	r2, [sp, #28]
 8008e80:	e004      	b.n	8008e8c <_svfiprintf_r+0x104>
 8008e82:	4252      	negs	r2, r2
 8008e84:	f043 0302 	orr.w	r3, r3, #2
 8008e88:	9207      	str	r2, [sp, #28]
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	783b      	ldrb	r3, [r7, #0]
 8008e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e90:	d10c      	bne.n	8008eac <_svfiprintf_r+0x124>
 8008e92:	787b      	ldrb	r3, [r7, #1]
 8008e94:	2b2a      	cmp	r3, #42	; 0x2a
 8008e96:	d133      	bne.n	8008f00 <_svfiprintf_r+0x178>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9203      	str	r2, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfb8      	it	lt
 8008ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ea8:	3702      	adds	r7, #2
 8008eaa:	9305      	str	r3, [sp, #20]
 8008eac:	4d2e      	ldr	r5, [pc, #184]	; (8008f68 <_svfiprintf_r+0x1e0>)
 8008eae:	7839      	ldrb	r1, [r7, #0]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7f7 f994 	bl	80001e0 <memchr>
 8008eb8:	b138      	cbz	r0, 8008eca <_svfiprintf_r+0x142>
 8008eba:	2340      	movs	r3, #64	; 0x40
 8008ebc:	1b40      	subs	r0, r0, r5
 8008ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8008ec2:	9b04      	ldr	r3, [sp, #16]
 8008ec4:	4303      	orrs	r3, r0
 8008ec6:	3701      	adds	r7, #1
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	7839      	ldrb	r1, [r7, #0]
 8008ecc:	4827      	ldr	r0, [pc, #156]	; (8008f6c <_svfiprintf_r+0x1e4>)
 8008ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	1c7e      	adds	r6, r7, #1
 8008ed6:	f7f7 f983 	bl	80001e0 <memchr>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d038      	beq.n	8008f50 <_svfiprintf_r+0x1c8>
 8008ede:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <_svfiprintf_r+0x1e8>)
 8008ee0:	bb13      	cbnz	r3, 8008f28 <_svfiprintf_r+0x1a0>
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	3307      	adds	r3, #7
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	3308      	adds	r3, #8
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	444b      	add	r3, r9
 8008ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef4:	e76d      	b.n	8008dd2 <_svfiprintf_r+0x4a>
 8008ef6:	fb05 3202 	mla	r2, r5, r2, r3
 8008efa:	2001      	movs	r0, #1
 8008efc:	460f      	mov	r7, r1
 8008efe:	e7a6      	b.n	8008e4e <_svfiprintf_r+0xc6>
 8008f00:	2300      	movs	r3, #0
 8008f02:	3701      	adds	r7, #1
 8008f04:	9305      	str	r3, [sp, #20]
 8008f06:	4619      	mov	r1, r3
 8008f08:	250a      	movs	r5, #10
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f10:	3a30      	subs	r2, #48	; 0x30
 8008f12:	2a09      	cmp	r2, #9
 8008f14:	d903      	bls.n	8008f1e <_svfiprintf_r+0x196>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0c8      	beq.n	8008eac <_svfiprintf_r+0x124>
 8008f1a:	9105      	str	r1, [sp, #20]
 8008f1c:	e7c6      	b.n	8008eac <_svfiprintf_r+0x124>
 8008f1e:	fb05 2101 	mla	r1, r5, r1, r2
 8008f22:	2301      	movs	r3, #1
 8008f24:	4607      	mov	r7, r0
 8008f26:	e7f0      	b.n	8008f0a <_svfiprintf_r+0x182>
 8008f28:	ab03      	add	r3, sp, #12
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <_svfiprintf_r+0x1ec>)
 8008f30:	a904      	add	r1, sp, #16
 8008f32:	4640      	mov	r0, r8
 8008f34:	f7fe f8f0 	bl	8007118 <_printf_float>
 8008f38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f3c:	4681      	mov	r9, r0
 8008f3e:	d1d6      	bne.n	8008eee <_svfiprintf_r+0x166>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	065b      	lsls	r3, r3, #25
 8008f44:	f53f af35 	bmi.w	8008db2 <_svfiprintf_r+0x2a>
 8008f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f4a:	b01d      	add	sp, #116	; 0x74
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	ab03      	add	r3, sp, #12
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	4622      	mov	r2, r4
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <_svfiprintf_r+0x1ec>)
 8008f58:	a904      	add	r1, sp, #16
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f7fe fb92 	bl	8007684 <_printf_i>
 8008f60:	e7ea      	b.n	8008f38 <_svfiprintf_r+0x1b0>
 8008f62:	bf00      	nop
 8008f64:	08009304 	.word	0x08009304
 8008f68:	0800930a 	.word	0x0800930a
 8008f6c:	0800930e 	.word	0x0800930e
 8008f70:	08007119 	.word	0x08007119
 8008f74:	08008cd5 	.word	0x08008cd5

08008f78 <_sbrk_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4c06      	ldr	r4, [pc, #24]	; (8008f94 <_sbrk_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4605      	mov	r5, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	f7f8 ff4c 	bl	8001e20 <_sbrk>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_sbrk_r+0x1a>
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_sbrk_r+0x1a>
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	200003dc 	.word	0x200003dc

08008f98 <__ascii_mbtowc>:
 8008f98:	b082      	sub	sp, #8
 8008f9a:	b901      	cbnz	r1, 8008f9e <__ascii_mbtowc+0x6>
 8008f9c:	a901      	add	r1, sp, #4
 8008f9e:	b142      	cbz	r2, 8008fb2 <__ascii_mbtowc+0x1a>
 8008fa0:	b14b      	cbz	r3, 8008fb6 <__ascii_mbtowc+0x1e>
 8008fa2:	7813      	ldrb	r3, [r2, #0]
 8008fa4:	600b      	str	r3, [r1, #0]
 8008fa6:	7812      	ldrb	r2, [r2, #0]
 8008fa8:	1c10      	adds	r0, r2, #0
 8008faa:	bf18      	it	ne
 8008fac:	2001      	movne	r0, #1
 8008fae:	b002      	add	sp, #8
 8008fb0:	4770      	bx	lr
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	e7fb      	b.n	8008fae <__ascii_mbtowc+0x16>
 8008fb6:	f06f 0001 	mvn.w	r0, #1
 8008fba:	e7f8      	b.n	8008fae <__ascii_mbtowc+0x16>

08008fbc <memmove>:
 8008fbc:	4288      	cmp	r0, r1
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	eb01 0302 	add.w	r3, r1, r2
 8008fc4:	d807      	bhi.n	8008fd6 <memmove+0x1a>
 8008fc6:	1e42      	subs	r2, r0, #1
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d00a      	beq.n	8008fe2 <memmove+0x26>
 8008fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008fd4:	e7f8      	b.n	8008fc8 <memmove+0xc>
 8008fd6:	4283      	cmp	r3, r0
 8008fd8:	d9f5      	bls.n	8008fc6 <memmove+0xa>
 8008fda:	1881      	adds	r1, r0, r2
 8008fdc:	1ad2      	subs	r2, r2, r3
 8008fde:	42d3      	cmn	r3, r2
 8008fe0:	d100      	bne.n	8008fe4 <memmove+0x28>
 8008fe2:	bd10      	pop	{r4, pc}
 8008fe4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fe8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008fec:	e7f7      	b.n	8008fde <memmove+0x22>

08008fee <__malloc_lock>:
 8008fee:	4770      	bx	lr

08008ff0 <__malloc_unlock>:
 8008ff0:	4770      	bx	lr

08008ff2 <_realloc_r>:
 8008ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4614      	mov	r4, r2
 8008ff8:	460e      	mov	r6, r1
 8008ffa:	b921      	cbnz	r1, 8009006 <_realloc_r+0x14>
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009002:	f7ff be0d 	b.w	8008c20 <_malloc_r>
 8009006:	b922      	cbnz	r2, 8009012 <_realloc_r+0x20>
 8009008:	f7ff fdbc 	bl	8008b84 <_free_r>
 800900c:	4625      	mov	r5, r4
 800900e:	4628      	mov	r0, r5
 8009010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009012:	f000 f821 	bl	8009058 <_malloc_usable_size_r>
 8009016:	42a0      	cmp	r0, r4
 8009018:	d20f      	bcs.n	800903a <_realloc_r+0x48>
 800901a:	4621      	mov	r1, r4
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff fdff 	bl	8008c20 <_malloc_r>
 8009022:	4605      	mov	r5, r0
 8009024:	2800      	cmp	r0, #0
 8009026:	d0f2      	beq.n	800900e <_realloc_r+0x1c>
 8009028:	4631      	mov	r1, r6
 800902a:	4622      	mov	r2, r4
 800902c:	f7ff fab6 	bl	800859c <memcpy>
 8009030:	4631      	mov	r1, r6
 8009032:	4638      	mov	r0, r7
 8009034:	f7ff fda6 	bl	8008b84 <_free_r>
 8009038:	e7e9      	b.n	800900e <_realloc_r+0x1c>
 800903a:	4635      	mov	r5, r6
 800903c:	e7e7      	b.n	800900e <_realloc_r+0x1c>

0800903e <__ascii_wctomb>:
 800903e:	b149      	cbz	r1, 8009054 <__ascii_wctomb+0x16>
 8009040:	2aff      	cmp	r2, #255	; 0xff
 8009042:	bf85      	ittet	hi
 8009044:	238a      	movhi	r3, #138	; 0x8a
 8009046:	6003      	strhi	r3, [r0, #0]
 8009048:	700a      	strbls	r2, [r1, #0]
 800904a:	f04f 30ff 	movhi.w	r0, #4294967295
 800904e:	bf98      	it	ls
 8009050:	2001      	movls	r0, #1
 8009052:	4770      	bx	lr
 8009054:	4608      	mov	r0, r1
 8009056:	4770      	bx	lr

08009058 <_malloc_usable_size_r>:
 8009058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905c:	1f18      	subs	r0, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfbc      	itt	lt
 8009062:	580b      	ldrlt	r3, [r1, r0]
 8009064:	18c0      	addlt	r0, r0, r3
 8009066:	4770      	bx	lr

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
